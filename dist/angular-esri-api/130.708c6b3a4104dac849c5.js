(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{Wvof:function(e,t,a){"use strict";a.r(t);var r=a("pO5D"),i=(a("wSAH"),a("6S2I"),a("zqDF"),a("WbKI")),o=a("r88o"),n=a("04ZG"),l=(a("4EHJ"),a("ju1D"),a("9AIY"),a("WZb1")),c=a("OvF4"),p=(a("4GrV"),a("LE9a")),s=a("pqNC"),b=a("5pQd"),d=a("uRH/"),y=a("mXvl"),O=a("DbUH"),u=a("WmKv"),j=a("W9Wu"),m=a("9iar");let f=class extends(Object(y.a)(Object(u.a)(Object(d.a)(Object(O.a)(Object(b.a)(s.a)))))){constructor(e){super(e),this.capabilities={operations:{supportsEditing:!0}},this.legendEnabled=!1,this.lineGraphics=new m.b,this.opacity=1,this.pointGraphics=new m.b,this.polygonGraphics=new m.b,this.textGraphics=new m.b,this.type="map-notes"}readFullExtent(e,t){if(!t.layers.length)return new c.a({xmin:-180,ymin:-90,xmax:180,ymax:90,spatialReference:l.a.WGS84});const a=l.a.fromJSON(t.layers[0].layerDefinition.spatialReference);return t.layers.reduce((e,t)=>{const a=t.layerDefinition.extent;return a?c.a.fromJSON(a).union(e):e},new c.a({spatialReference:a}))}readCapabilities(e,t){return{operations:{supportsEditing:!t.layers.some(e=>!!e.layerDefinition.drawingInfo)}}}readFeatureCollections(e,t,a){const r=t.layers.map(e=>{const t=new j.default;return t.read(e,a),t});return new p.a({items:r})}readMinScale(e,t){for(const a of t.layers)if(null!=a.layerDefinition.minScale)return a.layerDefinition.minScale;return 0}readMaxScale(e,t){for(const a of t.layers)if(null!=a.layerDefinition.maxScale)return a.layerDefinition.maxScale;return 0}load(e){return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Feature Collection"]},e)),Promise.resolve(this)}read(e,t){"featureCollection"in e&&super.read(e.featureCollection,t),super.read(e,t)}};Object(r.a)([Object(o.a)(["web-map","portal-item"],"fullExtent",["layers"])],f.prototype,"readFullExtent",null),Object(r.a)([Object(i.b)({readOnly:!0})],f.prototype,"capabilities",void 0),Object(r.a)([Object(o.a)(["portal-item","web-map"],"capabilities",["layers"])],f.prototype,"readCapabilities",null),Object(r.a)([Object(i.b)({readOnly:!0})],f.prototype,"featureCollections",void 0),Object(r.a)([Object(o.a)(["web-map","portal-item"],"featureCollections",["layers"])],f.prototype,"readFeatureCollections",null),Object(r.a)([Object(i.b)({readOnly:!0,json:{origins:{service:{read:{enabled:!1}}},name:"showLegend",write:!0}})],f.prototype,"legendEnabled",void 0),Object(r.a)([Object(i.b)(Object(m.c)("lineGraphics"))],f.prototype,"lineGraphics",void 0),Object(r.a)([Object(i.b)({type:["show","hide"]})],f.prototype,"listMode",void 0),Object(r.a)([Object(o.a)(["web-map","portal-item"],"minScale",["layers"])],f.prototype,"readMinScale",null),Object(r.a)([Object(o.a)(["web-map","portal-item"],"maxScale",["layers"])],f.prototype,"readMaxScale",null),Object(r.a)([Object(i.b)({type:Number,json:{name:"opacity",write:!0}})],f.prototype,"opacity",void 0),Object(r.a)([Object(i.b)(Object(m.c)("pointGraphics"))],f.prototype,"pointGraphics",void 0),Object(r.a)([Object(i.b)(Object(m.c)("polygonGraphics"))],f.prototype,"polygonGraphics",void 0),Object(r.a)([Object(i.b)(Object(m.c)("textGraphics"))],f.prototype,"textGraphics",void 0),Object(r.a)([Object(i.b)({readOnly:!0,json:{read:!1}})],f.prototype,"type",void 0),f=Object(r.a)([Object(n.a)("esri.layers.MapNotesLayer")],f),t.default=f}}]);