{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{\"+yyC\":function(e,t,n){\"use strict\";function i(e,t,n){const i=t&&t.length,l=i?t[0]*n:e.length;let s=o(e,0,l,n,!0);const c=new Array;if(!s||s.next===s.prev)return c;let u,_,m,v,p;if(i&&(s=function(e,t,n,i){const r=new Array;for(let a=0,l=t.length;a<l;a++){const n=o(e,t[a]*i,a<l-1?t[a+1]*i:e.length,i,!1);n===n.next&&(n.steiner=!0),r.push(f(n))}r.sort(C);for(const o of r)d(o,n),n=a(n,n.next);return n}(e,t,s,n)),e.length>80*n){u=m=e[0],_=v=e[1];for(let t=n;t<l;t+=n){const n=e[t],i=e[t+1];u=Math.min(u,n),_=Math.min(_,i),m=Math.max(m,n),v=Math.max(v,i)}p=Math.max(m-u,v-_),p=0!==p?1/p:0}return r(s,c,n,u,_,p),c}function o(e,t,n,i,o){let a;if(o===g(e,t,n,i)>0)for(let r=t;r<n;r+=i)a=c(r,e[r],e[r+1],a);else for(let r=n-i;r>=t;r-=i)a=c(r,e[r],e[r+1],a);return a&&y(a,a.next)&&(u(a),a=a.next),a}function a(e,t=e){if(!e)return e;let n,i=e;do{if(n=!1,i.steiner||!y(i,i.next)&&0!==v(i.prev,i,i.next))i=i.next;else{if(u(i),i=t=i.prev,i===i.next)break;n=!0}}while(n||i!==t);return t}function r(e,t,n,i,o,c,f=0){if(!e)return;!f&&c&&(e=_(e,i,o,c));let d=e;for(;e.prev!==e.next;){const _=e.prev,m=e.next;if(c?s(e,i,o,c):l(e))t.push(_.index/n),t.push(e.index/n),t.push(m.index/n),u(e),e=m.next,d=m.next;else if((e=m)===d){f?1===f?r(e=S(e,t,n),t,n,i,o,c,2):2===f&&T(e,t,n,i,o,c):r(a(e),t,n,i,o,c,1);break}}}function l(e){const t=e.prev,n=e,i=e.next;if(v(t,n,i)>=0)return!1;let o=e.next.next;const a=o;let r=0;for(;o!==e.prev&&(0===r||o!==a);){if(r++,h(t.x,t.y,n.x,n.y,i.x,i.y,o.x,o.y)&&v(o.prev,o,o.next)>=0)return!1;o=o.next}return!0}function s(e,t,n,i){const o=e.prev,a=e,r=e.next;if(v(o,a,r)>=0)return!1;const l=o.x>a.x?o.x>r.x?o.x:r.x:a.x>r.x?a.x:r.x,s=o.y>a.y?o.y>r.y?o.y:r.y:a.y>r.y?a.y:r.y,c=b(o.x<a.x?o.x<r.x?o.x:r.x:a.x<r.x?a.x:r.x,o.y<a.y?o.y<r.y?o.y:r.y:a.y<r.y?a.y:r.y,t,n,i),u=b(l,s,t,n,i);let f=e.prevZ,d=e.nextZ;for(;f&&f.z>=c&&d&&d.z<=u;){if(f!==e.prev&&f!==e.next&&h(o.x,o.y,a.x,a.y,r.x,r.y,f.x,f.y)&&v(f.prev,f,f.next)>=0)return!1;if(f=f.prevZ,d!==e.prev&&d!==e.next&&h(o.x,o.y,a.x,a.y,r.x,r.y,d.x,d.y)&&v(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(;f&&f.z>=c;){if(f!==e.prev&&f!==e.next&&h(o.x,o.y,a.x,a.y,r.x,r.y,f.x,f.y)&&v(f.prev,f,f.next)>=0)return!1;f=f.prevZ}for(;d&&d.z<=u;){if(d!==e.prev&&d!==e.next&&h(o.x,o.y,a.x,a.y,r.x,r.y,d.x,d.y)&&v(d.prev,d,d.next)>=0)return!1;d=d.nextZ}return!0}function c(e,t,n,i){const o=new z(e,t,n);return i?(o.next=i.next,o.prev=i,i.next.prev=o,i.next=o):(o.prev=o,o.next=o),o}function u(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function f(e){let t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function d(e,t){if(t=function(e,t){let n=t;const i=e.x,o=e.y;let a,r=-1/0;do{if(o<=n.y&&o>=n.next.y&&n.next.y!==n.y){const e=n.x+(o-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(e<=i&&e>r){if(r=e,e===i){if(o===n.y)return n;if(o===n.next.y)return n.next}a=n.x<n.next.x?n:n.next}}n=n.next}while(n!==t);if(!a)return null;if(i===r)return a.prev;const l=a,s=a.x,c=a.y;let u,f=1/0;for(n=a.next;n!==l;)i>=n.x&&n.x>=s&&i!==n.x&&h(o<c?i:r,o,s,c,o<c?r:i,o,n.x,n.y)&&(u=Math.abs(o-n.y)/(i-n.x),(u<f||u===f&&n.x>a.x)&&x(n,e)&&(a=n,f=u)),n=n.next;return a}(e,t)){const n=O(t,e);a(n,n.next)}}function _(e,t,n,i){for(let o;o!==e;o=o.next){if(o=o||e,null===o.z&&(o.z=b(o.x,o.y,t,n,i)),o.prev.next!==o||o.next.prev!==o)return o.prev.next=o,o.next.prev=o,_(e,t,n,i);o.prevZ=o.prev,o.nextZ=o.next}return e.prevZ.nextZ=null,e.prevZ=null,function(e){let t,n=1;for(;;){let i,o=e;e=null,t=null;let a=0;for(;o;){a++,i=o;let r=0;for(;r<n&&i;r++)i=i.nextZ;let l=n;for(;r>0||l>0&&i;){let n;0===r?(n=i,i=i.nextZ,l--):0!==l&&i?o.z<=i.z?(n=o,o=o.nextZ,r--):(n=i,i=i.nextZ,l--):(n=o,o=o.nextZ,r--),t?t.nextZ=n:e=n,n.prevZ=t,t=n}o=i}if(t.nextZ=null,n*=2,a<2)return e}}(e)}function m(e,t,n,i){const o=t&&t.length;let a=Math.abs(g(e,0,o?t[0]*n:e.length,n));if(o)for(let l=0,s=t.length;l<s;l++)a-=Math.abs(g(e,t[l]*n,l<s-1?t[l+1]*n:e.length,n));let r=0;for(let l=0;l<i.length;l+=3){const t=i[l]*n,o=i[l+1]*n,a=i[l+2]*n;r+=Math.abs((e[t]-e[a])*(e[o+1]-e[t+1])-(e[t]-e[o])*(e[a+1]-e[t+1]))}return 0===a&&0===r?0:Math.abs((r-a)/a)}function v(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function p(e,t,n,i){return!!(y(e,t)&&y(n,i)||y(e,i)&&y(n,t))||v(e,t,n)>0!=v(e,t,i)>0&&v(n,i,e)>0!=v(n,i,t)>0}function g(e,t,n,i){let o=0;for(let a=t,r=n-i;a<n;a+=i)o+=(e[r]-e[a])*(e[a+1]+e[r+1]),r=a;return o}function h(e,t,n,i,o,a,r,l){return(o-r)*(t-l)-(e-r)*(a-l)>=0&&(e-r)*(i-l)-(n-r)*(t-l)>=0&&(n-r)*(a-l)-(o-r)*(i-l)>=0}function x(e,t){return v(e.prev,e,e.next)<0?v(e,t,e.next)>=0&&v(e,e.prev,t)>=0:v(e,t,e.prev)<0||v(e,e.next,t)<0}function b(e,t,n,i,o){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*o)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*o)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function y(e,t){return e.x===t.x&&e.y===t.y}function C(e,t){return e.x-t.x}function S(e,t,n){let i=e;do{const o=i.prev,a=i.next.next;!y(o,a)&&p(o,i,i.next,a)&&x(o,a)&&x(a,o)&&(t.push(o.index/n),t.push(i.index/n),t.push(a.index/n),u(i),u(i.next),i=e=a),i=i.next}while(i!==e);return i}function T(e,t,n,i,o,l){let s=e;do{let e=s.next.next;for(;e!==s.prev;){if(s.index!==e.index&&D(s,e)){let c=O(s,e);return s=a(s,s.next),c=a(c,c.next),r(s,t,n,i,o,l),void r(c,t,n,i,o,l)}e=e.next}s=s.next}while(s!==e)}function D(e,t){return e.next.index!==t.index&&e.prev.index!==t.index&&!function(e,t){let n=e;do{if(n.index!==e.index&&n.next.index!==e.index&&n.index!==t.index&&n.next.index!==t.index&&p(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&x(e,t)&&x(t,e)&&function(e,t){let n=e,i=!1;const o=(e.x+t.x)/2,a=(e.y+t.y)/2;do{n.y>a!=n.next.y>a&&n.next.y!==n.y&&o<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==e);return i}(e,t)}function O(e,t){const n=new z(e.index,e.x,e.y),i=new z(t.index,t.x,t.y),o=e.next,a=t.prev;return e.next=t,t.prev=e,n.next=o,o.prev=n,i.next=n,n.prev=i,a.next=i,i.prev=a,i}n.d(t,\"a\",function(){return m}),n.d(t,\"b\",function(){return i});class z{constructor(e,t,n){this.index=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}}},\"1F90\":function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return a}),n.d(t,\"b\",function(){return o});var i=n(\"jjdI\");function o(e){let t=\"\";for(const n in e){const i=e[n];if(\"boolean\"==typeof i)i&&(t+=`#define ${n}\\n`);else if(\"number\"==typeof i)t+=`#define ${n} ${i.toFixed()}\\n`;else if(\"object\"==typeof i){const e=i.options;let o=0;for(const n in e)t+=`#define ${e[n]} ${(o++).toFixed()}\\n`;t+=`#define ${n} ${e[i.value]}\\n`}}return t}function a(e,t,n,o){n=n||{},o=o||\"\";const a=\"function\"==typeof t.shaders?t.shaders(n):t.shaders;return new i.a(e,o+a.vertexShader,o+a.fragmentShader,t.attributes)}},\"2yHJ\":function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return o}),n.d(t,\"b\",function(){return a}),n.d(t,\"c\",function(){return i}),n.d(t,\"d\",function(){return r});const i=!0,o=32,a=1.5,r=200},\"6ldq\":function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return c}),n.d(t,\"b\",function(){return f}),n.d(t,\"c\",function(){return _}),n.d(t,\"d\",function(){return g}),n.d(t,\"e\",function(){return x}),n.d(t,\"f\",function(){return v}),n.d(t,\"g\",function(){return y}),n(\"wSAH\"),n(\"OKTS\"),n(\"n4uK\"),n(\"0meK\");var i=n(\"1F90\"),o=(n(\"bfJE\"),n(\"SfCL\")),a={background:{\"background.frag\":\"#ifdef PATTERN\\nuniform lowp float u_opacity;\\nuniform mediump vec2 u_pattern_tl;\\nuniform mediump vec2 u_pattern_br;\\nuniform sampler2D u_texture;\\nvarying mediump vec2 v_tileTextureCoord;\\n#else\\nuniform lowp vec4 u_color;\\n#endif\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvoid main() {\\n#ifdef PATTERN\\n  mediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\n  mediump vec2 samplePos = mix(u_pattern_tl, u_pattern_br, normalizedTextureCoord);\\n  lowp vec4 color = texture2D(u_texture, samplePos);\\n  gl_FragColor = u_opacity * color;\\n#else\\n  gl_FragColor = u_color;\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"background.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_coord_range;\\nuniform mediump float u_depth;\\n#ifdef PATTERN\\nuniform mediump mat3 u_pattern_matrix;\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\nvoid main() {\\n  gl_Position = vec4((u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0)).xy, u_depth, 1.0);\\n#ifdef PATTERN\\n  v_tileTextureCoord = (u_pattern_matrix * vec3(a_pos, 1.0)).xy;\\n#endif\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n}\"},circle:{\"circle.frag\":\"precision lowp float;\\nvarying lowp vec4 v_color;\\nvarying lowp vec4 v_stroke_color;\\nvarying mediump float v_blur;\\nvarying mediump float v_stroke_width;\\nvarying mediump float v_radius;\\nvarying mediump vec2 v_offset;\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvoid main()\\n{\\n  mediump float dist = length(v_offset);\\n  mediump float alpha = smoothstep(0.0, -v_blur, dist - 1.0);\\n  lowp float color_mix_ratio = v_stroke_width < 0.01 ? 0.0 : smoothstep(-v_blur, 0.0, dist - v_radius / (v_radius + v_stroke_width));\\n  gl_FragColor = alpha * mix(v_color, v_stroke_color, color_mix_ratio);\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"circle.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec4 a_color;\\nattribute vec4 a_stroke_color;\\nattribute vec4 a_data;\\nconst float sizePrecision = 0.25;\\nconst float blurPrecision = 0.03125;\\nvarying lowp vec4 v_color;\\nvarying lowp vec4 v_stroke_color;\\nvarying mediump float v_blur;\\nvarying mediump float v_stroke_width;\\nvarying mediump float v_radius;\\nvarying mediump vec2 v_offset;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform mediump vec2 u_circleTranslation;\\nuniform mediump float u_depth;\\nuniform mediump float u_radius;\\nuniform lowp vec4 u_color;\\nuniform mediump float u_blur;\\nuniform mediump float u_stroke_width;\\nuniform lowp vec4 u_stroke_color;\\nuniform mediump float u_antialiasingWidth;\\nvoid main()\\n{\\n  v_color = a_color * u_color;\\n  v_stroke_color = a_stroke_color * u_stroke_color;\\n  v_stroke_width = a_data[1] * sizePrecision * u_stroke_width;\\n  v_radius = a_data[2] * u_radius;\\n  v_blur = max(a_data[0] * blurPrecision + u_blur, u_antialiasingWidth / (v_radius + v_stroke_width));\\n  mediump vec2 offset = vec2(mod(a_pos, 2.0) * 2.0 - 1.0);\\n  v_offset = offset;\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos * 0.5, 1.0) + u_displayMat3 * vec3((v_radius + v_stroke_width) * offset + u_circleTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\\n}\"},fill:{\"fill.frag\":\"precision lowp float;\\n#ifdef PATTERN\\nuniform mediump vec2 u_pattern_tl;\\nuniform mediump vec2 u_pattern_br;\\nuniform lowp sampler2D u_texture;\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvarying lowp vec4 v_color;\\nvec4 mixColors(vec4 color1, vec4 color2) {\\n  float compositeAlpha = color2.a + color1.a * (1.0 - color2.a);\\n  vec3 compositeColor = color2.rgb + color1.rgb * (1.0 - color2.a);\\n  return vec4(compositeColor, compositeAlpha);\\n}\\nvoid main()\\n{\\n#ifdef PATTERN\\n  mediump vec2 normalizedTextureCoord = fract(v_tileTextureCoord);\\n  mediump vec2 samplePos = mix(u_pattern_tl, u_pattern_br, normalizedTextureCoord);\\n  lowp vec4 color = texture2D(u_texture, samplePos);\\n  gl_FragColor = v_color[3] * color;\\n#else\\n  gl_FragColor = v_color;\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"fill.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_fillTranslation;\\n#ifdef PATTERN\\nuniform mediump mat3 u_pattern_matrix;\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\n#ifdef DD\\nattribute vec4 a_color;\\n#endif\\nuniform lowp vec4 u_color;\\nvarying lowp vec4 v_color;\\nvoid main()\\n{\\n#ifdef DD\\n  v_color = a_color * u_color;\\n#else\\n  v_color = u_color;\\n#endif\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n#ifdef PATTERN\\n  v_tileTextureCoord = (u_pattern_matrix * vec3(a_pos, 1.0)).xy;\\n#endif\\n  vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(u_fillTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\\n}\"},icon:{\"icon.frag\":\"precision mediump float;\\nuniform lowp sampler2D u_texture;\\n#ifdef SDF\\nuniform lowp vec4 u_color;\\nuniform lowp vec4 u_outlineColor;\\nuniform mediump float u_outlineSize;\\n#endif\\nvarying mediump vec2 v_tex;\\nvarying lowp float v_opacity;\\nvarying mediump vec2 v_size;\\nvarying lowp vec4 v_color;\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\n#include <util/encoding.glsl>\\nvec4 mixColors(vec4 color1, vec4 color2) {\\n  float compositeAlpha = color2.a + color1.a * (1.0 - color2.a);\\n  vec3 compositeColor = color2.rgb + color1.rgb * (1.0 - color2.a);\\n  return vec4(compositeColor, compositeAlpha);\\n}\\nvoid main()\\n{\\n#ifdef SDF\\n  lowp vec4 fillPixelColor = v_color;\\n  float d = rgba2float(texture2D(u_texture, v_tex)) - 0.5;\\n  const float sofetEdgeRatio = 0.248062016;\\n  float size = max(v_size.x, v_size.y);\\n  float dist = d * sofetEdgeRatio * size;\\n  fillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\n  if (u_outlineSize > 0.25) {\\n    lowp vec4 outlinePixelColor = u_outlineColor;\\n    const float outlineLimitRatio = (16.0 / 86.0);\\n    float clampedOutlineSize = sofetEdgeRatio * min(u_outlineSize, outlineLimitRatio * max(v_size.x, v_size.y));\\n    outlinePixelColor *= clamp(0.5 - (abs(dist) - clampedOutlineSize), 0.0, 1.0);\\n    gl_FragColor = v_opacity * mixColors(fillPixelColor, outlinePixelColor);\\n  }\\n  else {\\n    gl_FragColor = v_opacity * fillPixelColor;\\n  }\\n#else\\n  lowp vec4 texColor = texture2D(u_texture, v_tex);\\n  gl_FragColor = v_opacity * texColor;\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"icon.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_vertexOffset;\\nattribute vec4 a_texAngleRange;\\nattribute vec4 a_levelInfo;\\nattribute float a_opacityInfo;\\n#ifdef DD\\nattribute vec4 a_color;\\nattribute mediump float a_size;\\n#endif\\nuniform lowp vec4 u_color;\\nuniform mediump float u_size;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nvarying lowp vec4 v_color;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform highp mat3 u_displayViewMat3;\\nuniform mediump vec2 u_iconTranslation;\\nuniform vec2 u_mosaicSize;\\nuniform mediump float u_depth;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_level;\\nuniform lowp float u_keepUpright;\\nuniform mediump float u_opacity;\\nuniform mediump float u_fadeDuration;\\nvarying mediump vec2 v_tex;\\nvarying lowp float v_opacity;\\nvarying mediump vec2 v_size;\\nconst float C_OFFSET_PRECISION = 1.0 / 8.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float tileCoordRatio = 1.0 / 8.0;\\nuniform highp float u_time;\\nvoid main()\\n{\\n  float modded = mod(a_opacityInfo, 128.0);\\n  float targetOpacity = (a_opacityInfo - modded) / 128.0;\\n  float startOpacity = modded / 127.0;\\n  float interpolatedOpacity = clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\\n  v_opacity = u_opacity * interpolatedOpacity;\\n  mediump float a_angle         = a_levelInfo[1];\\n  mediump float a_minLevel      = a_levelInfo[2];\\n  mediump float a_maxLevel      = a_levelInfo[3];\\n  mediump vec2 a_tex            = a_texAngleRange.xy;\\n  mediump float delta_z = 0.0;\\n  mediump float rotated = mod(a_angle + u_mapRotation, 256.0);\\n  delta_z += (1.0 - step(u_keepUpright, 0.0)) * step(64.0, rotated) * (1.0 - step(192.0, rotated));\\n  delta_z += 1.0 - step(a_minLevel, u_level);\\n  delta_z += step(a_maxLevel, u_level);\\n  delta_z += step(v_opacity, 0.0);\\n  vec2 offset = C_OFFSET_PRECISION * a_vertexOffset;\\n  v_size = abs(offset);\\n#ifdef SDF\\n  offset = (120.0 / 86.0) * offset;\\n#endif\\n#ifdef DD\\n  mediump float icon_size = a_size * u_size;\\n#else\\n  mediump float icon_size = u_size;\\n#endif\\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayViewMat3 * vec3(icon_size * offset, 0.0) + u_displayMat3 * vec3(u_iconTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth + delta_z, 1.0);\\n#ifdef DD\\n  v_color = a_color * u_color;\\n#else\\n  v_color = u_color;\\n#endif\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n  v_tex = a_tex.xy / u_mosaicSize;\\n  v_opacity *= v_color.w;\\n}\"},line:{\"line.frag\":\"varying mediump vec2 v_normal;\\nvarying highp float v_accumulatedDistance;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp vec4 v_color;\\nvarying mediump float v_blur;\\n#ifdef PATTERN\\nuniform mediump vec2 u_pattern_tl;\\nuniform mediump vec2 u_pattern_br;\\nuniform mediump vec2 u_spriteSize;\\nuniform sampler2D u_texture;\\nconst mediump float tileCoordRatio = 8.0;\\n#else\\nvarying mediump vec2 v_dasharray;\\n#endif\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvoid main()\\n{\\n  mediump float fragDist = length(v_normal) * v_lineHalfWidth;\\n  lowp float alpha = clamp((v_lineHalfWidth - fragDist) / v_blur, 0.0, 1.0);\\n#ifdef PATTERN\\n  mediump float relativeTexX = mod((v_accumulatedDistance + v_normal.x * v_lineHalfWidth * tileCoordRatio) / u_spriteSize.x, 1.0);\\n  mediump float relativeTexY = 0.5 + (v_normal.y * v_lineHalfWidth / u_spriteSize.y);\\n  mediump vec2 texCoord = mix(u_pattern_tl, u_pattern_br, vec2(relativeTexX, relativeTexY));\\n  lowp vec4 color = texture2D(u_texture, texCoord);\\n  gl_FragColor = alpha * v_color[3] * color;\\n#else\\n  lowp float dashPos =  mod(v_accumulatedDistance, v_dasharray.x + v_dasharray.y);\\n  lowp float dashAlpha = clamp(min(dashPos, v_dasharray.x - dashPos) + 0.5, 0.0, 1.0);\\n  dashAlpha = max(sign(-v_dasharray.y), dashAlpha);\\n  alpha *= dashAlpha;\\n  gl_FragColor = alpha * v_color;\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"line.vert\":\"attribute vec2 a_pos;\\nattribute vec4 a_offsetAndNormal;\\nattribute vec2 a_accumulatedDistance;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform highp mat3 u_displayViewMat3;\\nuniform mediump vec2 u_lineTranslation;\\nuniform mediump float u_blur;\\nuniform mediump float u_antialiasing;\\nuniform mediump float u_depth;\\nvarying mediump vec2 v_normal;\\nvarying highp float v_accumulatedDistance;\\nconst float scale = 1.0 / 31.0;\\n#ifdef DD\\nattribute vec4 a_color;\\nattribute mediump float a_width;\\n#endif\\nuniform lowp vec4 u_color;\\nuniform mediump float u_width;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nvarying lowp vec4 v_color;\\nvarying mediump float v_lineHalfWidth;\\nvarying mediump float v_blur;\\n#ifndef PATTERN\\nuniform mediump vec2 u_dasharray;\\nvarying mediump vec2 v_dasharray;\\n#endif\\nvoid main()\\n{\\n  v_normal = a_offsetAndNormal.zw * scale;\\n#ifdef DD\\n  v_lineHalfWidth = a_width * u_width;\\n#else\\n  v_lineHalfWidth = u_width;\\n#endif\\n  v_lineHalfWidth += u_antialiasing;\\n  v_lineHalfWidth *= 0.5;\\n#ifndef PATTERN\\n#ifdef DD\\n  v_dasharray = u_dasharray * a_width;\\n#else\\n  v_dasharray = u_dasharray * u_width;\\n#endif\\n#endif\\n  mediump vec2 dist = v_lineHalfWidth * scale * a_offsetAndNormal.xy;\\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) +  u_displayViewMat3 * vec3(dist, 0.0) + u_displayMat3 * vec3(u_lineTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\\n  v_accumulatedDistance = a_accumulatedDistance.x;\\n  v_blur = u_blur + u_antialiasing;\\n  #ifdef DD\\n    v_color = a_color * u_color;\\n  #else\\n    v_color = u_color;\\n  #endif\\n  #ifdef ID\\n    v_id = u_id / 255.0;\\n  #endif\\n}\"},outline:{\"outline.frag\":\"varying lowp vec4 v_color;\\nvarying mediump vec2 v_normal;\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvoid main()\\n{\\n  lowp float dist = abs(v_normal.y);\\n  lowp float alpha = smoothstep(1.0, 0.0, dist);\\n  gl_FragColor = alpha * v_color;\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"outline.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_xnormal;\\n#ifdef DD\\nattribute vec4 a_color;\\n#endif\\nuniform lowp vec4 u_color;\\nvarying lowp vec4 v_color;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform mediump vec2 u_fillTranslation;\\nuniform mediump float u_depth;\\nuniform mediump float u_outline_width;\\nvarying lowp vec2 v_normal;\\nconst float scale = 1.0 / 15.0;\\nvoid main()\\n{\\n#ifdef DD\\n  v_color = a_color * u_color;\\n#else\\n  v_color = u_color;\\n#endif\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n  v_normal = a_xnormal;\\n  mediump vec2 dist = u_outline_width * scale * a_offset;\\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(dist + u_fillTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\\n}\"},text:{\"text.frag\":\"uniform lowp sampler2D u_texture;\\nuniform mediump float u_edgeDistance;\\nvarying lowp vec2 v_tex;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying mediump float v_edgeWidth;\\nvarying mediump float v_edgeDistance;\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvoid main()\\n{\\n  lowp float dist = texture2D(u_texture, v_tex).a;\\n  mediump float alpha = smoothstep(v_edgeDistance - v_edgeWidth, v_edgeDistance + v_edgeWidth, dist) * v_opacity;\\n  gl_FragColor = alpha * v_color;\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"text.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_vertexOffset;\\nattribute vec4 a_texAngleRange;\\nattribute vec4 a_levelInfo;\\nattribute float a_opacityInfo;\\nuniform lowp vec4 u_color;\\n#ifdef DD\\nattribute vec4 a_color;\\n#endif\\nvarying lowp vec4 v_color;\\nuniform mediump float u_size;\\n#ifdef DD\\nattribute mediump float a_size;\\n#endif\\nvarying mediump float v_size;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform highp mat3 u_displayViewMat3;\\nuniform mediump vec2 u_textTranslation;\\nuniform vec2 u_mosaicSize;\\nuniform mediump float u_depth;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_level;\\nuniform lowp float u_keepUpright;\\nuniform mediump float u_opacity;\\nuniform mediump float u_fadeDuration;\\nvarying lowp vec2 v_tex;\\nvarying lowp float v_opacity;\\nconst float offsetPrecision = 1.0 / 8.0;\\nconst mediump float edgePos = 0.75;\\nuniform mediump float u_edgeDistance;\\nuniform mediump float u_edgeBlur;\\nuniform mediump float u_antialiasingWidth;\\nvarying mediump float v_edgeDistance;\\nvarying mediump float v_edgeWidth;\\nuniform lowp float u_halo;\\nconst float sdfFontScale = 1.0 / 24.0;\\nuniform highp float u_time;\\nvoid main()\\n{\\n  float modded = mod(a_opacityInfo, 128.0);\\n  float targetOpacity = (a_opacityInfo - modded) / 128.0;\\n  float startOpacity = modded / 127.0;\\n  float interpolatedOpacity = clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\\n  v_opacity = u_opacity * interpolatedOpacity;\\n  mediump float a_angle       = a_levelInfo[1];\\n  mediump float a_minLevel    = a_levelInfo[2];\\n  mediump float a_maxLevel    = a_levelInfo[3];\\n  mediump vec2 a_tex           = a_texAngleRange.xy;\\n  mediump float a_visMinAngle    = a_texAngleRange.z;\\n  mediump float a_visMaxAngle    = a_texAngleRange.w;\\n  mediump float delta_z = 0.0;\\n  mediump float angle = mod(a_angle + u_mapRotation, 256.0);\\n  if (a_visMinAngle < a_visMaxAngle)\\n  {\\n    delta_z += (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) + (1.0 - step(a_visMinAngle, angle)));\\n  }\\n  else\\n  {\\n    delta_z += (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) * (1.0 - step(a_visMinAngle, angle)));\\n  }\\n  delta_z += 1.0 - step(a_minLevel, u_level);\\n  delta_z += step(a_maxLevel, u_level);\\n  delta_z += step(v_opacity, 0.0);\\n  v_tex = a_tex.xy / u_mosaicSize;\\n#ifdef DD\\n  if (u_halo > 0.5)\\n  {\\n    v_color = u_color;\\n  }\\n  else\\n  {\\n    v_color = a_color * u_color;\\n  }\\n#else\\n  v_color = u_color;\\n#endif\\n#ifdef DD\\n  v_size = a_size * u_size;\\n#else\\n  v_size = u_size;\\n#endif\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n  v_edgeDistance = edgePos - u_edgeDistance / v_size;\\n  v_edgeWidth = (u_antialiasingWidth + u_edgeBlur) / v_size;\\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + sdfFontScale * u_displayViewMat3 * vec3(offsetPrecision * v_size * a_vertexOffset, 0.0) + u_displayMat3 * vec3(u_textTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth + delta_z, 1.0);\\n}\"},util:{\"encoding.glsl\":\"const vec4 rgba2float_factors = vec4(\\n    255.0 / (256.0),\\n    255.0 / (256.0 * 256.0),\\n    255.0 / (256.0 * 256.0 * 256.0),\\n    255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n  );\\nfloat rgba2float(vec4 rgba) {\\n  return dot(rgba, rgba2float_factors);\\n}\"}};const r=new o.a(function(e){let t=a;return e.split(\"/\").forEach(e=>{t&&(t=t[e])}),t});function l(e){return r.resolveIncludes(e)}const s=e=>Object(i.b)({ID:e.id,PATTERN:e.pattern}),c={name:\"background\",shaders:e=>({vertexShader:s(e)+l(\"background/background.vert\"),fragmentShader:s(e)+l(\"background/background.frag\")}),attributes:{a_pos:0}},u=e=>Object(i.b)({ID:e.id}),f={name:\"circle\",shaders:e=>({vertexShader:u(e)+l(\"circle/circle.vert\"),fragmentShader:u(e)+l(\"circle/circle.frag\")}),attributes:{a_pos:0,a_color:1,a_stroke_color:2,a_data:3}},d=e=>Object(i.b)({ID:e.id,DD:e.dd,PATTERN:e.pattern}),_={name:\"fill\",shaders:e=>({vertexShader:d(e)+l(\"fill/fill.vert\"),fragmentShader:d(e)+l(\"fill/fill.frag\")}),attributes:{a_pos:0,a_color:1}},m=e=>Object(i.b)({ID:e.id,DD:e.dd}),v={name:\"outline\",shaders:e=>({vertexShader:m(e)+l(\"outline/outline.vert\"),fragmentShader:m(e)+l(\"outline/outline.frag\")}),attributes:{a_pos:0,a_offset:1,a_xnormal:2,a_color:3}},p=e=>Object(i.b)({ID:e.id,DD:e.dd,SDF:e.sdf}),g={name:\"icon\",shaders:e=>({vertexShader:p(e)+l(\"icon/icon.vert\"),fragmentShader:p(e)+l(\"icon/icon.frag\")}),attributes:{a_pos:0,a_vertexOffset:1,a_texAngleRange:2,a_levelInfo:3,a_color:4,a_size:5,a_opacityInfo:6}},h=e=>Object(i.b)({ID:e.id,DD:e.dd,PATTERN:e.pattern}),x={name:\"line\",shaders:e=>({vertexShader:h(e)+l(\"line/line.vert\"),fragmentShader:h(e)+l(\"line/line.frag\")}),attributes:{a_pos:0,a_offsetAndNormal:1,a_accumulatedDistance:2,a_color:3,a_width:4}},b=e=>Object(i.b)({ID:e.id,DD:e.dd}),y={name:\"text\",shaders:e=>({vertexShader:b(e)+l(\"text/text.vert\"),fragmentShader:b(e)+l(\"text/text.frag\")}),attributes:{a_pos:0,a_vertexOffset:1,a_texAngleRange:2,a_levelInfo:3,a_color:4,a_size:5,a_opacityInfo:6}}},\"7F7D\":function(e,t,n){\"use strict\";n(\"wSAH\"),n(\"OKTS\"),n(\"n4uK\");var i=n(\"fOQB\"),o=n(\"D6bk\"),a=(n(\"0meK\"),n(\"1F90\")),r=(n(\"bfJE\"),n(\"XvKw\")),l=n(\"8HmA\"),s=n(\"IcFU\");t.a=class extends l.a{constructor(){super(...arguments),this._color=Object(r.b)(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e},t){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(7680,7680,7681),e.setStencilWriteMask(255),e.setStencilFunctionSeparate(1032,516,t.stencilRef,255)}draw(e,t){const{context:n}=e;this._initialized||this._initialize(n),n.bindVAO(this._solidVertexArrayObject),n.bindProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.dvs),this._solidProgram.setUniform2fv(\"u_coord_range\",t.coordRange),this._solidProgram.setUniform1f(\"u_depth\",0),this._solidProgram.setUniform4fv(\"u_color\",this._color),n.drawArrays(5,0,4),n.bindVAO()}_initialize(e){if(this._initialized)return!0;const t=Object(a.a)(e,s.a);if(!t)return!1;const n=new Int8Array([0,0,1,0,0,1,1,1]),r=i.a.createVertex(e,35044,n),l=new o.a(e,s.a.attributes,{geometry:[{name:\"a_pos\",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:r});return this._solidProgram=t,this._solidVertexArrayObject=l,this._initialized=!0,!0}}},\"8HmA\":function(e,t,n){\"use strict\";t.a=class{constructor(){this.name=this.constructor.name||\"UnnamedBrush\"}prepareState(e,t,n){}draw(e,t,n){}drawMany(e,t,n){for(const i of t)this.draw(e,i,n)}}},D6bk:function(e,t,n){\"use strict\";var i=n(\"hTmG\");let o=0;t.a=class{constructor(e,t,n,i,a){this._context=e,this._locations=t,this._layout=n,this._buffers=i,this._indexBuffer=a,this._glName=null,this.id=o++,this._initialized=!1,e.instanceCounter.increment(2,this)}get glName(){return this._glName}get vertexBuffers(){return this._buffers}get indexBuffer(){return this._indexBuffer}get size(){return Object.keys(this._buffers).reduce((e,t)=>e+this._buffers[t].size,this._indexBuffer?this._indexBuffer.size:0)}get layout(){return this._layout}get locations(){return this._locations}dispose(e=!0){if(!this._context)return;const t=this._context.capabilities.vao;if(t&&this._glName&&(t.deleteVertexArray(this._glName),this._glName=null),this._context.getBoundVAO()===this&&this._context.bindVAO(null),e){for(const e in this._buffers)this._buffers[e].dispose(),delete this._buffers[e];this._indexBuffer&&(this._indexBuffer.dispose(),this._indexBuffer=null)}this._context.instanceCounter.decrement(2,this),this._context=null}initialize(){if(this._initialized)return;const e=this._context.capabilities.vao;if(e){const t=e.createVertexArray();e.bindVertexArray(t),this._bindLayout(),e.bindVertexArray(null),this._glName=t}this._initialized=!0}bind(){this.initialize();const e=this._context.capabilities.vao;e?e.bindVertexArray(this.glName):(this._context.bindVAO(null),this._bindLayout())}_bindLayout(){const e=this._buffers,t=!!this._context.capabilities.vao,n=this._layout,o=this._indexBuffer;e||console.error(\"Vertex buffer dictionary is empty!\");const a=this._context.gl;for(const r in e){const t=e[r];t||console.error(\"Vertex buffer is uninitialized!\");const o=n[r];o||console.error(\"Vertex element descriptor is empty!\"),Object(i.a)(this._context,this._locations,t,o)}o&&(t?a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,o.glName):this._context.bindBuffer(o))}unbind(){this.initialize();const e=this._context.capabilities.vao;e?e.bindVertexArray(null):this._unbindLayout()}_unbindLayout(){const e=this._buffers,t=this._layout;e||console.error(\"Vertex buffer dictionary is empty!\");for(const o in e){const n=e[o];n||console.error(\"Vertex buffer is uninitialized!\");const a=t[o];Object(i.b)(this._context,this._locations,n,a)}const n=this._indexBuffer;n&&this._context.unbindBuffer(n.bufferType)}}},HQFP:function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return c}),n.d(t,\"b\",function(){return l}),n.d(t,\"c\",function(){return s}),n.d(t,\"d\",function(){return r});const i=128/Math.PI,o=1/Math.LN2;function a(e,t){return(e%=t)>=0?e:e+t}function r(e){return a(e*i,256)}function l(e){return a(.7111111111111111*e,256)}function s(e){return Math.log(e)*o}function c(e,t,n){return e>=t&&e<=n||e>=n&&e<=t}},IcFU:function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return o});var i=n(\"vpBa\");const o={name:\"background\",shaders:{vertexShader:Object(i.a)(\"background/background.vert\"),fragmentShader:Object(i.a)(\"background/background.frag\")},attributes:{a_pos:0}}},Oxob:function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return I});var i=n(\"jIHu\"),o=n(\"gjrC\"),a=n(\"8HmA\");const r={nearest:{defines:[],samplingMode:9728,mips:!1},bilinear:{defines:[],samplingMode:9729,mips:!1},bicubic:{defines:[\"bicubic\"],samplingMode:9729,mips:!1},trilinear:{defines:[],samplingMode:9987,mips:!0}};var l=n(\"1F90\"),s=n(\"XvKw\"),c=n(\"yN2G\"),u=n(\"IcFU\"),f=n(\"b3VY\"),d=n(\"7F7D\"),_=(n(\"wSAH\"),n(\"OKTS\"),n(\"jHF5\")),m=(n(\"n4uK\"),n(\"fOQB\")),v=n(\"D6bk\"),p=(n(\"0meK\"),n(\"bfJE\"),n(\"0RS7\")),g=n(\"yE7X\"),h=n(\"6ldq\"),x=n(\"srIe\");const b=[1,1,1,1],y=[1,1,1,1];var C=n(\"c46T\");Math;const S=[1,1,1,1];var T=n(\"2yHJ\"),D=n(\"HQFP\");const O=[1,1,1,1];var z=n(\"iA3P\"),A=n(\"of9L\"),w=n(\"GMaR\"),V=class extends a.a{prepareState({context:e},t,n){const i=n&&-1!==n.indexOf(\"id\");e.setBlendingEnabled(!i),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t,n){if(t.commitChanges(e),!t.visible)return;const i=this.getGeometryType(),o=t.getDisplayList(),a=t.getGeometry(i);a&&o&&(e.timeline.begin(this.name),e.attributeView.bindTextures(e.context),o.byType(i,i=>{this.drawGeometry(e,t,i,a,n)}),e.timeline.end(this.name))}_getVAO(e,t,n,i){return i.vao||(i.vao=new v.a(e,n,t,i.vertexBufferMap,i.indexBuffer)),i.vao}_setSharedUniforms(e,t,n){e.setUniform1f(\"u_pixelRatio\",t.pixelRatio),e.setUniformMatrix3fv(\"u_dvsMat3\",n.transforms.dvs),e.setUniformMatrix3fv(\"u_displayViewMat3\",t.state.displayViewMat3),e.setUniform1i(\"u_attributeTextureSize\",t.attributeView.size),e.setUniform1i(\"u_attributeData0\",i.s),e.setUniform1i(\"u_attributeData1\",i.t),e.setUniform1i(\"u_attributeData2\",i.u),e.setUniform1i(\"u_attributeData3\",i.v)}},P=n(\"vrr1\");const I={marker:class extends V{dispose(){}getGeometryType(){return g.d.MARKER}drawGeometry(e,t,n,i,o){const{context:a,painter:r,rendererInfo:l,state:s}=e,{indexCount:u,indexFrom:f,materialKey:d}=n,_=w.d.load(d),{bufferLayouts:m,attributes:v}=(e=>Object(c.f)(e.data,{geometry:[{location:0,name:\"a_pos\",count:2,type:5122},{location:1,name:\"a_vertexOffset\",count:2,type:5122},{location:2,name:\"a_texCoords\",count:2,type:5123},{location:3,name:\"a_bitSetAndDistRatio\",count:4,type:5121},{location:4,name:\"a_id\",count:4,type:5121},{location:5,name:\"a_color\",count:4,type:5121,normalized:!0},{location:6,name:\"a_outlineColor\",count:4,type:5121,normalized:!0},{location:7,name:\"a_sizeAndOutlineWidth\",count:4,type:5121}]}))(_),p=r.materialManager.getMaterialProgram(e,_,\"materials/icon\",v,o),g=this._getVAO(a,m,v,i);if(a.bindProgram(p),a.bindVAO(g),_.textureBinding&&r.textureManager.bindTextures(a,p,_,!0),this._setSharedUniforms(p,e,t),p.setUniformMatrix3fv(\"u_displayMat3\",_.vvRotation?s.displayViewMat3:s.displayMat3),_.vvSizeMinMaxValue&&p.setUniform4fv(\"u_vvSizeMinMaxValue\",l.vvSizeMinMaxValue),_.vvSizeScaleStops&&p.setUniform1f(\"u_vvSizeScaleStopsValue\",l.vvSizeScaleStopsValue),_.vvSizeFieldStops){const e=l.getSizeVVFieldStops(t.key.level);p.setUniform1fv(\"u_vvSizeFieldStopsValues\",e.values),p.setUniform1fv(\"u_vvSizeFieldStopsSizes\",e.sizes)}_.vvSizeUnitValue&&p.setUniform1f(\"u_vvSizeUnitValueWorldToPixelsRatio\",l.vvSizeUnitValueToPixelsRatio),_.vvColor&&(p.setUniform1fv(\"u_vvColorValues\",l.vvColorValues),p.setUniform4fv(\"u_vvColors\",l.vvColors)),_.vvOpacity&&(p.setUniform1fv(\"u_vvOpacityValues\",l.vvOpacityValues),p.setUniform1fv(\"u_vvOpacities\",l.vvOpacities)),_.vvRotation&&p.setUniform1f(\"u_vvRotationType\",\"geographic\"===l.vvMaterialParameters.vvRotationType?0:1),a.drawElements(4,u,5125,Uint32Array.BYTES_PER_ELEMENT*f),a.bindVAO(null)}},line:class extends V{dispose(){}getGeometryType(){return g.d.LINE}drawGeometry(e,t,n,i,o){const{context:a,painter:r,rendererInfo:l,requiredLevel:s}=e,{indexFrom:u,indexCount:f,materialKey:d}=n,_=w.c.load(d),{bufferLayouts:m,attributes:v}=(e=>Object(c.f)(e.data,{geometry:[{location:0,name:\"a_pos\",count:2,type:5122},{location:1,name:\"a_id\",count:4,type:5121},{location:2,name:\"a_color\",count:4,type:5121,normalized:!0},{location:3,name:\"a_offsetAndNormal\",count:4,type:5120},{location:4,name:\"a_accumulatedDistanceAndHalfWidth\",count:2,type:5123},{location:5,name:\"a_tlbr\",count:4,type:5123},{location:6,name:\"a_segmentDirection\",count:4,type:5120},{location:7,name:\"a_aux\",count:2,type:5123}]}))(_),p=r.materialManager.getMaterialProgram(e,_,\"materials/line\",v,o),g=this._getVAO(a,m,v,i),h=1/e.pixelRatio;a.bindProgram(p),a.bindVAO(g),this._setSharedUniforms(p,e,t),_.textureBinding&&r.textureManager.bindTextures(a,p,_);const x=Math.pow(2,s-t.key.level)/e.pixelRatio;if(p.setUniform1f(\"u_zoomFactor\",x),p.setUniform1f(\"u_blur\",0+h),p.setUniform1f(\"u_antialiasing\",h),_.vvSizeMinMaxValue&&p.setUniform4fv(\"u_vvSizeMinMaxValue\",l.vvSizeMinMaxValue),_.vvSizeScaleStops&&p.setUniform1f(\"u_vvSizeScaleStopsValue\",l.vvSizeScaleStopsValue),_.vvSizeFieldStops){const e=l.getSizeVVFieldStops(t.key.level);p.setUniform1fv(\"u_vvSizeFieldStopsValues\",e.values),p.setUniform1fv(\"u_vvSizeFieldStopsSizes\",e.sizes)}_.vvSizeUnitValue&&p.setUniform1f(\"u_vvSizeUnitValueWorldToPixelsRatio\",l.vvSizeUnitValueToPixelsRatio),_.vvColor&&(p.setUniform1fv(\"u_vvColorValues\",l.vvColorValues),p.setUniform4fv(\"u_vvColors\",l.vvColors)),_.vvOpacity&&(p.setUniform1fv(\"u_vvOpacityValues\",l.vvOpacityValues),p.setUniform1fv(\"u_vvOpacities\",l.vvOpacities)),a.setFaceCullingEnabled(!0),a.setFrontFace(2305),a.setCullFace(1029),a.drawElements(4,f,5125,Uint32Array.BYTES_PER_ELEMENT*u),a.setFaceCullingEnabled(!1),a.bindVAO(null)}},fill:class extends V{constructor(){super(...arguments),this._dotTextureSize=0,this._dotTextures=null,this._dotSamplers=new Int32Array([i.A,i.B])}dispose(){this._disposeTextures()}getGeometryType(){return g.d.FILL}drawGeometry(e,t,n,o,a){const{context:r,painter:l,rendererInfo:s,requiredLevel:u}=e,{indexCount:f,indexFrom:d,materialKey:_}=n,m=w.a.load(_),{bufferLayouts:v,attributes:p}=(e=>Object(c.f)(e.data,{geometry:[{location:0,name:\"a_pos\",count:2,type:5122},{location:1,name:\"a_id\",count:4,type:5121},...e.dotDensity?[]:[{location:2,name:\"a_color\",count:4,type:5121,normalized:!0},{location:3,name:\"a_tlbr\",count:4,type:5123},{location:4,name:\"a_aux1\",count:4,type:5121},{location:5,name:\"a_aux2\",count:2,type:5123},{location:6,name:\"a_aux3\",count:4,type:5121}],...e.dotDensity?[{location:2,name:\"a_inverseArea\",count:1,type:5126}]:[]]}))(m),g=l.materialManager.getMaterialProgram(e,m,\"materials/fill\",p,a),h=this._getVAO(r,v,p,o);if(r.bindProgram(g),r.bindVAO(h),this._setSharedUniforms(g,e,t),m.textureBinding){l.textureManager.bindTextures(r,g,m);const n=1/Math.pow(2,u-t.key.level)/e.pixelRatio;g.setUniform1f(\"u_zoomFactor\",n)}if(m.vvColor&&(g.setUniform1fv(\"u_vvColorValues\",s.vvColorValues),g.setUniform4fv(\"u_vvColors\",s.vvColors)),m.vvOpacity&&(g.setUniform1fv(\"u_vvOpacityValues\",s.vvOpacityValues),g.setUniform1fv(\"u_vvOpacities\",s.vvOpacities)),m.dotDensity){const n=i.F/s.ddDotSize,o=n*window.devicePixelRatio*n*window.devicePixelRatio,a=1/Math.pow(2,u-t.key.level),l=1/a*(1/a),c=s.ddDotScale?e.state.scale/s.ddDotScale:1;g.setUniform1f(\"u_tileZoomFactor\",a),g.setUniform1f(\"u_tileDotsOverArea\",o/(i.F*window.devicePixelRatio*i.F*window.devicePixelRatio)),g.setUniformMatrix4fv(\"u_dotColors\",s.ddColors),g.setUniform4fv(\"u_isActive\",s.ddActiveDots),g.setUniform4fv(\"u_dotBackgroundColor\",s.ddBackgroundColor),g.setUniform1f(\"u_dotValue\",Math.max(1,s.ddDotValue*c*l)),this._bindDotDensityTextures(r,g,s,n)}r.drawElements(4,f,5125,Uint32Array.BYTES_PER_ELEMENT*d),r.bindVAO(null)}_disposeTextures(){if(this._dotTextures){for(let e=0;e<this._dotTextures.length;e++)this._dotTextures[e].dispose();this._dotTextures=null}}_bindDotDensityTextures(e,t,n,i){const o=this._createDotDensityTextures(e,i,n.ddSeed);t.setUniform1iv(\"u_dotTextures\",this._dotSamplers);for(let a=0;a<o.length;a++)e.bindTexture(o[a],this._dotSamplers[a])}_createDotDensityTextures(e,t,n){if(this._dotTextureSize===t&&this._seed===n||(this._disposeTextures(),this._dotTextureSize=t,this._seed=n),null===this._dotTextures){const i=new z.a(n);this._dotTextures=[this._allocDotDensityTexture(e,t,i),this._allocDotDensityTexture(e,t,i)]}return this._dotTextures}_allocDotDensityTexture(e,t,n){const i=new Float32Array(t*t*4);for(let o=0;o<i.length;o++)i[o]=n.getFloat();return new A.a(e,{wrapMode:10497,pixelFormat:6408,dataType:5126,samplingMode:9728,width:t,height:t},i)}},text:class extends V{dispose(){}getGeometryType(){return g.d.TEXT}drawGeometry(e,t,n,i,o){const{context:a,painter:r,rendererInfo:l,state:s}=e,{indexCount:u,indexFrom:f,materialKey:d}=n,_=w.f.load(d),{bufferLayouts:m,attributes:v}=(e=>Object(c.f)(e.data,{geometry:[{location:0,name:\"a_pos\",count:2,type:5122},{location:1,name:\"a_id\",count:4,type:5121},{location:2,name:\"a_color\",count:4,type:5121,normalized:!0},{location:3,name:\"a_haloColor\",count:4,type:5121,normalized:!0},{location:4,name:\"a_texFontSize\",count:4,type:5121},{location:5,name:\"a_aux\",count:4,type:5120},{location:6,name:\"a_vertexOffset\",count:2,type:5122},{location:7,name:\"a_texCoords\",count:2,type:5123}]}))(_),p=r.materialManager.getMaterialProgram(e,_,\"materials/text\",v,o),g=this._getVAO(a,m,v,i);if(a.bindProgram(p),a.bindVAO(g),this._setSharedUniforms(p,e,t),r.textureManager.bindTextures(a,p,_),p.setUniformMatrix3fv(\"u_displayMat3\",s.displayMat3),p.setUniformMatrix3fv(\"u_displayViewMat3\",s.displayViewMat3),_.vvSizeMinMaxValue&&p.setUniform4fv(\"u_vvSizeMinMaxValue\",l.vvSizeMinMaxValue),_.vvSizeScaleStops&&p.setUniform1f(\"u_vvSizeScaleStopsValue\",l.vvSizeScaleStopsValue),_.vvSizeFieldStops){const e=l.getSizeVVFieldStops(t.key.level);p.setUniform1fv(\"u_vvSizeFieldStopsValues\",e.values),p.setUniform1fv(\"u_vvSizeFieldStopsSizes\",e.sizes)}_.vvSizeUnitValue&&p.setUniform1f(\"u_vvSizeUnitValueWorldToPixelsRatio\",l.vvSizeUnitValueToPixelsRatio),_.vvColor&&(p.setUniform1fv(\"u_vvColorValues\",l.vvColorValues),p.setUniform4fv(\"u_vvColors\",l.vvColors)),_.vvOpacity&&(p.setUniform1fv(\"u_vvOpacityValues\",l.vvOpacityValues),p.setUniform1fv(\"u_vvOpacities\",l.vvOpacities)),_.vvRotation&&p.setUniform1f(\"u_vvRotationType\",\"geographic\"===l.vvMaterialParameters.vvRotationType?0:1),p.setUniform1f(\"u_isHalo\",1),a.drawElements(4,u,5125,Uint32Array.BYTES_PER_ELEMENT*f),p.setUniform1f(\"u_isHalo\",0),a.drawElements(4,u,5125,Uint32Array.BYTES_PER_ELEMENT*f),a.bindVAO(null)}},label:class extends V{dispose(){}getGeometryType(){return g.d.LABEL}drawGeometry(e,t,n,i,o){const{context:a,painter:r,state:l,rendererInfo:s}=e,{indexCount:u,indexFrom:f,materialKey:d}=n,_=w.b.load(d),m=_.mapAligned?1:0;if(!m&&Math.abs(t.key.level-Math.round(100*e.displayLevel)/100)>=1)return;const{bufferLayouts:v,attributes:p}=(e=>Object(c.f)(e.data,{geometry:[{location:0,name:\"a_pos\",count:2,type:5122},{location:1,name:\"a_id\",count:4,type:5121},{location:2,name:\"a_color\",count:4,type:5121,normalized:!0},{location:3,name:\"a_haloColor\",count:4,type:5121,normalized:!0},{location:4,name:\"a_texAndSize\",count:4,type:5121},{location:5,name:\"a_refSymbolAndPlacementOffset\",count:4,type:5121},{location:6,name:\"a_glyphData\",count:4,type:5121},{location:7,name:\"a_vertexOffset\",count:2,type:5122},{location:8,name:\"a_texCoords\",count:2,type:5123}]}))(_),g=r.materialManager.getMaterialProgram(e,_,\"materials/label\",p,o),h=this._getVAO(a,v,p,i);e.context.setStencilFunction(514,0,255),a.bindProgram(g),a.bindVAO(h),this._setSharedUniforms(g,e,t),r.textureManager.bindTextures(a,g,_);const x=1===m?l.displayViewMat3:l.displayMat3;if(_.vvSizeMinMaxValue&&g.setUniform4fv(\"u_vvSizeMinMaxValue\",s.vvSizeMinMaxValue),_.vvSizeScaleStops&&g.setUniform1f(\"u_vvSizeScaleStopsValue\",s.vvSizeScaleStopsValue),_.vvSizeFieldStops){const e=s.getSizeVVFieldStops(t.key.level);g.setUniform1fv(\"u_vvSizeFieldStopsValues\",e.values),g.setUniform1fv(\"u_vvSizeFieldStopsSizes\",e.sizes)}_.vvSizeUnitValue&&g.setUniform1f(\"u_vvSizeUnitValueWorldToPixelsRatio\",s.vvSizeUnitValueToPixelsRatio),g.setUniform1f(\"u_mapRotation\",Math.floor(l.rotation/360*254)),g.setUniform1f(\"u_mapAligned\",m),g.setUniformMatrix3fv(\"u_displayMat3\",x),g.setUniform1f(\"u_opacity\",1),g.setUniform1f(\"u_zoomLevel\",Math.round(10*e.displayLevel)),g.setUniform2fv(\"u_screenSize\",e.state.size),g.setUniform1f(\"u_isHalo\",1),a.drawElements(4,u,5125,Uint32Array.BYTES_PER_ELEMENT*f),g.setUniform1f(\"u_isHalo\",0),a.drawElements(4,u,5125,Uint32Array.BYTES_PER_ELEMENT*f),a.bindVAO(null),a.setStencilTestEnabled(!0),a.setBlendingEnabled(!0)}},clip:class extends a.a{constructor(){super(...arguments),this._color=Object(s.b)(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:e}){e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setFaceCullingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(7680,7680,7681),e.setStencilWriteMask(255),e.setStencilFunction(519,0,255)}draw(e,t){const{context:n,state:i}=e;this._program||(this._program=Object(l.a)(n,u.a));const o=this._program,a=Object(c.f)(\"clip\",{geometry:[{location:0,name:\"a_pos\",count:2,type:5122}]}),r=t.getVAO(n,i,a.attributes,a.bufferLayouts);n.bindProgram(this._program),o.setUniform2fv(\"u_coord_range\",[1,1]),o.setUniform4fv(\"u_color\",this._color),o.setUniformMatrix3fv(\"u_dvsMat3\",i.displayMat3),n.bindVAO(r),n.drawElements(4,r.indexBuffer.size,5125,0),n.bindVAO()}},stencil:d.a,bitmap:class extends a.a{constructor(){super(...arguments),this._desc={vsPath:\"raster/bitmap\",fsPath:\"raster/bitmap\",attributes:{a_position:0,a_texcoord:1}}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},t){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t){const{context:n,renderingOptions:a,painter:l}=e;if(!t.source)return;e.timeline.begin(this.name),this._quad||(this._quad=new o.a(n,[0,0,1,0,0,1,1,1]));const s=((e,t,n)=>{if(\"dynamic\"===n.samplingMode){const{state:n}=e,i=t.resolution/t.pixelRatio/n.resolution,o=Math.round(e.pixelRatio)!==e.pixelRatio,a=i>1.05||i<.95;return n.rotation||a||o||t.isSourceScaled||t.rotation?r.bilinear:r.nearest}return r[n.samplingMode]})(e,t,a),c=l.materialManager.getProgram(e,this._desc,s.defines),{coordScale:u,computedOpacity:f,transforms:d}=t;t.setSamplingProfile(s),t.bind(e,i.w),n.bindProgram(c),c.setUniformMatrix3fv(\"u_dvsMat3\",d.dvs),c.setUniform1i(\"u_texture\",i.w),c.setUniform2fv(\"u_coordScale\",u),c.setUniform1f(\"u_opacity\",f),this._quad.draw(),e.timeline.end(this.name)}},raster:class extends a.a{constructor(){super(...arguments),this._desc={lut:{vsPath:\"raster/lut\",fsPath:\"raster/lut\",attributes:{a_position:0,a_texcoord:1}},stretch:{vsPath:\"raster/stretch\",fsPath:\"raster/stretch\",attributes:{a_position:0,a_texcoord:1}},hillshade:{vsPath:\"raster/hillshade\",fsPath:\"raster/hillshade\",attributes:{a_position:0,a_texcoord:1}}},this._rendererUniformInfos=new Map}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},t){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t){var n;if(!t.source)return;if(t.suspended)return;e.timeline.begin(this.name);const i=!(null!=(n=e.context.capabilities.textureFloat)&&n.textureFloatLinear);t.updateTexture(e);const o=this.getShaderVariations(t,i),a=e.painter.materialManager.getProgram(e,this._desc[t.symbolizerParameters.type],o);this.drawWithProgram(e.context,a,t),e.timeline.end(this.name)}drawWithProgram(e,t,n,i=1,a=[0,0],r=!1){this._quad||(this._quad=new o.a(e,[0,0,1,0,0,1,1,1]));const{symbolizerParameters:l,transformGrid:s,width:c,height:u,opacity:f}=n,d=l.type;e.bindProgram(t);const _=this.getShaderVariations(n),m=this.getUniformInfos(d,e,t,_),{names:v,textures:p}=n.getTextures();Object(P.j)(e,t,v,p);const g=Object(P.d)(i,a),h=Object(P.f)(s,[c,u],[n.source.width,n.source.height],f,r);if(Object(P.k)(t,m,{u_coordScale:n.coordScale,u_dvsMat3:n.transforms.dvs,...g,...h}),l.colormap){const{colormap:e,colormapOffset:n}=l,i=Object(P.e)(e,n);Object(P.k)(t,m,i)}if(\"stretch\"===l.type){const e=Object(P.h)(l);Object(P.k)(t,m,e)}else if(\"hillshade\"===l.type){const e=Object(P.g)(l);Object(P.k)(t,m,e)}this._quad.draw()}getUniformInfos(e,t,n,i){const o=i.length>0?e+\"-\"+i.join(\"-\"):e;if(this._rendererUniformInfos.has(o))return this._rendererUniformInfos.get(o);const a=Object(P.i)(t,n);return this._rendererUniformInfos.set(o,a),a}getShaderVariations(e,t=!1){const n=[];return\"cubic\"===e.interpolation?n.push(\"bicubic\"):t&&\"bilinear\"===e.interpolation&&n.push(\"bilinear\"),e.isRendereredSource?n.push(\"noop\"):e.symbolizerParameters.colormap&&n.push(\"applyColormap\"),e.transformGrid&&n.push(\"applyProjection\"),n}},tileInfo:f.a,vtlBackground:class extends a.a{constructor(){super(...arguments),this._color=Object(s.b)(1,0,0,1),this._patternMatrix=Object(_.b)(),this._programOptions={id:!1,pattern:!1}}dispose(){this._program&&(this._program.dispose(),this._program=null),this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(e,t){const{context:n,styleLayerUID:o}=e;this._loadWGLResources(n);const a=e.displayLevel,r=e.styleLayer,l=e.painter.getVectorTileProgramCache(),s=r.getPaintValue(\"background-color\",a),c=r.getPaintValue(\"background-opacity\",a),u=r.getPaintValue(\"background-pattern\",a),f=void 0!==u,d=s[3]*c,_=1|window.devicePixelRatio,m=e.spriteMosaic;let v;const h=_>i.G?2:1,x=e.drawPhase===g.c.HITTEST,b=(x?1:0)<<1|(f?1:0),y=this._programOptions;y.id=x,y.pattern=f;const C=l.getProgram(0,b,y);if(n.bindVAO(this._vao),n.bindProgram(C),f){if(v=m.getMosaicItemPosition(u,!0),!v)return;C.setUniform1f(\"u_opacity\",c),C.setUniform2f(\"u_pattern_tl\",v.tl[0],v.tl[1]),C.setUniform2f(\"u_pattern_br\",v.br[0],v.br[1]),C.setUniform1i(\"u_texture\",i.I),m.bind(n,9729,v.page,i.I)}else this._color[0]=d*s[0],this._color[1]=d*s[1],this._color[2]=d*s[2],this._color[3]=d,C.setUniform4fv(\"u_color\",this._color);if(C.setUniform1f(\"u_depth\",r.z||0),x){const e=Object(p.c)(o+1);C.setUniform4fv(\"u_id\",e)}for(const i of t){if(C.setUniform1f(\"u_coord_range\",i.coordRange[0]),C.setUniformMatrix3fv(\"u_dvsMat3\",i.transforms.dvs),f){const e=Math.max(Math.pow(2,Math.round(a)-i.key.level),1),t=h*i.size[0]*e,n=t/v.size[1];this._patternMatrix[0]=t/v.size[0],this._patternMatrix[4]=n,C.setUniformMatrix3fv(\"u_pattern_matrix\",this._patternMatrix)}n.setStencilFunction(514,i.stencilRef,255),n.drawArrays(5,0,4)}}_loadWGLResources(e){if(this._program&&this._vao)return;const t=Object(l.a)(e,h.a);if(!t)return;const n=new Int8Array([0,0,1,0,0,1,1,1]),i=m.a.createVertex(e,35044,n),o=new v.a(e,h.a.attributes,{geometry:[{name:\"a_pos\",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:i});this._program=t,this._vao=o}},vtlFill:class extends a.a{constructor(){super(...arguments),this._color=Object(s.a)(),this._outlineColor=Object(s.a)(),this._fillProgramOptions={id:!1,dd:!1,pattern:!1},this._outlineProgramOptions={id:!1,dd:!1},this._patternMatrix=Object(_.b)()}dispose(){}drawMany(e,t){const{displayLevel:n,drawPhase:i,renderPass:o,styleLayerUID:a}=e,r=e.styleLayer,l=r.getPaintValue(\"fill-pattern\",n),s=r.hasDataDrivenColor?y:r.getPaintValue(\"fill-color\",n),c=r.hasDataDrivenOpacity?1:r.getPaintValue(\"fill-opacity\",n),u=c*s[3],f=void 0!==l||u<1||r.hasDataDrivenFill;if(f&&\"opaque\"===o)return;let d;this._color[0]=u*s[0],this._color[1]=u*s[1],this._color[2]=u*s[2],this._color[3]=u,i===g.c.HITTEST&&(d=Object(p.c)(a+1));const _=r.getPaintValue(\"fill-translate\",n),m=r.getPaintValue(\"fill-translate-anchor\",n);this._drawFill(e,a,r,t,_,m,l,f,d),this._drawOutline(e,a,r,t,_,m,l,d,c)}_drawFill(e,t,n,o,a,r,l,s,c){const{context:u,displayLevel:f,drawPhase:d,pixelRatio:_,renderPass:m,spriteMosaic:v,state:p}=e;if(!s&&\"translucent\"===m)return;const h=void 0!==l,b=_>i.G?2:1,y=n.hasDataDrivenFill,C=e.painter.getVectorTileProgramCache();let S;const T=d===g.c.HITTEST,D=(T?1:0)<<2|(y?1:0)<<1|(h?1:0),O=this._fillProgramOptions;O.id=T,O.dd=y,O.pattern=h;const z=C.getProgram(1,D,O);if(u.bindProgram(z),h){if(S=v.getMosaicItemPosition(l,!0),!S)return void u.bindProgram();z.setUniform2f(\"u_pattern_tl\",S.tl[0],S.tl[1]),z.setUniform2f(\"u_pattern_br\",S.br[0],S.br[1]),z.setUniform1i(\"u_texture\",i.I),v.bind(u,9729,S.page,i.I)}z.setUniformMatrix3fv(\"u_displayMat3\",1===r?p.displayMat3:p.displayViewMat3),z.setUniform2fv(\"u_fillTranslation\",a),z.setUniform1f(\"u_depth\",n.z+152587890625e-16),z.setUniform4fv(\"u_color\",this._color),T&&z.setUniform4fv(\"u_id\",c);for(const i of o){if(!i.layerData.has(t))continue;const e=i.layerData.get(t);e.prepareForRendering(u,C);const n=e.fillVertexArrayObject;if(!Object(x.g)(n)){if(u.bindVAO(n),z.setUniformMatrix3fv(\"u_dvsMat3\",i.transforms.dvs),h){const e=Math.max(Math.pow(2,Math.round(f)-i.key.level),1),t=i.coordRange[0]/(b*i.size[0]*e),n=1/(S.size[1]*t);this._patternMatrix[0]=1/(S.size[0]*t),this._patternMatrix[4]=n,z.setUniformMatrix3fv(\"u_pattern_matrix\",this._patternMatrix)}u.setStencilFunction(514,i.stencilRef,255),u.drawElements(4,e.fillIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.fillIndexStart),i.triangleCount+=e.fillIndexCount/3}}}_drawOutline(e,t,n,i,o,a,r,l,s){const{context:c,displayLevel:u,drawPhase:f,renderPass:d,pixelRatio:_,state:m}=e;if(\"opaque\"===d)return;const v=void 0!==r;if(!(n.getPaintValue(\"fill-antialias\",u)&&!v||n.hasDataDrivenOutlineColor))return;const p=e.painter.getVectorTileProgramCache(),h=n.hasDataDrivenOutline;if(n.outlineUsesFillColor){if(1!==this._color[3])return;this._outlineColor[0]=this._color[0],this._outlineColor[1]=this._color[1],this._outlineColor[2]=this._color[2],this._outlineColor[3]=this._color[3]}else{const e=n.hasDataDrivenOutlineColor?y:n.getPaintValue(\"fill-outline-color\",u),t=s*e[3];this._outlineColor[0]=t*e[0],this._outlineColor[1]=t*e[1],this._outlineColor[2]=t*e[2],this._outlineColor[3]=t}const b=.75/_,C=f===g.c.HITTEST,S=(C?1:0)<<1|(h?1:0),T=this._outlineProgramOptions;T.id=C,T.dd=h;const D=p.getProgram(2,S,T);c.bindProgram(D),D.setUniformMatrix3fv(\"u_displayMat3\",1===a?m.displayMat3:m.displayViewMat3),D.setUniform2fv(\"u_fillTranslation\",o),D.setUniform1f(\"u_depth\",n.z+152587890625e-16),D.setUniform1f(\"u_outline_width\",b),D.setUniform4fv(\"u_color\",this._outlineColor),C&&D.setUniform4fv(\"u_id\",l);for(const g of i){if(!g.layerData.has(t))continue;const e=g.layerData.get(t);e.prepareForRendering(c,p);const n=e.outlineVertexArrayObject;Object(x.g)(n)||(c.bindVAO(n),D.setUniformMatrix3fv(\"u_dvsMat3\",g.transforms.dvs),c.setStencilFunction(514,g.stencilRef,255),c.drawElements(4,e.outlineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.outlineIndexStart),g.triangleCount+=e.outlineIndexCount/3)}}},vtlLine:class extends a.a{constructor(){super(...arguments),this._color=Object(s.a)(),this._dashArray=Object(C.a)(),this._programOptions={id:!1,dd:!1,pattern:!1}}dispose(){}drawMany(e,t){const{context:n,displayLevel:o,state:a,drawPhase:r,styleLayerUID:l}=e,s=e.styleLayer,c=e.painter.getVectorTileProgramCache(),u=s.getPaintValue(\"line-translate\",o),f=s.getPaintValue(\"line-translate-anchor\",o),d=s.getPaintValue(\"line-pattern\",o),_=void 0!==d,m=1/e.pixelRatio,v=s.getPaintValue(\"line-blur\",o),h=s.hasDataDrivenColor?S:s.getPaintValue(\"line-color\",o),b=s.hasDataDrivenOpacity?1:s.getPaintValue(\"line-opacity\",o),y=s.hasDataDrivenWidth?1:s.getPaintValue(\"line-width\",o),C=b*h[3];this._color[0]=C*h[0],this._color[1]=C*h[1],this._color[2]=C*h[2],this._color[3]=C;const T=s.hasDataDrivenLine,D=r===g.c.HITTEST;let O;D&&(O=Object(p.c)(l+1));const z=(D?1:0)<<2|(T?1:0)<<1|(_?1:0),A=this._programOptions;A.id=D,A.dd=T,A.pattern=_;const w=c.getProgram(3,z,A);if(n.bindProgram(w),w.setUniformMatrix3fv(\"u_displayViewMat3\",a.displayViewMat3),w.setUniformMatrix3fv(\"u_displayMat3\",1===f?a.displayMat3:a.displayViewMat3),w.setUniform2fv(\"u_lineTranslation\",u),w.setUniform1f(\"u_depth\",s.z),w.setUniform1f(\"u_blur\",v),w.setUniform1f(\"u_antialiasing\",m),w.setUniform4fv(\"u_color\",this._color),w.setUniform1f(\"u_width\",y),D&&w.setUniform4fv(\"u_id\",O),_){const t=e.spriteMosaic,o=t.getMosaicItemPosition(d,!0);o&&(t.bind(n,9729,o.page,i.I),w.setUniform2f(\"u_pattern_tl\",o.tl[0],o.br[1]),w.setUniform2f(\"u_pattern_br\",o.br[0],o.tl[1]),w.setUniform2f(\"u_spriteSize\",8*o.size[0],o.size[1]),w.setUniform1i(\"u_texture\",i.I))}else{let e=s.getPaintValue(\"line-dasharray\",o);e.length<2&&(e=[1,-1]);const t=8;this._dashArray[0]=t*e[0],this._dashArray[1]=t*e[1],w.setUniform2fv(\"u_dasharray\",this._dashArray)}for(const i of t){if(!i.layerData.has(l))continue;const e=i.layerData.get(l);e.prepareForRendering(n,c);const t=e.lineVertexArrayObject;Object(x.g)(t)||(n.bindVAO(t),w.setUniformMatrix3fv(\"u_dvsMat3\",i.transforms.dvs),n.setStencilFunction(514,i.stencilRef,255),n.drawElements(4,e.lineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.lineIndexStart),i.triangleCount+=e.lineIndexCount/3)}}},vtlCircle:class extends a.a{constructor(){super(...arguments),this._color=Object(s.a)(),this._strokeColor=Object(s.a)(),this._programOptions={id:!1}}dispose(){}drawMany(e,t){const{context:n,state:i,drawPhase:o,styleLayerUID:a}=e,r=e.displayLevel,l=e.styleLayer,s=e.painter.getVectorTileProgramCache(),c=l.hasDataDrivenRadius?1:l.getPaintValue(\"circle-radius\",r),u=l.hasDataDrivenColor?b:l.getPaintValue(\"circle-color\",r),f=l.hasDataDrivenOpacity?1:l.getPaintValue(\"circle-opacity\",r),d=l.hasDataDrivenStrokeWidth?1:l.getPaintValue(\"circle-stroke-width\",r),_=l.hasDataDrivenStrokeColor?b:l.getPaintValue(\"circle-stroke-color\",r),m=l.hasDataDrivenStrokeOpacity?1:l.getPaintValue(\"circle-stroke-opacity\",r),v=l.hasDataDrivenBlur?0:l.getPaintValue(\"circle-blur\",r);let h=f*u[3];this._color[0]=h*u[0],this._color[1]=h*u[1],this._color[2]=h*u[2],this._color[3]=h,h=m*_[3],this._strokeColor[0]=h*_[0],this._strokeColor[1]=h*_[1],this._strokeColor[2]=h*_[2],this._strokeColor[3]=h;const y=l.getPaintValue(\"circle-translate\",r),C=l.getPaintValue(\"circle-translate-anchor\",r),S=o===g.c.HITTEST,T=S?1:0,D=this._programOptions;D.id=S;const O=s.getProgram(5,T,D);if(n.bindProgram(O),O.setUniformMatrix3fv(\"u_displayMat3\",1===C?i.displayMat3:i.displayViewMat3),O.setUniform2fv(\"u_circleTranslation\",y),O.setUniform1f(\"u_depth\",l.z),O.setUniform1f(\"u_radius\",c),O.setUniform4fv(\"u_color\",this._color),O.setUniform1f(\"u_blur\",v),O.setUniform1f(\"u_stroke_width\",d),O.setUniform4fv(\"u_stroke_color\",this._strokeColor),O.setUniform1f(\"u_antialiasingWidth\",1.2),S){const e=Object(p.c)(a+1);O.setUniform4fv(\"u_id\",e)}for(const p of t){if(!p.layerData.has(a))continue;const e=p.layerData.get(a);e.prepareForRendering(n,s);const t=e.circleVertexArrayObject;Object(x.g)(t)||(n.bindVAO(t),O.setUniformMatrix3fv(\"u_dvsMat3\",p.transforms.dvs),n.setStencilFunction(514,p.stencilRef,255),n.drawElements(4,e.circleIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.circleIndexStart),p.triangleCount+=e.circleIndexCount/3)}}},vtlSymbol:class extends a.a{constructor(){super(...arguments),this._iconProgramOptions={id:!1,dd:!1,sdf:!1},this._sdfProgramOptions={id:!1,dd:!1},this._spritesTextureSize=Object(C.a)(),this._haloColor=Object(s.a)(),this._sdfColor=Object(s.a)(),this._color=Object(s.a)()}dispose(){}drawMany(e,t){const{drawPhase:n,styleLayerUID:i}=e,o=e.styleLayer;let a;n===g.c.HITTEST&&(a=Object(p.c)(i+1)),this._drawIcons(e,o,t,a),this._drawText(e,o,t,a)}_drawIcons(e,t,n,o){const{context:a,displayLevel:r,drawPhase:l,painter:s,state:c,styleLayerUID:u}=e;let f,d=!1;for(const i of n)if(i.layerData.has(u)&&(f=i.layerData.get(u),f.iconPerPageElementsMap.size>0)){d=!0;break}if(!d)return;const _=t.hasDataDrivenIconSize?1:t.getLayoutValue(\"icon-size\",r),m=t.hasDataDrivenIconColor?O:t.getPaintValue(\"icon-color\",r),v=t.hasDataDrivenIconOpacity?1:t.getPaintValue(\"icon-opacity\",r),p=t.getPaintValue(\"icon-translate\",r),h=t.getPaintValue(\"icon-translate-anchor\",r),b=s.getVectorTileProgramCache(),y=m[3]*v;this._color[0]=y*m[0],this._color[1]=y*m[1],this._color[2]=y*m[2],this._color[3]=y;let C=t.getLayoutValue(\"icon-rotation-alignment\",r);2===C&&(C=0===t.getLayoutValue(\"symbol-placement\",r)?1:0);const S=0===C,z=t.getLayoutValue(\"icon-keep-upright\",r)&&S,A=f.isIconSDF,w=t.hasDataDrivenIcon,V=l===g.c.HITTEST,P=(V?1:0)<<2|(w?1:0)<<1|(A?1:0),I=this._iconProgramOptions;I.id=V,I.dd=w,I.sdf=A;const M=b.getProgram(4,P,I);if(a.bindProgram(M),A){const e=t.getPaintValue(\"icon-halo-color\",r),n=t.getPaintValue(\"icon-halo-width\",r);M.setUniform4f(\"u_outlineColor\",e[0],e[1],e[2],e[3]),M.setUniform1f(\"u_outlineSize\",n)}M.setUniformMatrix3fv(\"u_displayViewMat3\",0===C?c.displayViewMat3:c.displayMat3),M.setUniformMatrix3fv(\"u_displayMat3\",1===h?c.displayMat3:c.displayViewMat3),M.setUniform2fv(\"u_iconTranslation\",p),M.setUniform1f(\"u_depth\",t.z),M.setUniform1f(\"u_mapRotation\",Object(D.b)(c.rotation)),M.setUniform1f(\"u_keepUpright\",z?1:0),M.setUniform1f(\"u_level\",10*r),M.setUniform1i(\"u_texture\",i.I),M.setUniform1f(\"u_size\",_),M.setUniform4fv(\"u_color\",this._color),M.setUniform1f(\"u_opacity\",1),M.setUniform1f(\"u_fadeDuration\",T.d/1e3),V&&M.setUniform4fv(\"u_id\",o);for(const i of n){if(!i.layerData.has(u))continue;if(f=i.layerData.get(u),0===f.iconPerPageElementsMap.size)continue;f.prepareForRendering(a,b),f.updateOpacityInfo();const t=f.iconVertexArrayObject;if(!Object(x.g)(t)){a.bindVAO(t),M.setUniformMatrix3fv(\"u_dvsMat3\",i.transforms.dvs),M.setUniform1f(\"u_time\",(performance.now()-f.lastOpacityUpdate)/1e3);for(const[t,n]of f.iconPerPageElementsMap)this._renderIconRange(e,M,n,t,i)}}}_renderIconRange(e,t,n,o,a){const{context:r,spriteMosaic:l}=e;this._spritesTextureSize[0]=l.getWidth(o)/4,this._spritesTextureSize[1]=l.getHeight(o)/4,t.setUniform2fv(\"u_mosaicSize\",this._spritesTextureSize),l.bind(r,9729,o,i.I),r.setStencilTestEnabled(!0),r.setStencilFunction(516,255,255),r.setStencilWriteMask(0),r.drawElements(4,n[1],5125,Uint32Array.BYTES_PER_ELEMENT*n[0]),a.triangleCount+=n[1]/3}_drawText(e,t,n,o){const{context:a,displayLevel:r,drawPhase:l,glyphMosaic:s,painter:c,pixelRatio:u,state:f,styleLayerUID:d}=e;let _,m=!1;for(const i of n)if(i.layerData.has(d)&&(_=i.layerData.get(d),_.glyphPerPageElementsMap.size>0)){m=!0;break}if(!m)return;let v=t.getLayoutValue(\"text-rotation-alignment\",r);2===v&&(v=0===t.getLayoutValue(\"symbol-placement\",r)?1:0);const p=0===v,h=t.getLayoutValue(\"text-keep-upright\",r)&&p,b=l===g.c.HITTEST,y=.8*3/u,S=t.hasDataDrivenTextSize?1:t.getLayoutValue(\"text-size\",r),z=t.hasDataDrivenTextColor?O:t.getPaintValue(\"text-color\",r),A=t.hasDataDrivenTextOpacity?1:t.getPaintValue(\"text-opacity\",r),w=t.getPaintValue(\"text-halo-color\",r),V=t.getPaintValue(\"text-halo-width\",r),P=3*t.getPaintValue(\"text-halo-blur\",r),I=3*V,M=c.getVectorTileProgramCache(),U=z[3]*A;this._sdfColor[0]=U*z[0],this._sdfColor[1]=U*z[1],this._sdfColor[2]=U*z[2],this._sdfColor[3]=U;const E=w[3]*A;this._haloColor[0]=E*w[0],this._haloColor[1]=E*w[1],this._haloColor[2]=E*w[2],this._haloColor[3]=E,this._glyphTextureSize||(this._glyphTextureSize=Object(C.b)(s.width/4,s.height/4));const F=t.getPaintValue(\"text-translate\",r),L=t.getPaintValue(\"text-translate-anchor\",r),R=t.hasDataDrivenText,N=(b?1:0)<<1|(R?1:0),B=this._sdfProgramOptions;B.id=b,B.dd=R;const k=M.getProgram(6,N,B);a.bindProgram(k),k.setUniformMatrix3fv(\"u_displayViewMat3\",0===v?f.displayViewMat3:f.displayMat3),k.setUniformMatrix3fv(\"u_displayMat3\",1===L?f.displayMat3:f.displayViewMat3),k.setUniform2fv(\"u_textTranslation\",F),k.setUniform1f(\"u_depth\",t.z+152587890625e-16),k.setUniform2fv(\"u_mosaicSize\",this._glyphTextureSize),k.setUniform1f(\"u_mapRotation\",Object(D.b)(f.rotation)),k.setUniform1f(\"u_keepUpright\",h?1:0),k.setUniform1f(\"u_level\",10*r),k.setUniform1i(\"u_texture\",i.H),k.setUniform1f(\"u_size\",S),k.setUniform1f(\"u_antialiasingWidth\",y),k.setUniform1f(\"u_opacity\",1),k.setUniform1f(\"u_fadeDuration\",T.d/1e3),b&&k.setUniform4fv(\"u_id\",o);for(const i of n){if(!i.layerData.has(d))continue;if(_=i.layerData.get(d),0===_.glyphPerPageElementsMap.size)continue;_.prepareForRendering(a,M),_.updateOpacityInfo();const e=_.textVertexArrayObject;if(Object(x.g)(e))continue;a.bindVAO(e),k.setUniformMatrix3fv(\"u_dvsMat3\",i.transforms.dvs),a.setStencilTestEnabled(!0),a.setStencilFunction(516,255,255),a.setStencilWriteMask(0);const t=(performance.now()-_.lastOpacityUpdate)/1e3;k.setUniform1f(\"u_time\",t),_.glyphPerPageElementsMap.forEach((e,t)=>{this._renderGlyphRange(a,e,t,s,k,w[3],V,P,I,i)})}}_renderGlyphRange(e,t,n,o,a,r,l,s,c,u){o.bind(e,9729,n,i.H),r>0&&l>0&&(a.setUniform4fv(\"u_color\",this._haloColor),a.setUniform1f(\"u_halo\",1),a.setUniform1f(\"u_edgeDistance\",c),a.setUniform1f(\"u_edgeBlur\",s),e.drawElements(4,t[1],5125,Uint32Array.BYTES_PER_ELEMENT*t[0]),u.triangleCount+=t[1]/3),this._sdfColor[3]>0&&(a.setUniform4fv(\"u_color\",this._sdfColor),a.setUniform1f(\"u_halo\",0),a.setUniform1f(\"u_edgeDistance\",0),a.setUniform1f(\"u_edgeBlur\",0),e.drawElements(4,t[1],5125,Uint32Array.BYTES_PER_ELEMENT*t[0]),u.triangleCount+=t[1]/3)}}}},SfCL:function(e,t,n){\"use strict\";t.a=class{constructor(e){this.readFile=e}resolveIncludes(e){return this.resolve(e)}resolve(e,t=new Map){if(t.has(e))return t.get(e);const n=this.read(e);if(!n)throw new Error(\"cannot find shader file \"+e);const i=/^[^\\S\\n]*#include\\s+<(\\S+)>[^\\S\\n]?/gm;let o=i.exec(n);const a=[];for(;null!=o;)a.push({path:o[1],start:o.index,length:o[0].length}),o=i.exec(n);let r=0,l=\"\";return a.forEach(e=>{l+=n.slice(r,e.start),l+=t.has(e.path)?\"\":this.resolve(e.path,t),r=e.start+e.length}),l+=n.slice(r),t.set(e,l),l}read(e){return this.readFile(e)}}},XvKw:function(e,t,n){\"use strict\";function i(){return new Float32Array(4)}function o(e,t,n,i){const o=new Float32Array(4);return o[0]=e,o[1]=t,o[2]=n,o[3]=i,o}function a(){return i()}function r(){return o(1,1,1,1)}function l(){return o(1,0,0,0)}function s(){return o(0,1,0,0)}function c(){return o(0,0,1,0)}function u(){return o(0,0,0,1)}n.d(t,\"a\",function(){return i}),n.d(t,\"b\",function(){return o});const f=a(),d=r(),_=l(),m=s(),v=c(),p=u();Object.freeze({__proto__:null,create:i,clone:function(e){const t=new Float32Array(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},fromValues:o,createView:function(e,t){return new Float32Array(e,t,4)},zeros:a,ones:r,unitX:l,unitY:s,unitZ:c,unitW:u,ZEROS:f,ONES:d,UNIT_X:_,UNIT_Y:m,UNIT_Z:v,UNIT_W:p})},b3VY:function(e,t,n){\"use strict\";n(\"wSAH\"),n(\"n4uK\");var i=n(\"fOQB\"),o=n(\"of9L\"),a=n(\"D6bk\"),r=(n(\"0meK\"),n(\"1F90\")),l=(n(\"bfJE\"),n(\"XvKw\")),s=n(\"8HmA\"),c=n(\"IcFU\"),u=n(\"vpBa\");const f={name:\"tileInfo\",shaders:{vertexShader:Object(u.a)(\"tileInfo/tileInfo.vert\"),fragmentShader:Object(u.a)(\"tileInfo/tileInfo.frag\")},attributes:{a_pos:0}};t.a=class extends s.a{constructor(){super(...arguments),this._color=Object(l.b)(1,0,0,1)}dispose(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:n}=e;if(!t.isReady)return;this._loadWGLResources(n),n.bindVAO(this._outlineVertexArrayObject),n.bindProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.dvs),this._outlineProgram.setUniform2f(\"u_coord_range\",t.coordRange[0],t.coordRange[1]),this._outlineProgram.setUniform1f(\"u_depth\",0),this._outlineProgram.setUniform4fv(\"u_color\",this._color),n.drawArrays(3,0,4),n.bindVAO();const i=this._getTexture(n,t);i&&(n.bindVAO(this._tileInfoVertexArrayObject),n.bindProgram(this._tileInfoProgram),n.bindTexture(i,0),this._tileInfoProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.dvs),this._tileInfoProgram.setUniform1f(\"u_depth\",0),this._tileInfoProgram.setUniform2f(\"u_coord_ratio\",t.coordRange[0]/t.size[0],t.coordRange[1]/t.size[1]),this._tileInfoProgram.setUniform2f(\"u_delta\",8,8),this._tileInfoProgram.setUniform2f(\"u_dimensions\",i.descriptor.width,i.descriptor.height),n.drawArrays(5,0,4),n.bindVAO())}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const t=Object(r.a)(e,c.a),n=Object(r.a)(e,f),o={geometry:[{name:\"a_pos\",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},l=new Int8Array([0,0,1,0,1,1,0,1]),s=i.a.createVertex(e,35044,l),u=new a.a(e,c.a.attributes,o,{geometry:s}),d=new Int8Array([0,0,1,0,0,1,1,1]),_=i.a.createVertex(e,35044,d),m=new a.a(e,f.attributes,o,{geometry:_});this._outlineProgram=t,this._tileInfoProgram=n,this._outlineVertexArrayObject=u,this._tileInfoVertexArrayObject=m}_getTexture(e,t){if(t.texture&&t.triangleCountReportedInDebug===t.triangleCount)return t.texture;t.triangleCountReportedInDebug=t.triangleCount,this._canvas||(this._canvas=document.createElement(\"canvas\"),this._canvas.setAttribute(\"id\",\"canvas2d\"),this._canvas.setAttribute(\"width\",\"300\"),this._canvas.setAttribute(\"height\",\"32\"),this._canvas.setAttribute(\"style\",\"display:none\"));const n=t.triangleCount;let i=t.key.id;t.triangleCount>0&&(i+=\", \"+n);const a=this._canvas,r=a.getContext(\"2d\");return r.font=\"24px sans-serif\",r.textAlign=\"left\",r.textBaseline=\"top\",r.clearRect(0,0,300,32),n>1e5?(r.fillStyle=\"red\",r.fillRect(0,0,300,32),r.fillStyle=\"black\"):(r.clearRect(0,0,300,32),r.fillStyle=\"blue\"),r.fillText(i,0,0),t.texture=new o.a(e,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071},a),t.texture}}},fOQB:function(e,t,n){\"use strict\";var i=n(\"ohva\");class o{constructor(e,t,n,i,o){this._context=null,this._glName=null,this._bufferType=void 0,this._usage=35044,this._size=-1,this._indexType=void 0,this.id=a++,e.instanceCounter.increment(1,this),this._context=e,this._bufferType=t,this._usage=n,this._glName=this._context.gl.createBuffer(),i&&this.setData(i,o)}static createIndex(e,t,n,i){return new o(e,34963,t,n,i)}static createVertex(e,t,n){return new o(e,34962,t,n)}get glName(){return this._glName}get size(){return this._size}get usage(){return this._usage}get bufferType(){return this._bufferType}get indexType(){return this._indexType}get byteSize(){return 34962===this._bufferType?this._size:5125===this._indexType?4*this._size:2*this._size}dispose(){this._context&&(this._glName&&(this._context.gl.deleteBuffer(this._glName),this._glName=null),this._context.instanceCounter.decrement(1,this),this._context=null)}setData(e,t){if(!e)return;if(\"number\"==typeof e){if(e<0&&console.error(\"Buffer size cannot be negative!\"),34963===this._bufferType&&t)switch(this._indexType=t,this._size=e,t){case 5123:e*=2;break;case 5125:e*=4}}else{let t=e.byteLength;Object(i.i)(e)&&(t/=2,this._indexType=5123),Object(i.j)(e)&&(t/=4,this._indexType=5125),this._size=t}const n=this._context.getBoundVAO();this._context.bindVAO(null),this._context.bindBuffer(this),this._context.gl.bufferData(this._bufferType,e,this._usage),this._context.bindVAO(n)}setSubData(e,t=0,n=0,o){if(!e)return;(t<0||t>=this._size)&&console.error(\"offset is out of range!\");let a=t,r=n,l=o,s=e.byteLength;Object(i.i)(e)&&(s/=2,a*=2,r*=2,l*=2),Object(i.j)(e)&&(s/=4,a*=4,r*=4,l*=4),void 0===o&&(o=s-1),n>=o&&console.error(\"end must be bigger than start!\"),t+n-o>this._size&&console.error(\"An attempt to write beyond the end of the buffer!\");const c=this._context.getBoundVAO();this._context.bindVAO(null),this._context.bindBuffer(this);const u=this._context.gl,f=ArrayBuffer.isView(e)?e.buffer:e;u.bufferSubData(this._bufferType,a,f.slice(r,l)),this._context.bindVAO(c)}}let a=0;t.a=o},gjrC:function(e,t,n){\"use strict\";n(\"wSAH\"),n(\"OKTS\"),n(\"n4uK\");var i=n(\"fOQB\"),o=n(\"D6bk\");n(\"0meK\"),n(\"bfJE\"),t.a=class{constructor(e,t){this.rctx=e,this._vertexBuffer=i.a.createVertex(e,35044,new Uint16Array(t)),this._vao=new o.a(e,{a_position:0},{geometry:[{name:\"a_position\",count:2,type:5122,offset:0,stride:4,normalized:!1}]},{geometry:this._vertexBuffer})}bind(){this._vao.bind()}unbind(){this._vao.unbind()}dispose(){this._vao.dispose(!1),this._vertexBuffer.dispose()}draw(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(5,0,4)}}},hTmG:function(e,t,n){\"use strict\";function i(e,t){return e.vertexBuffers[t].size/function(e){return e[0].stride}(e.layout[t])}function o(e,t,n,i,o){const a=e.gl,r=e.capabilities.instancing;e.bindBuffer(n);for(const l of i){const e=t[l.name],n=(o||(0+l.baseInstance?l.baseInstance:0))*l.stride;if(void 0===e&&console.error(`There is no location for vertex attribute '${l.name}' defined.`),l.baseInstance&&!l.divisor&&console.error(`Vertex attribute '${l.name}' uses baseInstanceOffset without divisor.`),l.count<=4)a.vertexAttribPointer(e,l.count,l.type,l.normalized,l.stride,l.offset+n),a.enableVertexAttribArray(e),l.divisor&&l.divisor>0&&r&&r.vertexAttribDivisor(e,l.divisor);else if(9===l.count)for(let t=0;t<3;t++)a.vertexAttribPointer(e+t,3,l.type,l.normalized,l.stride,l.offset+12*t+n),a.enableVertexAttribArray(e+t),l.divisor&&l.divisor>0&&r&&r.vertexAttribDivisor(e+t,l.divisor);else if(16===l.count)for(let t=0;t<4;t++)a.vertexAttribPointer(e+t,4,l.type,l.normalized,l.stride,l.offset+16*t+n),a.enableVertexAttribArray(e+t),l.divisor&&l.divisor>0&&r&&r.vertexAttribDivisor(e+t,l.divisor);else console.error(\"Unsupported vertex attribute element count: \"+l.count)}}function a(e,t,n,i){const o=e.gl,a=e.capabilities.instancing;e.bindBuffer(n);for(const r of i){const e=t[r.name];if(r.count<=4)o.disableVertexAttribArray(e),r.divisor&&r.divisor>0&&a&&a.vertexAttribDivisor(e,0);else if(9===r.count)for(let t=0;t<3;t++)o.disableVertexAttribArray(e+t),r.divisor&&r.divisor>0&&a&&a.vertexAttribDivisor(e+t,0);else if(16===r.count)for(let t=0;t<4;t++)o.disableVertexAttribArray(e+t),r.divisor&&r.divisor>0&&a&&a.vertexAttribDivisor(e+t,0);else console.error(\"Unsupported vertex attribute element count: \"+r.count)}e.unbindBuffer(34962)}n.d(t,\"a\",function(){return o}),n.d(t,\"b\",function(){return a}),n.d(t,\"c\",function(){return i}),n(\"wSAH\"),n(\"srIe\")},jjdI:function(e,t,n){\"use strict\";n(\"wSAH\");var i=n(\"srIe\"),o=[\"layout\",\"centroid\",\"smooth\",\"case\",\"mat2x2\",\"mat2x3\",\"mat2x4\",\"mat3x2\",\"mat3x3\",\"mat3x4\",\"mat4x2\",\"mat4x3\",\"mat4x4\",\"uint\",\"uvec2\",\"uvec3\",\"uvec4\",\"samplerCubeShadow\",\"sampler2DArray\",\"sampler2DArrayShadow\",\"isampler2D\",\"isampler3D\",\"isamplerCube\",\"isampler2DArray\",\"usampler2D\",\"usampler3D\",\"usamplerCube\",\"usampler2DArray\",\"coherent\",\"restrict\",\"readonly\",\"writeonly\",\"resource\",\"atomic_uint\",\"noperspective\",\"patch\",\"sample\",\"subroutine\",\"common\",\"partition\",\"active\",\"filter\",\"image1D\",\"image2D\",\"image3D\",\"imageCube\",\"iimage1D\",\"iimage2D\",\"iimage3D\",\"iimageCube\",\"uimage1D\",\"uimage2D\",\"uimage3D\",\"uimageCube\",\"image1DArray\",\"image2DArray\",\"iimage1DArray\",\"iimage2DArray\",\"uimage1DArray\",\"uimage2DArray\",\"image1DShadow\",\"image2DShadow\",\"image1DArrayShadow\",\"image2DArrayShadow\",\"imageBuffer\",\"iimageBuffer\",\"uimageBuffer\",\"sampler1DArray\",\"sampler1DArrayShadow\",\"isampler1D\",\"isampler1DArray\",\"usampler1D\",\"usampler1DArray\",\"isampler2DRect\",\"usampler2DRect\",\"samplerBuffer\",\"isamplerBuffer\",\"usamplerBuffer\",\"sampler2DMS\",\"isampler2DMS\",\"usampler2DMS\",\"sampler2DMSArray\",\"isampler2DMSArray\",\"usampler2DMSArray\",\"trunc\",\"round\",\"roundEven\",\"isnan\",\"isinf\",\"floatBitsToInt\",\"floatBitsToUint\",\"intBitsToFloat\",\"uintBitsToFloat\",\"packSnorm2x16\",\"unpackSnorm2x16\",\"packUnorm2x16\",\"unpackUnorm2x16\",\"packHalf2x16\",\"unpackHalf2x16\",\"outerProduct\",\"transpose\",\"determinant\",\"inverse\",\"texture\",\"textureSize\",\"textureProj\",\"textureLod\",\"textureOffset\",\"texelFetch\",\"texelFetchOffset\",\"textureProjOffset\",\"textureLodOffset\",\"textureProjLod\",\"textureProjLodOffset\",\"textureGrad\",\"textureGradOffset\",\"textureProjGrad\",\"textureProjGradOffset\"],a=n(\"n4uK\"),r=[\"block-comment\",\"line-comment\",\"preprocessor\",\"operator\",\"integer\",\"float\",\"ident\",\"builtin\",\"keyword\",\"whitespace\",\"eof\",\"integer\"];const l=[\"GL_OES_standard_derivatives\",\"GL_EXT_frag_depth\",\"GL_EXT_draw_buffers\",\"GL_EXT_shader_texture_lod\"];function s(e,t){for(let n=t-1;n>=0;n--){const t=e[n];if(\"whitespace\"!==t.type&&\"block-comment\"!==t.type){if(\"keyword\"!==t.type)break;if(\"attribute\"===t.data||\"in\"===t.data)return!0}}return!1}function c(e,t,n,i){i=i||n;for(const o of e)if(\"ident\"===o.type&&o.data===n)return i in t?t[i]++:t[i]=0,c(e,t,i+\"_\"+t[i],i);return n}function u(e,t,n=\"afterVersion\"){function i(e,t){for(let n=t;n<e.length;n++){const t=e[n];if(\"operator\"===t.type&&\";\"===t.data)return n}return null}const o={data:\"\\n\",type:\"whitespace\"},a=t=>t<e.length&&/[^\\r\\n]$/.test(e[t].data);let r=function(e){let t=-1,o=0,a=-1;for(let r=0;r<e.length;r++){const l=e[r];if(\"preprocessor\"===l.type&&(l.data.match(/\\#(if|ifdef|ifndef)\\s+.+/)?++o:l.data.match(/\\#endif\\s*.*/)&&--o),\"afterVersion\"!==n&&\"afterPrecision\"!==n||\"preprocessor\"===l.type&&/^#version/.test(l.data)&&(a=Math.max(a,r)),\"afterPrecision\"===n&&\"keyword\"===l.type&&\"precision\"===l.data){const t=i(e,r);if(null===t)throw new Error(\"precision statement not followed by any semicolons!\");a=Math.max(a,t)}t<a&&0===o&&(t=r)}return t+1}(e);a(r-1)&&e.splice(r++,0,o);for(const l of t)e.splice(r++,0,l);a(r-1)&&a(r)&&e.splice(r,0,o)}function f(e,t,n,i=\"lowp\"){u(e,[{type:\"keyword\",data:\"out\"},{type:\"whitespace\",data:\" \"},{type:\"keyword\",data:i},{type:\"whitespace\",data:\" \"},{type:\"keyword\",data:n},{type:\"whitespace\",data:\" \"},{type:\"ident\",data:t},{type:\"operator\",data:\";\"}],\"afterPrecision\")}function d(e,t,n,i,o=\"lowp\"){u(e,[{type:\"keyword\",data:\"layout\"},{type:\"operator\",data:\"(\"},{type:\"keyword\",data:\"location\"},{type:\"whitespace\",data:\" \"},{type:\"operator\",data:\"=\"},{type:\"whitespace\",data:\" \"},{type:\"integer\",data:i.toString()},{type:\"operator\",data:\")\"},{type:\"whitespace\",data:\" \"},{type:\"keyword\",data:\"out\"},{type:\"whitespace\",data:\" \"},{type:\"keyword\",data:o},{type:\"whitespace\",data:\" \"},{type:\"keyword\",data:n},{type:\"whitespace\",data:\" \"},{type:\"ident\",data:t},{type:\"operator\",data:\";\"}],\"afterPrecision\")}function _(e,t){let n,i,o=-1;for(let a=t;a<e.length;a++){const t=e[a];if(\"operator\"===t.type&&(\"[\"===t.data&&(n=a),\"]\"===t.data)){i=a;break}\"integer\"===t.type&&(o=parseInt(t.data,10))}return n&&i&&e.splice(n,i-n+1),o}class m{constructor(e,t,n,i,o={}){if(this._context=null,this._glName=null,this._locations={},this.id=p++,this._initialized=!1,this._vShader=null,this._fShader=null,this._defines={},this._nameToUniformLocation={},this._nameToAttribLocation={},this._nameToUniform1={},this._nameToUniform1v={},this._nameToUniform2={},this._nameToUniform3={},this._nameToUniform4={},this._nameToUniformMatrix3={},this._nameToUniformMatrix4={},e||console.error(\"RenderingContext isn't initialized!\"),0===t.length&&console.error(\"Shaders source should not be empty!\"),e.instanceCounter.increment(3,this),this._context=e,this._vertexShaderSource=t,this._fragmentShaderSource=n,Array.isArray(o))for(const a of o)this._defines[a]=\"1\";else this._defines=o;this._locations=i}get glName(){return this._glName}get locations(){return this._locations}getDefine(e){return this._defines[e]}dispose(){if(!this._context)return;const e=this._context.gl;this._vShader&&(e.deleteShader(this._vShader),this._vShader=null),this._fShader&&(e.deleteShader(this._fShader),this._fShader=null),this._glName&&(e.deleteProgram(this._glName),this._glName=null),this._context.instanceCounter.decrement(3,this),this._context=null}initialize(){if(this._initialized)return;this._vShader=this._loadShader(35633),this._fShader=this._loadShader(35632),this._vShader&&this._fShader||console.error(\"Error loading shaders!\");const e=this._context.gl,t=e.createProgram();e.attachShader(t,this._vShader),e.attachShader(t,this._fShader);for(const n in this._locations)e.bindAttribLocation(t,this._locations[n],n);e.linkProgram(t),this._glName=t,this._initialized=!0}getUniformLocation(e){return this.initialize(),void 0===this._nameToUniformLocation[e]&&(this._nameToUniformLocation[e]=this._context.gl.getUniformLocation(this._glName,e)),this._nameToUniformLocation[e]}hasUniform(e){return null!==this.getUniformLocation(e)}getAttribLocation(e){return this.initialize(),void 0===this._nameToAttribLocation[e]&&(this._nameToAttribLocation[e]=this._context.gl.getAttribLocation(this._glName,e)),this._nameToAttribLocation[e]}setUniform1i(e,t){const n=this._nameToUniform1[e];void 0!==n&&t===n||(this._context.bindProgram(this),this._context.gl.uniform1i(this.getUniformLocation(e),t),this._nameToUniform1[e]=t)}setUniform1iv(e,t){const n=this._nameToUniform1v[e];v(n,t)&&(this._context.bindProgram(this),this._context.gl.uniform1iv(this.getUniformLocation(e),t),void 0===n?this._nameToUniform1v[e]=m._arrayCopy(t):m._arrayAssign(t,n))}setUniform2iv(e,t){const n=this._nameToUniform2[e];v(n,t)&&(this._context.bindProgram(this),this._context.gl.uniform2iv(this.getUniformLocation(e),t),void 0===n?this._nameToUniform2[e]=m._arrayCopy(t):m._arrayAssign(t,n))}setUniform3iv(e,t){const n=this._nameToUniform3[e];v(n,t)&&(this._context.bindProgram(this),this._context.gl.uniform3iv(this.getUniformLocation(e),t),void 0===n?this._nameToUniform3[e]=m._arrayCopy(t):m._arrayAssign(t,n))}setUniform4iv(e,t){const n=this._nameToUniform4[e];v(n,t)&&(this._context.bindProgram(this),this._context.gl.uniform4iv(this.getUniformLocation(e),t),void 0===n?this._nameToUniform4[e]=m._arrayCopy(t):m._arrayAssign(t,n))}setUniform1f(e,t){const n=this._nameToUniform1[e];void 0!==n&&t===n||(this._context.bindProgram(this),this._context.gl.uniform1f(this.getUniformLocation(e),t),this._nameToUniform1[e]=t)}setUniform1fv(e,t){const n=this._nameToUniform1v[e];v(n,t)&&(this._context.bindProgram(this),this._context.gl.uniform1fv(this.getUniformLocation(e),t),void 0===n?this._nameToUniform1v[e]=m._arrayCopy(t):m._arrayAssign(t,n))}setUniform2f(e,t,n){const i=this._nameToUniform2[e];void 0!==i&&t===i[0]&&n===i[1]||(this._context.bindProgram(this),this._context.gl.uniform2f(this.getUniformLocation(e),t,n),void 0===i?this._nameToUniform2[e]=[t,n]:(i[0]=t,i[1]=n))}setUniform2fv(e,t){const n=this._nameToUniform2[e];v(n,t)&&(this._context.bindProgram(this),this._context.gl.uniform2fv(this.getUniformLocation(e),t),void 0===n?this._nameToUniform2[e]=m._arrayCopy(t):m._arrayAssign(t,n))}setUniform3f(e,t,n,i){const o=this._nameToUniform3[e];void 0!==o&&t===o[0]&&n===o[1]&&i===o[2]||(this._context.bindProgram(this),this._context.gl.uniform3f(this.getUniformLocation(e),t,n,i),void 0===o?this._nameToUniform3[e]=[t,n,i]:(o[0]=t,o[1]=n,o[2]=i))}setUniform3fv(e,t){const n=this._nameToUniform3[e];v(n,t)&&(this._context.bindProgram(this),this._context.gl.uniform3fv(this.getUniformLocation(e),t),void 0===n?this._nameToUniform3[e]=m._arrayCopy(t):m._arrayAssign(t,n))}setUniform4f(e,t,n,i,o){const a=this._nameToUniform4[e];void 0!==a&&t===a[0]&&n===a[1]&&i===a[2]&&o===a[3]||(this._context.bindProgram(this),this._context.gl.uniform4f(this.getUniformLocation(e),t,n,i,o),void 0===a?this._nameToUniform4[e]=[t,n,i,o]:(a[0]=t,a[1]=n,a[2]=i,a[3]=o))}setUniform4fv(e,t){const n=this._nameToUniform4[e];v(n,t)&&(this._context.bindProgram(this),this._context.gl.uniform4fv(this.getUniformLocation(e),t),void 0===n?this._nameToUniform4[e]=m._arrayCopy(t):m._arrayAssign(t,n))}setUniformMatrix3fv(e,t,n=!1){const o=this._nameToUniformMatrix3[e];(function(e,t){return!!Object(i.g)(e)||(9!==e.length?v(e,t):9!==e.length||e[0]!==t[0]||e[1]!==t[1]||e[2]!==t[2]||e[3]!==t[3]||e[4]!==t[4]||e[5]!==t[5]||e[6]!==t[6]||e[7]!==t[7]||e[8]!==t[8])})(o,t)&&(this._context.bindProgram(this),this._context.gl.uniformMatrix3fv(this.getUniformLocation(e),n,t),void 0===o?this._nameToUniformMatrix3[e]=m._arrayCopy(t):m._arrayAssign(t,o))}setUniformMatrix4fv(e,t,n=!1){const o=this._nameToUniformMatrix4[e];(function(e,t){return!!Object(i.g)(e)||(16!==e.length?v(e,t):16!==e.length||e[0]!==t[0]||e[1]!==t[1]||e[2]!==t[2]||e[3]!==t[3]||e[4]!==t[4]||e[5]!==t[5]||e[6]!==t[6]||e[7]!==t[7]||e[8]!==t[8]||e[9]!==t[9]||e[10]!==t[10]||e[11]!==t[11]||e[12]!==t[12]||e[13]!==t[13]||e[14]!==t[14]||e[15]!==t[15])})(o,t)&&(this._context.bindProgram(this),this._context.gl.uniformMatrix4fv(this.getUniformLocation(e),n,t),void 0===o?this._nameToUniformMatrix4[e]=m._arrayCopy(t):m._arrayAssign(t,o))}assertCompatibleVertexAttributeLocations(e){const t=e.locations===this.locations;return t||console.error(\"VertexAttributeLocations are incompatible\"),t}static _padToThree(e){let t=e.toString();return e<1e3&&(t=(\"  \"+e).slice(-3)),t}_addLineNumbers(e){let t=2;return e.replace(/\\n/g,()=>\"\\n\"+m._padToThree(t++)+\":\")}_loadShader(e){const t=35633===e;let n=t?this._vertexShaderSource:this._fragmentShaderSource,i=\"\";for(const o in this._defines)i+=`#define ${o} ${this._defines[o]}\\n`;n=i+n,\"webgl2\"===this._context.contextVersion&&(n=function(e,t){const n=function(e){return t=e,n=function(){var e,t,n,i=0,o=0,l=999,s=[],c=[],u=1,f=0,d=0,_=!1,m=!1,v=\"\";return function(a){return c=[],null!==a?function(a){var r;for(i=0,n=(v+=a).length;e=v[i],i<n;){switch(r=i,l){case 0:i=\"/\"===e&&\"*\"===t?(s.push(e),p(s.join(\"\")),l=999,i+1):(s.push(e),t=e,i+1);break;case 1:case 2:i=\"\\r\"!==e&&\"\\n\"!==e||\"\\\\\"===t?(s.push(e),t=e,i+1):(p(s.join(\"\")),l=999,i);break;case 3:i=g();break;case 4:i=\".\"===e||/[eE]/.test(e)?(s.push(e),l=5,t=e,i+1):\"x\"===e&&1===s.length&&\"0\"===s[0]?(l=11,s.push(e),t=e,i+1):/[^\\d]/.test(e)?(p(s.join(\"\")),l=999,i):(s.push(e),t=e,i+1);break;case 11:i=/[^a-fA-F0-9]/.test(e)?(p(s.join(\"\")),l=999,i):(s.push(e),t=e,i+1);break;case 5:\"f\"===e&&(s.push(e),t=e,i+=1),i=/[eE]/.test(e)||\"-\"===e&&/[eE]/.test(t)?(s.push(e),t=e,i+1):/[^\\d]/.test(e)?(p(s.join(\"\")),l=999,i):(s.push(e),t=e,i+1);break;case 9999:i=x();break;case 9:i=/[^\\s]/g.test(e)?(p(s.join(\"\")),l=999,i):(s.push(e),t=e,i+1);break;case 999:s=s.length?[]:s,i=\"/\"===t&&\"*\"===e?(d=o+i-1,l=0,t=e,i+1):\"/\"===t&&\"/\"===e?(d=o+i-1,l=1,t=e,i+1):\"#\"===e?(l=2,d=o+i,i):/\\s/.test(e)?(l=9,d=o+i,i):(_=/\\d/.test(e),m=/[^\\w_]/.test(e),d=o+i,l=_?4:m?3:9999,i)}if(r!==i)switch(v[r]){case\"\\n\":f=0,++u;break;default:++f}}return o+=i,v=v.slice(i),c}(a.replace?a.replace(/\\r\\n/g,\"\\n\"):a):(s.length&&p(s.join(\"\")),l=10,p(\"(eof)\"),c)};function p(e){e.length&&c.push({type:r[l],data:e,position:d,line:u,column:f})}function g(){if(\".\"===t&&/\\d/.test(e))return l=5,i;if(\"/\"===t&&\"*\"===e)return l=0,i;if(\"/\"===t&&\"/\"===e)return l=1,i;if(\".\"===e&&s.length){for(;h(s););return l=5,i}if(\";\"===e||\")\"===e||\"(\"===e){if(s.length)for(;h(s););return p(e),l=999,i+1}var n=2===s.length&&\"=\"!==e;if(/[\\w_\\d\\s]/.test(e)||n){for(;h(s););return l=999,i}return s.push(e),t=e,i+1}function h(e){for(var t,n,i=0;;){if(t=a.c.indexOf(e.slice(0,e.length+i).join(\"\")),n=a.c[t],-1===t){if(i--+e.length>0)continue;n=e.slice(0,1).join(\"\")}return p(n),d+=n.length,(s=s.slice(n.length)).length}}function x(){if(/[^\\d\\w_]/.test(e)){var n=s.join(\"\");return l=a.b.indexOf(n)>-1?8:a.a.indexOf(n)>-1?7:6,p(s.join(\"\")),l=999,i}return s.push(e),t=e,i+1}}(),[].concat(n(t)).concat(n(null));var t,n}(e);if(\"300 es\"===function(e,t=\"100\",n=\"300 es\"){const i=/^\\s*\\#version\\s+([0-9]+(\\s+[a-zA-Z]+)?)\\s*/;for(const o of e)if(\"preprocessor\"===o.type){const e=i.exec(o.data);if(e){const i=e[1].replace(/\\s\\s+/g,\" \");if(i===n)return i;if(i===t)return o.data=\"#version \"+n,t;throw new Error(\"unknown glsl version: \"+i)}}return e.splice(0,0,{type:\"preprocessor\",data:\"#version \"+n},{type:\"whitespace\",data:\"\\n\"}),null}(n,\"100\",\"300 es\"))throw new Error(\"shader is already glsl 300 es\");let i=null,u=null;const m={},v={};for(let a=0;a<n.length;++a){const e=n[a];switch(e.type){case\"keyword\":\"vertex\"===t&&\"attribute\"===e.data?e.data=\"in\":\"varying\"===e.data&&(e.data=\"vertex\"===t?\"out\":\"in\");break;case\"builtin\":if(/^texture(2D|Cube)(Proj)?(Lod|Grad)?(EXT)?$/.test(e.data.trim())&&(e.data=e.data.replace(/(2D|Cube|EXT)/g,\"\")),\"fragment\"===t&&\"gl_FragColor\"===e.data&&(i||(i=c(n,m,\"fragColor\"),f(n,i,\"vec4\")),e.data=i),\"fragment\"===t&&\"gl_FragData\"===e.data){const t=_(n,a+1),i=c(n,m,\"fragData\");d(n,i,\"vec4\",t,\"mediump\"),e.data=i}else\"fragment\"===t&&\"gl_FragDepthEXT\"===e.data&&(u||(u=c(n,m,\"gl_FragDepth\")),e.data=u);break;case\"ident\":if(o.indexOf(e.data)>=0){if(\"vertex\"===t&&s(n,a))throw new Error(\"attribute in vertex shader uses a name that is a reserved word in glsl 300 es\");e.data in v||(v[e.data]=c(n,m,e.data)),e.data=v[e.data]}}}for(let o=n.length-1;o>=0;--o){const e=n[o];if(\"preprocessor\"===e.type){const t=e.data.match(/\\#extension\\s+(.*)\\:/);if(t&&t[1]&&l.indexOf(t[1].trim())>=0){const e=n[o+1];n.splice(o,e&&\"whitespace\"===e.type?2:1)}const i=e.data.match(/\\#ifdef\\s+(.*)/);i&&i[1]&&l.indexOf(i[1].trim())>=0&&(e.data=\"#if 1\");const a=e.data.match(/\\#ifndef\\s+(.*)/);a&&a[1]&&l.indexOf(a[1].trim())>=0&&(e.data=\"#if 0\")}}return n.map(e=>\"eof\"!==e.type?e.data:\"\").join(\"\")}(n,t?\"vertex\":\"fragment\"));const u=this._context.gl,m=u.createShader(e);return u.shaderSource(m,n),u.compileShader(m),m}static _arrayCopy(e){const t=[];for(let n=0;n<e.length;++n)t.push(e[n]);return t}static _arrayAssign(e,t){for(let n=0;n<e.length;++n)t[n]=e[n]}}function v(e,t){if(Object(i.g)(e)||e.length!==t.length)return!0;for(let n=0;n<e.length;++n)if(e[n]!==t[n])return!0;return!1}let p=0;t.a=m},mgI5:function(e,t,n){\"use strict\";n(\"wSAH\");var i=n(\"srIe\"),o=n(\"yE7X\"),a=n(\"AMBt\"),r=n(\"Oxob\"),l=n(\"6S2I\"),s=n(\"zlDU\"),c=n(\"D6bk\"),u=n(\"fEsP\"),f=n(\"gVKr\"),d=n(\"ZlUD\"),_=n(\"AvGH\"),m=n(\"+yyC\"),v=n(\"M0lq\"),p=n(\"fOQB\"),g=n(\"0RS7\");const h=l.a.getLogger(\"esri.views.2d.engine.webgl.Mesh2D\"),x=(e,t,n,i)=>{let o=0;for(let a=1;a<n;a++)o+=(e[2*(t+a)]-e[2*(t+a-1)])*(e[2*(t+a)+1]+e[2*(t+a-1)+1]);return i?o>0:o<0},b=({coords:e,lengths:t},n)=>{const i=[];for(let o=0,a=0;o<t.length;a+=t[o],o+=1){const r=a,l=[];for(;o<t.length-1&&x(e,a+t[o],t[o+1],n);o+=1,a+=t[o])l.push(a+t[o]-r);const s=e.slice(2*r,2*(a+t[o])),c=Object(m.b)(s,l,2);for(const e of c)i.push(e+r)}return i};class y{constructor(e,t,n,i=!1){this._cache={},this.vertices=e,this.indices=t,this.primitiveType=n,this.isMapSpace=i}static fromRect({x:e,y:t,width:n,height:i}){return y.fromScreenExtent({xmin:e,ymin:t,xmax:e+n,ymax:t+i})}static fromPath(e){const t=Object(d.f)(new f.a,e.path,!1,!1),n=t.coords,i=new Uint32Array(b(t,!0)),o=new Uint32Array(n.length/2);for(let a=0;a<o.length;a++)o[a]=Object(g.a)(Math.floor(n[2*a]),Math.floor(n[2*a+1]));return new y({geometry:o},i,4)}static fromGeometry(e,t){const n=t.geometry.type;switch(n){case\"polygon\":return y.fromPolygon(e,t.geometry);case\"extent\":return y.fromMapExtent(e,t.geometry);default:return h.error(new s.a(\"mapview-bad-type\",\"Unable to create a mesh from type \"+n,t)),y.fromRect({x:0,y:0,width:1,height:1})}}static fromPolygon(e,t){const n=Object(d.g)(new f.a,t,!1,!1),i=n.coords,o=new Uint32Array(b(n,!1)),a=new Uint32Array(i.length/2),r=Object(_.a)(),l=Object(_.a)();for(let s=0;s<a.length;s++)Object(v.m)(r,i[2*s],i[2*s+1]),e.toScreen(l,r),a[s]=Object(g.a)(Math.floor(l[0]),Math.floor(l[1]));return new y({geometry:a},o,4,!0)}static fromScreenExtent({xmin:e,xmax:t,ymin:n,ymax:i}){const o={geometry:new Uint32Array([Object(g.a)(e,n),Object(g.a)(t,n),Object(g.a)(e,i),Object(g.a)(e,i),Object(g.a)(t,n),Object(g.a)(t,i)])},a=new Uint32Array([0,1,2,3,4,5]);return new y(o,a,4)}static fromMapExtent(e,t){const[n,i]=e.toScreen([0,0],[t.xmin,t.ymin]),[o,a]=e.toScreen([0,0],[t.xmax,t.ymax]),r={geometry:new Uint32Array([Object(g.a)(n,i),Object(g.a)(o,i),Object(g.a)(n,a),Object(g.a)(n,a),Object(g.a)(o,i),Object(g.a)(o,a)])},l=new Uint32Array([0,1,2,3,4,5]);return new y(r,l,4)}destroy(){Object(i.h)(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose();for(const e in this._cache.vertexBuffers)Object(i.h)(this._cache.vertexBuffers[e])&&this._cache.vertexBuffers[e].dispose()}get elementType(){return(e=>{switch(this.indices.BYTES_PER_ELEMENT){case 1:return 5121;case 2:return 5123;case 4:return 5125;default:throw new s.a(\"Cannot get DataType of array\")}})()}getIndexBuffer(e,t=35044){return this._cache.indexBuffer||(this._cache.indexBuffer=p.a.createIndex(e,t,this.indices)),this._cache.indexBuffer}getVertexBuffers(e,t=35044){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce((n,i)=>({...n,[i]:p.a.createVertex(e,t,this.vertices[i])}),{})),this._cache.vertexBuffers}}var C=y;const S=l.a.getLogger(\"esri.views.2d.engine.webgl.ClippingInfo\"),T=e=>parseFloat(e)/100;class D extends u.a{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=t.watch(\"version\",()=>this._invalidate()),this.ready()}static fromClipArea(e,t){return new D(e,t)}_destroyGL(){Object(i.h)(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),Object(i.h)(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,n,o){const[a,r]=t.size;if(\"geometry\"!==this._clip.type&&this._lastWidth===a&&this._lastHeight===r||(this._lastWidth=a,this._lastHeight=r,this._destroyGL()),Object(i.g)(this._cache.vao)){const i=this._createMesh(t,this._clip),a=i.getIndexBuffer(e),r=i.getVertexBuffers(e);this._cache.mesh=i,this._cache.vao=new c.a(e,n,o,r,a)}return this._cache.vao}_invalidate(){this._destroyGL(),this.requestRender()}_createScreenRect(e,t){const[n,i]=e.size,o=\"string\"==typeof t.left?T(t.left)*n:t.left,a=\"string\"==typeof t.right?T(t.right)*n:t.right,r=\"string\"==typeof t.top?T(t.top)*i:t.top,l=\"string\"==typeof t.bottom?T(t.bottom)*i:t.bottom,s=r;return{x:o,y:s,width:Math.max(n-a-o,0),height:Math.max(i-l-s,0)}}_createMesh(e,t){switch(t.type){case\"rect\":return C.fromRect(this._createScreenRect(e,t));case\"path\":return C.fromPath(t);case\"geometry\":return C.fromGeometry(e,t);default:return S.error(new s.a(\"mapview-bad-type\",\"Unable to create ClippingInfo mesh from clip of type: ${clip.type}\")),C.fromRect({x:0,y:0,width:1,height:1})}}}var O=D;t.a=class extends a.a{constructor(){super(...arguments),this.name=this.constructor.name}set clips(e){this._clips=e,this.children.forEach(t=>t.clips=e),this._updateClippingInfo()}doRender(e){const t=this.createRenderParams(e),{painter:n,globalOpacity:i,profiler:a,drawPhase:r}=t,l=r===o.c.LABEL?1:i*this.computedOpacity;a.recordContainerStart(this.name),n.beforeRenderLayer(t,this._clippingInfos?255:0,l),this.updateTransforms(e.state),this.renderChildren(t),n.compositeLayer(t,l),a.recordContainerEnd()}renderChildren(e){Object(i.g)(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(e.painter));for(const n of this.children)n.beforeRender(e);for(const n of this._renderPasses)try{n.render(e)}catch(t){}for(const n of this.children)n.afterRender(e)}createRenderParams(e){return e}prepareRenderPasses(e){return[e.registerRenderPass({name:\"clip\",brushes:[r.a.clip],target:()=>this._clippingInfos,drawPhase:o.c.MAP|o.c.LABEL|o.c.LABEL_ALPHA|o.c.DEBUG|o.c.HIGHLIGHT})]}updateTransforms(e){for(const t of this.children)t.setTransform(e)}onAttach(){super.onAttach(),this._updateClippingInfo()}onDetach(){super.onDetach(),this._updateClippingInfo()}_updateClippingInfo(){if(Object(i.h)(this._clippingInfos)&&(this._clippingInfos.forEach(e=>e.destroy()),this._clippingInfos=null),!this.stage)return;const e=this._clips;Object(i.h)(e)&&e.length&&(this._clippingInfos=e.items.map(e=>O.fromClipArea(this.stage,e))),this.requestRender()}}},vpBa:function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return r}),n(\"wSAH\"),n(\"OKTS\"),n(\"n4uK\"),n(\"0meK\"),n(\"bfJE\");var i=n(\"SfCL\"),o={background:{\"background.frag\":\"uniform lowp vec4 u_color;\\nvoid main() {\\n  gl_FragColor = u_color;\\n}\",\"background.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump vec2 u_coord_range;\\nuniform mediump float u_depth;\\nvoid main() {\\n  vec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\\n  gl_Position = vec4(v_pos.xy, 0.0, 1.0);\\n}\"},bitBlit:{\"bitBlit.frag\":\"uniform lowp sampler2D u_tex;\\nuniform lowp float u_opacity;\\nvarying mediump vec2 v_uv;\\nvoid main() {\\n  lowp vec4 color = texture2D(u_tex, v_uv);\\n  gl_FragColor = color *  u_opacity;\\n}\",\"bitBlit.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_tex;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\n  gl_Position = vec4(a_pos, 0.0, 1.0);\\n  v_uv = a_tex;\\n}\"},blend:{\"blend.frag\":\"precision mediump float;\\nuniform sampler2D u_layerTexture;\\nuniform lowp float u_opacity;\\nuniform lowp float u_inFadeOpacity;\\n#ifndef NORMAL\\nuniform sampler2D u_backbufferTexture;\\n#endif\\nvarying mediump vec2 v_uv;\\nfloat rgb2v(in vec3 c) {\\n  return max(c.x, max(c.y, c.z));\\n}\\nvec3 rgb2hsv(in vec3 c) {\\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n  vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\n  vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\n  float d = q.x - min(q.w, q.y);\\n  float e = 1.0e-10;\\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(in vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec3 tint(in vec3 Cb, in vec3 Cs) {\\n  float vIn = rgb2v(Cb);\\n  vec3 hsvTint = rgb2hsv(Cs);\\n  vec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\\n  return hsv2rgb(hsvOut);\\n}\\nfloat overlay(in float Cb, in float Cs) {\\n  return (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\\n}\\nfloat colorDodge(in float Cb, in float Cs) {\\n  return (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\\n}\\nfloat colorBurn(in float Cb, in float Cs) {\\n return (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\\n}\\nfloat hardLight(in float Cb, in float Cs) {\\n  return (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\\n}\\nfloat reflectBlend(in float Cb, in float Cs) {\\n\\treturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\\n}\\nfloat softLight(in float Cb, in float Cs) {\\n  if (Cs <= 0.5) {\\n    return Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\\n  }\\n  if (Cb <= 0.25) {\\n    return Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\\n  }\\n  return Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\\n}\\nfloat vividLight(in float Cb, in float Cs) {\\n  return (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\\n}\\nfloat minv3(in vec3 c) {\\n  return min(min(c.r, c.g), c.b);\\n}\\nfloat maxv3(in vec3 c) {\\n  return max(max(c.r, c.g), c.b);\\n}\\nfloat lumv3(in vec3 c) {\\n  return dot(c, vec3(0.3, 0.59, 0.11));\\n}\\nfloat satv3(vec3 c) {\\n  return maxv3(c) - minv3(c);\\n}\\nvec3 clipColor(vec3 color) {\\n  float lum = lumv3(color);\\n  float mincol = minv3(color);\\n  float maxcol = maxv3(color);\\n  if (mincol < 0.0) {\\n    color = lum + ((color - lum) * lum) / (lum - mincol);\\n  }\\n  if (maxcol > 1.0) {\\n    color = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\\n  }\\n  return color;\\n}\\nvec3 setLum(vec3 cbase, vec3 clum) {\\n  float lbase = lumv3(cbase);\\n  float llum = lumv3(clum);\\n  float ldiff = llum - lbase;\\n  vec3 color = cbase + vec3(ldiff);\\n  return clipColor(color);\\n}\\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\\n{\\n  float minbase = minv3(cbase);\\n  float sbase = satv3(cbase);\\n  float ssat = satv3(csat);\\n  vec3 color;\\n  if (sbase > 0.0) {\\n    color = (cbase - minbase) * ssat / sbase;\\n  } else {\\n    color = vec3(0.0);\\n  }\\n  return setLum(color, clum);\\n}\\nvoid main() {\\n  vec4 src = texture2D(u_layerTexture, v_uv);\\n#ifdef NORMAL\\n  gl_FragColor = src *  u_opacity;\\n#else\\n  vec4 dst = texture2D(u_backbufferTexture, v_uv);\\n  vec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\\n  vec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\\n  float as = u_opacity * src.a;\\n  float ab = dst.a;\\n  #ifdef DESTINATION_OVER\\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\\n  #endif\\n  #ifdef SOURCE_IN\\n    vec4 color = vec4(as * Cs * ab, as * ab);\\n    vec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\\n    gl_FragColor = color + fadeColor;\\n  #endif\\n  #ifdef DESTINATION_IN\\n    vec4 color = vec4(ab * Cb * as, ab * as);\\n    vec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\\n    gl_FragColor = color + fadeColor;\\n  #endif\\n  #ifdef SOURCE_OUT\\n    gl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\\n  #endif\\n  #ifdef DESTINATION_OUT\\n    gl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\\n  #endif\\n  #ifdef SOURCE_ATOP\\n    gl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\\n  #endif\\n  #ifdef DESTINATION_ATOP\\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\\n  #endif\\n  #ifdef XOR\\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\\n                        as * (1.0 - ab) + ab * (1.0 - as));\\n  #endif\\n  #ifdef MULTIPLY\\n    gl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef SCREEN\\n    gl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef OVERLAY\\n    vec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef DARKEN\\n    gl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef LIGHTER\\n    gl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\\n  #endif\\n  #ifdef LIGHTEN\\n    gl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef COLOR_DODGE\\n    vec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef COLOR_BURN\\n    vec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef HARD_LIGHT\\n    vec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef SOFT_LIGHT\\n    vec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef DIFFERENCE\\n    gl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef EXCLUSION\\n     vec3 f = Cs + Cb - 2.0 * Cs * Cb;\\n     gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef INVERT\\n    gl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\\n  #endif\\n  #ifdef VIVID_LIGHT\\n    vec3 f = vec3(vividLight(Cb.r, Cs.r),\\n                  vividLight(Cb.g, Cs.g),\\n                  vividLight(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef HUE\\n    vec3 f = setLumSat(Cs,Cb,Cb);\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef SATURATION\\n    vec3 f = setLumSat(Cb,Cs,Cb);\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef COLOR\\n    vec3 f = setLum(Cs,Cb);\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef LUMINOSITY\\n    vec3 f = setLum(Cb,Cs);\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef PLUS\\n    gl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\\n  #endif\\n  #ifdef MINUS\\n     gl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\\n  #endif\\n  #ifdef AVERAGE\\n     vec3 f = (Cb + Cs) / 2.0;\\n     gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef REFLECT\\n    vec3 f = vec3(reflectBlend(Cb.r, Cs.r),\\n                  reflectBlend(Cb.g, Cs.g),\\n                  reflectBlend(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n#endif\\n}\",\"blend.vert\":\"attribute vec2 a_position;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\n  gl_Position = vec4(a_position , 0.0, 1.0);\\n  v_uv = (a_position + 1.0) / 2.0;\\n}\"},filtering:{\"bicubic.glsl\":\"vec4 computeWeights(float v) {\\n  float b = 1.0 / 6.0;\\n  float v2 = v * v;\\n  float v3 = v2 * v;\\n  float w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\\n  float w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\\n  float w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\\n  float w3 = b * v3;\\n  return vec4(w0, w1, w2, w3);\\n}\\nvec4 bicubicOffsetsAndWeights(float v) {\\n  vec4 w = computeWeights(v);\\n  float g0 = w.x + w.y;\\n  float g1 = w.z + w.w;\\n  float h0 = 1.0 - (w.y / g0) + v;\\n  float h1 = 1.0 + (w.w / g1) - v;\\n  return vec4(h0, h1, g0, g1);\\n}\\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\\n  vec2 eX = vec2(1.0 / texSize.x, 0.0);\\n  vec2 eY = vec2(0.0, 1.0 / texSize.y);\\n  vec2 texel = coords * texSize - 0.5;\\n  vec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\\n  vec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\\n  vec2 coords10 = coords + hgX.x * eX;\\n  vec2 coords00 = coords - hgX.y * eX;\\n  vec2 coords11 = coords10 + hgY.x * eY;\\n  vec2 coords01 = coords00 + hgY.x * eY;\\n  coords10 = coords10 - hgY.y * eY;\\n  coords00 = coords00 - hgY.y * eY;\\n  vec4 color00 = texture2D(sampler, coords00);\\n  vec4 color10 = texture2D(sampler, coords10);\\n  vec4 color01 = texture2D(sampler, coords01);\\n  vec4 color11 = texture2D(sampler, coords11);\\n  color00 = mix(color00, color01, hgY.z);\\n  color10 = mix(color10, color11, hgY.z);\\n  color00 = mix(color00, color10, hgX.z);\\n  return color00;\\n}\",\"bilinear.glsl\":\"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\\n  vec2 texelStart = floor(coords * texSize);\\n  vec2 coord0 = texelStart / texSize;\\n  vec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\\n  vec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\\n  vec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\\n  vec4 color0 = texture2D(sampler, coord0);\\n  vec4 color1 = texture2D(sampler, coord1);\\n  vec4 color2 = texture2D(sampler, coord2);\\n  vec4 color3 = texture2D(sampler, coord3);\\n  vec2 blend = fract(coords * texSize);\\n  vec4 color01 = mix(color0, color1, blend.x);\\n  vec4 color23 = mix(color2, color3, blend.x);\\n  return mix(color01, color23, blend.y);\\n}\",\"epx.glsl\":\"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\\n  vec2 invSize = 1.0 / texSize;\\n  vec2 texel = coords * texSize;\\n  vec2 texel_i = floor(texel);\\n  vec2 texel_frac = fract(texel);\\n  vec4 colorP = texture2D(sampler, texel_i * invSize);\\n  vec4 colorP1 = vec4(colorP);\\n  vec4 colorP2 = vec4(colorP);\\n  vec4 colorP3 = vec4(colorP);\\n  vec4 colorP4 = vec4(colorP);\\n  vec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\\n  vec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\\n  vec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\\n  vec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\\n  if (colorC == colorA && colorC != colorD && colorA != colorB) {\\n    colorP1 = colorA;\\n  }\\n  if (colorA == colorB && colorA != colorC && colorB != colorD) {\\n    colorP2 = colorB;\\n  }\\n  if (colorD == colorC && colorD != colorB && colorC != colorA) {\\n    colorP3 = colorC;\\n  }\\n  if (colorB == colorD && colorB != colorA && colorD != colorC) {\\n    colorP4 = colorD;\\n  }\\n  vec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\\n  vec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\\n  return mix(colorP12, colorP34, texel_frac.y);\\n}\"},fx:{integrate:{\"integrate.frag\":\"precision mediump float;\\nuniform lowp sampler2D u_sourceTexture;\\nuniform lowp sampler2D u_maskTexture;\\nuniform mediump float u_zoomLevel;\\nuniform highp float u_timeDelta;\\nuniform highp float u_animationTime;\\nvarying highp vec2 v_texcoord;\\n#include <materials/utils.glsl>\\nvoid main()\\n{\\n#ifdef DELTA\\n  vec4 texel = texture2D(u_sourceTexture, v_texcoord);\\n  vec4 data0 = texture2D(u_maskTexture, v_texcoord);\\n  float flags = data0.r * 255.0;\\n  float groupMinZoom = data0.g * 255.0;\\n  float isVisible = getFilterBit(flags, 0);\\n  float wouldClip = step(groupMinZoom, u_zoomLevel);\\n  float direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\\n  float dt = u_timeDelta / max(u_animationTime, 0.0001);\\n  vec4 nextState = vec4(texel + direction * dt);\\n  gl_FragColor =  vec4(nextState);\\n#elif defined(UPDATE)\\n  vec4 texel = texture2D(u_sourceTexture, v_texcoord);\\n  gl_FragColor = texel;\\n#endif\\n}\",\"integrate.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\n  v_texcoord = a_pos;\\n  gl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\\n}\"}},highlight:{\"blur.frag\":\"varying mediump vec2 v_texcoord;\\nuniform mediump vec4 u_direction;\\nuniform mediump mat4 u_channelSelector;\\nuniform mediump vec4 u_sigmas;\\nuniform sampler2D u_texture;\\nmediump vec4 gauss4(mediump vec2 dir) {\\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas * u_sigmas));\\n}\\nmediump float gauss1(mediump vec2 dir) {\\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas[3] * u_sigmas[3]));\\n}\\nmediump vec4 selectChannel(mediump vec4 sample) {\\n  return u_channelSelector * sample;\\n}\\nvoid accumGauss4(mediump float i, inout mediump vec4 tot, inout mediump vec4 weight) {\\n  mediump vec4 w = gauss4(i * u_direction.xy);\\n  tot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw)) * w;\\n  weight += w;\\n}\\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\\n  mediump float w = gauss1(i * u_direction.xy);\\n  tot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\\n  weight += w;\\n}\\nvoid main(void) {\\n  mediump float tot = 0.0;\\n  mediump float weight = 0.0;\\n  accumGauss1(-4.0, tot, weight);\\n  accumGauss1(-3.0, tot, weight);\\n  accumGauss1(-2.0, tot, weight);\\n  accumGauss1(-1.0, tot, weight);\\n  accumGauss1(0.0, tot, weight);\\n  accumGauss1(1.0, tot, weight);\\n  accumGauss1(2.0, tot, weight);\\n  accumGauss1(3.0, tot, weight);\\n  accumGauss1(4.0, tot, weight);\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\\n}\",\"highlight.frag\":\"varying mediump vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform mediump vec4 u_sigmas;\\nuniform sampler2D u_shade;\\nuniform mediump vec2 u_minMaxDistance;\\nmediump float estimateDistance() {\\n  mediump float sigma = u_sigmas[3];\\n  mediump float y = texture2D(u_texture, v_texcoord)[3];\\n  const mediump float y0 = 0.5;\\n  mediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * sigma);\\n  mediump float d = (y - y0) / m0;\\n  return d;\\n}\\nmediump vec4 shade(mediump float d) {\\n  mediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\\n  mappedDistance = clamp(mappedDistance, 0.0, 1.0);\\n  return texture2D(u_shade, vec2(mappedDistance, 0.5));\\n}\\nvoid main(void) {\\n  mediump float d = estimateDistance();\\n  gl_FragColor = shade(d);\\n}\",\"textured.vert\":\"attribute mediump vec2 a_position;\\nattribute mediump vec2 a_texcoord;\\nvarying mediump vec2 v_texcoord;\\nvoid main(void) {\\n  gl_Position = vec4(a_position, 0.0, 1.0);\\n  v_texcoord = a_texcoord;\\n}\"},magnifier:{\"magnifier.frag\":\"uniform lowp vec4 u_background;\\nuniform mediump sampler2D u_readbackTexture;\\nuniform mediump sampler2D u_maskTexture;\\nuniform mediump sampler2D u_overlayTexture;\\nuniform bool u_maskEnabled;\\nuniform bool u_overlayEnabled;\\nvarying mediump vec2 v_texCoord;\\nconst lowp float barrelFactor = 1.1;\\nlowp vec2 barrel(lowp vec2 uv) {\\n  lowp vec2 uvn = uv * 2.0 - 1.0;\\n  if (uvn.x == 0.0 && uvn.y == 0.0) {\\n    return vec2(0.5, 0.5);\\n  }\\n  lowp float theta = atan(uvn.y, uvn.x);\\n  lowp float r = pow(length(uvn), barrelFactor);\\n  return r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\\n}\\nvoid main(void)\\n{\\n  lowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\\n  color = (color + (1.0 - color.a) * u_background);\\n  lowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\\n  color *= mask;\\n  lowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\\n  overlayColor.rgb *= overlayColor.a;\\n  gl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\\n}\",\"magnifier.vert\":\"precision mediump float;\\nattribute mediump vec2 a_pos;\\nuniform mediump vec4 u_drawPos;\\nvarying mediump vec2 v_texCoord;\\nvoid main(void)\\n{\\n  v_texCoord = a_pos;\\n  gl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\\n}\"},materials:{\"attributeData.glsl\":\"uniform highp sampler2D u_attributeData0;\\nuniform highp sampler2D u_attributeData1;\\nuniform highp sampler2D u_attributeData2;\\nuniform highp sampler2D u_attributeData3;\\nuniform highp int u_attributeTextureSize;\\nhighp vec2 getAttributeDataCoords(in highp vec4 id) {\\n  highp vec4 texel = unpackDisplayIdTexel(id);\\n  highp float size = float(u_attributeTextureSize);\\n  highp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256 + int(texel.a) * 256 * 256 * 256);\\n  highp float col = mod(u32, size);\\n  highp float row = (u32 - col) / size;\\n  highp float u = col / size;\\n  highp float v = row / size;\\n  return vec2(u, v);\\n}\\nhighp vec4 getAttributeData0(in highp vec4 id) {\\n  vec2 coords = getAttributeDataCoords(id);\\n  return texture2D(u_attributeData0, coords);\\n}\\nhighp vec4 getAttributeData1(in highp vec4 id) {\\n  highp vec2 coords = getAttributeDataCoords(id);\\n  return texture2D(u_attributeData1, coords);\\n}\\nhighp vec4 getAttributeData2(in highp vec4 id) {\\n  highp vec2 coords = getAttributeDataCoords(id);\\n  return texture2D(u_attributeData2, coords);\\n}\\nhighp vec4 getAttributeData3(in highp vec4 id) {\\n  highp vec2 coords = getAttributeDataCoords(id);\\n  return texture2D(u_attributeData3, coords);\\n}\\nfloat u88VVToFloat(in vec2 v) {\\n  bool isMagic = v.x == 255.0 && v.y == 255.0;\\n  if (isMagic) {\\n    return NAN_MAGIC_NUMBER;\\n  }\\n  return (v.x + v.y * float(0x100)) - 32768.0;\\n}\",\"constants.glsl\":\"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\\nconst float POSITION_PRECISION = 1.0 / 8.0;\\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\\nconst float SOFT_EDGE_RATIO = 1.0;\\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\\nconst float THIN_LINE_HALF_WIDTH = 1.0;\\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\\nconst float OFFSET_PRECISION = 1.0 / 8.0;\\nconst float OUTLINE_SCALE = 1.0 / 5.0;\\nconst float SDF_FONT_SIZE = 24.0;\\nconst float MAX_SDF_DISTANCE = 8.0;\\nconst float PLACEMENT_PADDING = 8.0;\\nconst float EPSILON = 0.0000001;\\nconst int MAX_FILTER_COUNT = 2;\\nconst int ATTR_VV_SIZE = 0;\\nconst int ATTR_VV_COLOR = 1;\\nconst int ATTR_VV_OPACITY = 2;\\nconst int ATTR_VV_ROTATION = 3;\\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\",fill:{\"common.glsl\":\"#ifdef PATTERN\\nuniform mediump vec2 u_mosaicSize;\\n#endif\\n#ifdef DOT_DENSITY\\nuniform lowp vec4 u_isActive[ 2 ];\\nuniform highp float u_dotValue;\\nuniform highp float u_tileDotsOverArea;\\nuniform highp float u_dotTextureDotCount;\\nuniform mediump float u_tileZoomFactor;\\n#endif\\nvarying vec3 v_pos;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying highp vec4 v_id;\\nvarying highp float v_flags;\\n#ifdef PATTERN\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef DOT_DENSITY\\nvarying highp vec2 v_dotTextureCoords;\\nvarying highp vec4 v_dotThresholds[ 2 ];\\n#endif\",\"fill.frag\":\"precision highp float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/fill/common.glsl>\\n#ifdef PATTERN\\nuniform lowp sampler2D u_texture;\\n#endif\\n#ifdef DOT_DENSITY\\nuniform mediump mat4 u_dotColors[ 2 ];\\nuniform sampler2D u_dotTextures[ 2 ];\\nuniform vec4 u_dotBackgroundColor;\\n#endif\\nvoid main() {\\n#ifdef ID\\n  gl_FragColor = v_id;\\n#elif defined(PATTERN)\\n  mediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\n  mediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\\n  lowp vec4 color = texture2D(u_texture, samplePos);\\n  gl_FragColor = v_opacity * v_color * color;\\n#elif defined(DOT_DENSITY) && !defined(HIGHLIGHT)\\n  vec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\\n  vec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\\n  vec4 difference0 = v_dotThresholds[0] - textureThresholds0;\\n  vec4 difference1 = v_dotThresholds[1] - textureThresholds1;\\n#ifdef DD_DOT_BLENDING\\n  vec4 isPositive0 = step(0.0, difference0);\\n  vec4 isPositive1 = step(0.0, difference1);\\n  float weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\\n  float lessThanEqZero = step(weightSum, 0.0);\\n  float greaterThanZero = 1.0 - lessThanEqZero ;\\n  float divisor = (weightSum + lessThanEqZero);\\n  vec4 weights0 = difference0 * isPositive0 / divisor;\\n  vec4 weights1 = difference1 * isPositive1 / divisor;\\n  vec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\\n  vec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\\n#else\\n  float diffMax = max(max4(difference0), max4(difference1));\\n  float lessThanZero = step(diffMax, 0.0);\\n  float greaterOrEqZero = 1.0 - lessThanZero;\\n  vec4 isMax0 = step(diffMax, difference0);\\n  vec4 isMax1 = step(diffMax, difference1);\\n  vec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\\n  vec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\\n#endif\\n  gl_FragColor = preEffectColor;\\n#else\\n  gl_FragColor = v_opacity * v_color;\\n#endif\\n#ifdef HIGHLIGHT\\n  gl_FragColor.a = 1.0;\\n#endif\\n}\",\"fill.vert\":\"precision highp float;\\n#ifdef DOT_DENSITY\\nattribute float a_inverseArea;\\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\\nvec4 a_aux3 = vec4(0.0);\\n#else\\nattribute vec4 a_color;\\nattribute vec4 a_tlbr;\\nattribute vec4 a_aux1;\\nattribute vec2 a_aux2;\\nattribute vec4 a_aux3;\\n#endif\\n#include <materials/vcommon.glsl>\\n#include <materials/fill/common.glsl>\\n#ifdef DOT_DENSITY\\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\\n  return featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\\n}\\n#endif\\nvoid main()\\n{\\n  INIT;\\n  float a_bitSet = a_aux3.a;\\n  v_color     = getColor(a_color, a_bitSet, 0);\\n  v_opacity   = getOpacity();\\n  v_id        = norm(a_id);\\n  v_pos       = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\\n  v_flags     = getFilterFlags();\\n#ifdef PATTERN\\n  vec2 aux2 = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_aux2;\\n  float width = u_zoomFactor * a_aux1.x * aux2.x;\\n  float height = u_zoomFactor * a_aux1.y * aux2.y;\\n  float angle = C_256_TO_RAD * a_aux3.z;\\n  float sinA = sin(angle);\\n  float cosA = cos(angle);\\n  mat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\\n                           -sinA / width, cosA / height, 0,\\n                            0,            0,             1);\\n  vec2 symbolOffset = (a_aux1.zw - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\\n  v_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\\n  v_tlbr = a_tlbr / u_mosaicSize.xyxy;\\n#elif defined(DOT_DENSITY)\\n  vec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\\n  vec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\\n  float size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\\n  v_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\\n  v_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\\n  v_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\\n#endif\\n  gl_Position = vec4(applyFilter(v_color, v_pos, v_flags), 1.0);\\n}\"},icon:{\"common.glsl\":\"uniform lowp vec2 u_mosaicSize;\\nvarying lowp vec4 v_color;\\nvarying highp vec4 v_id;\\nvarying highp vec4 v_sizeTex;\\nvarying mediump vec3 v_pos;\\nvarying highp float v_filters;\\nvarying lowp float v_opacity;\\n#ifdef SDF\\nvarying lowp vec4 v_outlineColor;\\nvarying mediump float v_outlineWidth;\\nvarying mediump float v_distRatio;\\nvarying mediump float v_overridingOutlineColor;\\nvarying mediump float v_isThin;\\n#endif\",\"icon.frag\":\"precision mediump float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <util/encoding.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/icon/common.glsl>\\nuniform lowp sampler2D u_texture;\\nvoid main()\\n{\\n  vec2 v_size = v_sizeTex.xy;\\n  vec2 v_tex  = v_sizeTex.zw;\\n#ifdef SDF\\n  lowp vec4 fillPixelColor = v_color;\\n  float d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\\n  float size = max(v_size.x, v_size.y);\\n  float dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\\n  fillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\n  float outlineWidth = v_outlineWidth;\\n  #ifdef HIGHLIGHT\\n    outlineWidth = max(outlineWidth, 4.0 * v_isThin);\\n  #endif\\n  if (outlineWidth > 0.25) {\\n    lowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\\n    float clampedOutlineSize = min(outlineWidth, size);\\n    outlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\\n    gl_FragColor = v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\\n  }\\n  else {\\n    gl_FragColor = v_opacity * fillPixelColor;\\n  }\\n#else\\n   lowp vec4 texColor = texture2D(u_texture, v_tex);\\n   gl_FragColor = v_opacity * texColor;\\n#endif\\n#ifdef HIGHLIGHT\\n  gl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"icon.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_outlineColor;\\nattribute vec4 a_sizeAndOutlineWidth;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nattribute vec4 a_bitSetAndDistRatio;\\n#include <materials/vcommon.glsl>\\n#include <materials/icon/common.glsl>\\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\\n#ifdef VV_SIZE\\n  float r = getSize(baseSize.y) / referenceSize;\\n  baseSize.xy *= r;\\n  offset.xy *= r;\\n  float scaleSymbolProportionally = getBit(bitSet, 3);\\n  outlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\\n#endif\\n  return baseSize;\\n}\\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\\n  float isMapAligned = getBit(a_bitSet, 0);\\n  vec3  offset       = getRotation() * vec3(in_offset, 0.0);\\n  return getMatrix(isMapAligned) * offset;\\n}\\nvoid main()\\n{\\n  INIT;\\n  vec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\\n  vec2  a_offset = a_vertexOffset / 16.0;\\n  float a_outlineSize = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\\n  float a_bitSet = a_bitSetAndDistRatio.z;\\n  vec2 v_size = getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\\n  vec2 v_tex      = a_texCoords / u_mosaicSize;\\n  v_color    = getColor(a_color, a_bitSet, 1);\\n  v_opacity  = getOpacity();\\n  v_id       = norm(a_id);\\n  v_filters  = getFilterFlags();\\n  v_pos      = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\\n  v_sizeTex  = vec4(v_size.xy, v_tex.xy);\\n#ifdef SDF\\n  v_isThin   = getBit(a_bitSet, 2);\\n  #ifdef VV_COLOR\\n    v_overridingOutlineColor = v_isThin;\\n  #else\\n    v_overridingOutlineColor = 0.0;\\n  #endif\\n  v_outlineWidth = min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\\n  v_outlineColor = a_outlineColor;\\n  v_distRatio = a_bitSetAndDistRatio.w / 126.0;\\n#endif\\n  gl_Position = vec4(applyFilter(v_color, v_pos, v_filters), 1.0);\\n}\"},label:{\"common.glsl\":\"uniform mediump float u_zoomLevel;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_mapAligned;\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying mediump vec2 v_tex;\\nvarying mediump vec4 v_color;\\nvarying lowp vec4 v_animation;\",\"label.frag\":\"#include <materials/text/text.frag>\",\"label.vert\":\"precision highp float;\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texAndSize;\\nattribute vec4 a_refSymbolAndPlacementOffset;\\nattribute vec4 a_glyphData;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHalo;\\nuniform float u_zoomLevel;\\nuniform float u_mapRotation;\\nuniform float u_mapAligned;\\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\\n  float glyphAngle = angle * 360.0 / 254.0;\\n  float mapAngle = u_mapRotation * 360.0 / 254.0;\\n  float diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\\n  float z = 0.0;\\n  z += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_zoomLevel)));\\n  z += u_mapAligned * 2.0 * step(90.0, diffAngle);\\n  z += 2.0 * (1.0 - step(u_zoomLevel, maxZoom));\\n  return z;\\n}\\nvoid main()\\n{\\n  INIT;\\n  float groupMinZoom    = getMinZoom();\\n  float glyphMinZoom    = a_glyphData.x;\\n  float glyphMaxZoom    = a_glyphData.y;\\n  float glyphAngle      = a_glyphData.z;\\n  float a_minZoom          = max(groupMinZoom, glyphMinZoom);\\n  float a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\\n  vec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\\n  float a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\\n  float fontSize           = a_texAndSize.z;\\n  float haloSize           = a_texAndSize.w * OUTLINE_SCALE;\\n  vec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\\n  vec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\\n  float z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\\n  float fontScale    = fontSize / SDF_FONT_SIZE;\\n  float halfSize     = getSize(a_refSymbolSize) / 2.0;\\n  float animation    = pow(getAnimationState(), vec4(2.0)).r;\\n  v_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\\n  v_opacity   = 1.0;\\n  v_tex       = a_texCoords / u_mosaicSize;\\n  v_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\\n  v_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\n  vec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\\n  vec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\\n  vec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\\n  gl_Position = vec4(applyFilterLabels(v_color, v_pos, getFilterFlags()), 1.0);\\n#ifdef DEBUG\\n  v_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\\n#endif\\n}\"},line:{\"common.glsl\":\"varying lowp vec4 v_color;\\nvarying highp vec4 v_id;\\nvarying mediump vec2 v_normal;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp float v_opacity;\\nvarying highp vec3 v_pos;\\n#ifdef PATTERN\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_patternSize;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nvarying highp float v_accumulatedDistance;\\n#endif\",\"line.frag\":\"precision lowp float;\\n#include <util/encoding.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/line/common.glsl>\\nuniform lowp float u_blur;\\nuniform mediump float u_zoomFactor;\\n#if defined(PATTERN) || defined(SDF)\\nuniform sampler2D u_texture;\\n#endif\\n#ifdef SDF\\nconst float sdfPatternHalfWidth = 15.5;\\nconst float widthFactor = 2.0;\\n#endif\\nvoid main()\\n{\\n  mediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(v_lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\n  mediump float fragDist = length(v_normal) * v_lineHalfWidth;\\n  lowp float alpha = clamp(thinLineFactor * (v_lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\\n#if defined(SDF) && !defined(HIGHLIGHT)\\n  mediump float lineHalfWidth = widthFactor * v_lineHalfWidth;\\n  mediump float lineWidthRatio = lineHalfWidth / sdfPatternHalfWidth;\\n  mediump float relativeTexX = mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / (lineWidthRatio * v_patternSize.x), 1.0);\\n  mediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\\n  mediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\\n  mediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\\n  float dist = d * lineHalfWidth;\\n  lowp vec4 fillPixelColor = v_opacity * alpha * clamp(0.5 - dist, 0.0, 1.0) * v_color;\\n  gl_FragColor = fillPixelColor;\\n#elif defined(PATTERN) && !defined(HIGHLIGHT)\\n  mediump float lineHalfWidth = v_lineHalfWidth;\\n  mediump float adjustedPatternWidth = v_patternSize.x * 2.0 * lineHalfWidth / v_patternSize.y;\\n  mediump float relativeTexX = mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / adjustedPatternWidth, 1.0);\\n  mediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\\n  mediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexY, relativeTexX));\\n  lowp vec4 color = texture2D(u_texture, texCoord);\\n  gl_FragColor = v_opacity * alpha * v_color * color;\\n#else\\n  gl_FragColor = v_opacity * alpha * v_color;\\n#endif\\n#ifdef HIGHLIGHT\\n  gl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"line.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_offsetAndNormal;\\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\\nattribute vec4 a_tlbr;\\nattribute vec4 a_segmentDirection;\\nattribute vec2 a_aux;\\n#include <materials/vcommon.glsl>\\n#include <materials/line/common.glsl>\\nconst float SCALE = 1.0 / 31.0;\\nconst float WIDTH_SCALE = 1.0 / 1024.0;\\nfloat getBaseLineHalfWidth(in float in_lineHalfWidth) {\\n#ifdef VV_SIZE\\n  float referenceHalfWidth = a_aux.x * WIDTH_SCALE;\\n  float lineWidth = 2.0 * in_lineHalfWidth;\\n  return 0.5 * (in_lineHalfWidth / referenceHalfWidth) * getSize(lineWidth);\\n#else\\n  return in_lineHalfWidth;\\n#endif\\n}\\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\\n  float halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\\n#ifdef HIGHLIGHT\\n  halfWidth = max(halfWidth, 2.0);\\n#endif\\n  return halfWidth;\\n}\\nvec2 getDist(in vec2 offset, in float halfWidth) {\\n  float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\n#if defined(SDF) && !defined(HIGHLIGHT)\\n  thinLineFactor *= 2.0;\\n#endif\\n  return thinLineFactor * halfWidth * offset * SCALE;\\n}\\nvoid main()\\n{\\n  INIT;\\n  float a_bitSet          = a_segmentDirection.w;\\n  float a_accumulatedDist = a_accumulatedDistanceAndHalfWidth.x;\\n  float a_lineHalfWidth   = a_accumulatedDistanceAndHalfWidth.y * WIDTH_SCALE;\\n  float aa                = 0.5 * u_antialiasing;\\n  vec2  a_offset          = a_offsetAndNormal.xy;\\n  float baseWidth = getBaseLineHalfWidth(a_lineHalfWidth);\\n  float halfWidth = getLineHalfWidth(baseWidth, aa);\\n  float z         = 2.0 * step(baseWidth, 0.0);\\n  vec2  dist      = getDist(a_offset, halfWidth);\\n  vec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\\n  vec3  pos       = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + offset;\\n  v_color         = getColor(a_color, a_bitSet, 0);\\n  v_opacity       = getOpacity();\\n  v_lineHalfWidth = halfWidth;\\n  v_id            = norm(a_id);\\n  v_normal        = a_offsetAndNormal.zw * SCALE;\\n  v_pos           = vec3(pos.xy, z);\\n#ifdef PATTERN\\n  v_tlbr          = a_tlbr / u_mosaicSize.xyxy;\\n  v_patternSize   = vec2(a_tlbr.z - a_tlbr.x, a_tlbr.w - a_tlbr.y);\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\n  v_accumulatedDistance = a_accumulatedDist + dot(SCALE * a_segmentDirection.xy, dist / u_zoomFactor);\\n#endif\\n  gl_Position = vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\\n}\"},text:{\"common.glsl\":\"uniform highp vec2 u_mosaicSize;\\nvarying highp vec4 v_id;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying highp vec2 v_tex;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying lowp float v_transparency;\",\"text.frag\":\"precision mediump float;\\n#include <materials/text/common.glsl>\\nuniform lowp sampler2D u_texture;\\nvoid main()\\n{\\n  float SDF_CUTOFF = (2.0 / 8.0);\\n  float SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\\n  lowp float dist = texture2D(u_texture, v_tex).a;\\n  mediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\\n#ifdef HIGHLIGHT\\n  edge /= 2.0;\\n#endif\\n  lowp float aa = v_antialiasingWidth;\\n  lowp float alpha = smoothstep(edge - aa, edge + aa, dist);\\n  gl_FragColor = alpha * v_color * v_opacity;\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"text.vert\":\"precision highp float;\\n#include <materials/utils.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texFontSize;\\nattribute vec4 a_aux;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHalo;\\nfloat getTextSize(inout vec2 offset, in float baseSize, in float referenceSize) {\\n#ifdef VV_SIZE\\n   float ratio = baseSize / referenceSize;\\n   baseSize = ratio * getSize(baseSize);\\n#endif\\n  return baseSize;\\n}\\nvoid main()\\n{\\n  INIT;\\n  float a_bitSet      = a_aux.w;\\n  float a_fontSize    = a_texFontSize.z;\\n  vec2  a_offset      = a_vertexOffset * OFFSET_PRECISION;\\n  vec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\\n  float fontSize      = getTextSize(a_offset, a_fontSize, a_aux.z * a_aux.z / 256.0);\\n  float scaleFactor   = fontSize / a_fontSize;\\n  float fontScale     = fontSize / SDF_FONT_SIZE;\\n  vec3  offset        = getRotation() * vec3(scaleFactor * a_offset, 0.0);\\n  mat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\\n  v_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\\n  v_opacity = getOpacity();\\n  v_id      = norm(a_id);\\n  v_tex     = a_texCoords / u_mosaicSize;\\n  v_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\\n  v_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\\n  v_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\n  gl_Position =  vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\\n}\"},\"utils.glsl\":\"float rshift(in float u32, in int amount) {\\n  return floor(u32 / pow(2.0, float(amount)));\\n}\\nfloat getBit(in float bitset, in int bitIndex) {\\n  float offset = pow(2.0, float(bitIndex));\\n  return mod(floor(bitset / offset), 2.0);\\n}\\nfloat getFilterBit(in float bitset, in int bitIndex) {\\n  return getBit(bitset, bitIndex + 1);\\n}\\nfloat getHighlightBit(in float bitset) {\\n  return getBit(bitset, 0);\\n}\\nhighp vec4 unpackDisplayIdTexel(in highp vec4 bitset) {\\n  float isAggregate = getBit(bitset.a, 7);\\n  return (1.0 - isAggregate) * bitset + isAggregate * (vec4(bitset.rgba) - vec4(0.0, 0.0, 0.0, float(0x80)));\\n}\\nvec4 unpack(in float u32) {\\n  float r = mod(rshift(u32, 0), 255.0);\\n  float g = mod(rshift(u32, 8), 255.0);\\n  float b = mod(rshift(u32, 16), 255.0);\\n  float a = mod(rshift(u32, 24), 255.0);\\n  return vec4(r, g, b, a);\\n}\\nvec4 norm(in vec4 v) {\\n  return v /= 255.0;\\n}\\nfloat max4(vec4 target) {\\n  return max(max(max(target.x, target.y), target.z), target.w);\\n}\\nvec2 unpack_u8_nf32(vec2 bytes) {\\n  return (bytes - 127.0) / 127.0;\\n}\",\"vcommon.glsl\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/vv.glsl>\\nattribute vec2 a_pos;\\nattribute highp vec4 a_id;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform highp mat3 u_displayViewMat3;\\nuniform highp float u_pixelRatio;\\nuniform mediump float u_zoomFactor;\\nuniform mediump float u_antialiasing;\\nvec4 VV_ADATA = vec4(0.0);\\nvoid loadVisualVariableData(inout vec4 target) {\\n#ifdef OES_TEXTURE_FLOAT\\n  target.rgba = getAttributeData2(a_id);\\n#else\\n  vec4 data0 = getAttributeData2(a_id);\\n  vec4 data1 = getAttributeData3(a_id);\\n  target.r = u88VVToFloat(data0.rg * 255.0);\\n  target.g = u88VVToFloat(data0.ba * 255.0);\\n  target.b = u88VVToFloat(data1.rg * 255.0);\\n  target.a = u88VVToFloat(data1.ba * 255.0);\\n#endif\\n}\\n#ifdef VV\\n  #define INIT loadVisualVariableData(VV_ADATA)\\n#else\\n  #define INIT\\n#endif\\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\\n#ifdef VV_COLOR\\n  float isColorLocked   = getBit(a_bitSet, index);\\n  return getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\\n#else\\n  return a_color;\\n#endif\\n}\\nfloat getOpacity() {\\n#ifdef VV_OPACITY\\n  return getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\\n#else\\n  return 1.0;\\n#endif\\n}\\nfloat getSize(in float in_size) {\\n#ifdef VV_SIZE\\n  return getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\\n#else\\n  return in_size;\\n#endif\\n}\\nmat3 getRotation() {\\n#ifdef VV_ROTATION\\n  return getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\\n#else\\n  return mat3(1.0);\\n#endif\\n}\\nfloat getFilterFlags() {\\n#ifdef IGNORES_SAMPLER_PRECISION\\n  return ceil(getAttributeData0(a_id).x * 255.0);\\n#else\\n  return getAttributeData0(a_id).x * 255.0;\\n#endif\\n}\\nvec4 getAnimationState() {\\n  return getAttributeData1(a_id);\\n}\\nfloat getMinZoom() {\\n  vec4 data0 = getAttributeData0(a_id) * 255.0;\\n  return data0.g;\\n}\\nmat3 getMatrix(float isMapAligned) {\\n  return isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\\n}\\nvec3 applyFilter(inout vec4 color, inout vec3 pos, in float filterFlags) {\\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\\n#ifdef INSIDE\\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\\n#elif defined(OUTSIDE)\\n  pos.z += 2.0 * getFilterBit(filterFlags, 1);\\n#elif defined(HIGHLIGHT)\\n  pos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\\n#endif\\n  return pos;\\n}\\nvec3 applyFilterLabels(inout vec4 color, inout vec3 pos, in float filterFlags) {\\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\\n#ifndef OUTSIDE_LABELS_VISIBLE\\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\\n#endif\\n  return pos;\\n}\",\"vv.glsl\":\"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\\n  #define VV_SIZE\\n#endif\\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\\n  #define VV\\n#endif\\n#ifdef VV_COLOR\\nuniform highp float u_vvColorValues[8];\\nuniform vec4 u_vvColors[8];\\n#endif\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nuniform highp vec4 u_vvSizeMinMaxValue;\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nuniform highp float u_vvSizeScaleStopsValue;\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nuniform highp float u_vvSizeFieldStopsValues[6];\\nuniform float u_vvSizeFieldStopsSizes[6];\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\\n#endif\\n#ifdef VV_OPACITY\\nuniform highp float u_vvOpacityValues[8];\\nuniform float u_vvOpacities[8];\\n#endif\\n#ifdef VV_ROTATION\\nuniform lowp float u_vvRotationType;\\n#endif\\nbool isNan(float val) {\\n  return (val == NAN_MAGIC_NUMBER);\\n}\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\\n  if (isNan(sizeValue)) {\\n    return fallback;\\n  }\\n  float interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\\n  interpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\\n  return u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\\n}\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nconst int VV_SIZE_N = 6;\\nfloat getVVStopsSize(float sizeValue, float fallback) {\\n  if (isNan(sizeValue)) {\\n    return fallback;\\n  }\\n  if (sizeValue <= u_vvSizeFieldStopsValues[0]) {\\n    return u_vvSizeFieldStopsSizes[0];\\n  }\\n  for (int i = 1; i < VV_SIZE_N; ++i) {\\n    if (u_vvSizeFieldStopsValues[i] >= sizeValue) {\\n      float f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\\n      return mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\\n    }\\n  }\\n  return u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\\n}\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nfloat getVVUnitValue(float sizeValue, float fallback) {\\n  if (isNan(sizeValue)) {\\n    return fallback;\\n  }\\n  return u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\\n}\\n#endif\\n#ifdef VV_OPACITY\\nconst int VV_OPACITY_N = 8;\\nfloat getVVOpacity(float opacityValue) {\\n  if (isNan(opacityValue)) {\\n    return 1.0;\\n  }\\n  if (opacityValue <= u_vvOpacityValues[0]) {\\n    return u_vvOpacities[0];\\n  }\\n  for (int i = 1; i < VV_OPACITY_N; ++i) {\\n    if (u_vvOpacityValues[i] >= opacityValue) {\\n      float f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\\n      return mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\\n    }\\n  }\\n  return u_vvOpacities[VV_OPACITY_N - 1];\\n}\\n#endif\\n#ifdef VV_ROTATION\\nmat4 getVVRotation(float rotationValue) {\\n  if (isNan(rotationValue)) {\\n    return mat4(1, 0, 0, 0,\\n                0, 1, 0, 0,\\n                0, 0, 1, 0,\\n                0, 0, 0, 1);\\n  }\\n  float rotation = rotationValue;\\n  if (u_vvRotationType == 1.0) {\\n    rotation = 90.0 - rotation;\\n  }\\n  float angle = C_DEG_TO_RAD * rotation;\\n  float sinA = sin(angle);\\n  float cosA = cos(angle);\\n  return mat4(cosA, sinA, 0, 0,\\n              -sinA,  cosA, 0, 0,\\n              0,     0, 1, 0,\\n              0,     0, 0, 1);\\n}\\nmat3 getVVRotationMat3(float rotationValue) {\\n  if (isNan(rotationValue)) {\\n    return mat3(1, 0, 0,\\n                0, 1, 0,\\n                0, 0, 1);\\n  }\\n  float rotation = rotationValue;\\n  if (u_vvRotationType == 1.0) {\\n    rotation = 90.0 - rotation;\\n  }\\n  float angle = C_DEG_TO_RAD * -rotation;\\n  float sinA = sin(angle);\\n  float cosA = cos(angle);\\n  return mat3(cosA, -sinA, 0,\\n             sinA, cosA, 0,\\n              0,    0,    1);\\n}\\n#endif\\n#ifdef VV_COLOR\\nconst int VV_COLOR_N = 8;\\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\\n  if (isNan(colorValue) || isColorLocked == 1.0) {\\n    return fallback;\\n  }\\n  if (colorValue <= u_vvColorValues[0]) {\\n    return u_vvColors[0];\\n  }\\n  for (int i = 1; i < VV_COLOR_N; ++i) {\\n    if (u_vvColorValues[i] >= colorValue) {\\n      float f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\\n      return mix(u_vvColors[i-1], u_vvColors[i], f);\\n    }\\n  }\\n  return u_vvColors[VV_COLOR_N - 1];\\n}\\n#endif\\nfloat getVVSize(in float size, in float vvSize)  {\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\n  return getVVMinMaxSize(vvSize, size);\\n#elif defined(VV_SIZE_SCALE_STOPS)\\n  return u_vvSizeScaleStopsValue;\\n#elif defined(VV_SIZE_FIELD_STOPS)\\n  float outSize = getVVStopsSize(vvSize, size);\\n  return isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_UNIT_VALUE)\\n  return getVVUnitValue(vvSize, size);\\n#else\\n  return size;\\n#endif\\n}\"},\"post-processing\":{blit:{\"blit.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\n  gl_FragColor = texture2D(u_texture, v_uv);\\n}\"},bloom:{composite:{\"composite.frag\":\"precision mediump float;\\nvarying vec2 v_uv;\\nuniform sampler2D u_blurTexture1;\\nuniform sampler2D u_blurTexture2;\\nuniform sampler2D u_blurTexture3;\\nuniform sampler2D u_blurTexture4;\\nuniform sampler2D u_blurTexture5;\\nuniform float u_bloomStrength;\\nuniform float u_bloomRadius;\\nuniform float u_bloomFactors[NUMMIPS];\\nuniform vec3 u_bloomTintColors[NUMMIPS];\\nfloat lerpBloomFactor(const in float factor) {\\n  float mirrorFactor = 1.2 - factor;\\n  return mix(factor, mirrorFactor, u_bloomRadius);\\n}\\nvoid main() {\\n  gl_FragColor = u_bloomStrength * (\\n    lerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\\n    lerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\\n    lerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\\n    lerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\\n    lerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\\n  );\\n}\"},gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\n#define SIGMA RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\n  vec2 invSize = 1.0 / u_texSize;\\n  float fSigma = float(SIGMA);\\n  float weightSum = gaussianPdf(0.0, fSigma);\\n  vec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\n  for (int i = 1; i < KERNEL_RADIUS; i ++) {\\n    float x = float(i);\\n    float w = gaussianPdf(x, fSigma);\\n    vec2 uvOffset = u_direction * invSize * x;\\n    vec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\n    vec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\n    pixelColorSum += (sample1 + sample2) * w;\\n    weightSum += 2.0 * w;\\n  }\\n  gl_FragColor = pixelColorSum /weightSum;\\n}\"},luminosityHighPass:{\"luminosityHighPass.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nuniform vec3 u_defaultColor;\\nuniform float u_defaultOpacity;\\nuniform float u_luminosityThreshold;\\nuniform float u_smoothWidth;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec4 texel = texture2D(u_texture, v_uv);\\n  vec3 luma = vec3(0.299, 0.587, 0.114);\\n  float v = dot(texel.xyz, luma);\\n  vec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\\n  float alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\\n  gl_FragColor = mix(outputColor, texel, alpha);\\n}\"}},blur:{gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nuniform float u_sigma;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\n  vec2 invSize = 1.0 / u_texSize;\\n  float fSigma = u_sigma;\\n  float weightSum = gaussianPdf(0.0, fSigma);\\n  vec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\n  for (int i = 1; i < KERNEL_RADIUS; i ++) {\\n    float x = float(i);\\n    float w = gaussianPdf(x, fSigma);\\n    vec2 uvOffset = u_direction * invSize * x;\\n    vec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\n    vec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\n    pixelColorSum += (sample1 + sample2) * w;\\n    weightSum += 2.0 * w;\\n  }\\n  gl_FragColor = pixelColorSum /weightSum;\\n}\"},\"radial-blur\":{\"radial-blur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nconst float sampleDist = 1.0;\\nconst float sampleStrength = 2.2;\\nvoid main(void) {\\n    float samples[10];\\n    samples[0] = -0.08;\\n    samples[1] = -0.05;\\n    samples[2] = -0.03;\\n    samples[3] = -0.02;\\n    samples[4] = -0.01;\\n    samples[5] =  0.01;\\n    samples[6] =  0.02;\\n    samples[7] =  0.03;\\n    samples[8] =  0.05;\\n    samples[9] =  0.08;\\n    vec2 dir = 0.5 - v_uv;\\n    float dist = sqrt(dir.x * dir.x + dir.y * dir.y);\\n    dir = dir / dist;\\n    vec4 color = texture2D(u_colorTexture,v_uv);\\n    vec4 sum = color;\\n    for (int i = 0; i < 10; i++) {\\n      sum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\\n    }\\n    sum *= 1.0 / 11.0;\\n    float t = dist * sampleStrength;\\n    t = clamp(t, 0.0, 1.0);\\n    gl_FragColor = mix(color, sum, t);\\n}\"}},dra:{\"dra.frag\":\"precision mediump float;\\nuniform sampler2D u_minColor;\\nuniform sampler2D u_maxColor;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec4 minColor = texture2D(u_minColor, vec2(0.5));\\n  vec4 maxColor = texture2D(u_maxColor, vec2(0.5));\\n  vec4 color = texture2D(u_texture, v_uv);\\n  vec3 minColorUnpremultiply = minColor.rgb / minColor.a;\\n  vec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\\n  vec3 colorUnpremultiply = color.rgb / color.a;\\n  vec3 range = maxColorUnpremultiply - minColorUnpremultiply;\\n  gl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\\n}\",\"min-max\":{\"min-max.frag\":\"#extension GL_EXT_draw_buffers : require\\nprecision mediump float;\\n#define CELL_SIZE 2\\nuniform sampler2D u_minTexture;\\nuniform sampler2D u_maxTexture;\\nuniform vec2 u_srcResolution;\\nuniform vec2 u_dstResolution;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\\n  vec2 onePixel = vec2(1.0) / u_srcResolution;\\n  vec2 uv = (srcPixel + 0.5) / u_srcResolution;\\n  vec4 minColor = vec4(1.0);\\n  vec4 maxColor = vec4(0.0);\\n  for (int y = 0; y < CELL_SIZE; ++y) {\\n    for (int x = 0; x < CELL_SIZE; ++x) {\\n      vec2 offset = uv + vec2(x, y) * onePixel;\\n      minColor = min(minColor, texture2D(u_minTexture, offset));\\n      maxColor = max(maxColor, texture2D(u_maxTexture, offset));\\n    }\\n  }\\n  gl_FragData[0] = minColor;\\n  gl_FragData[1] = maxColor;\\n}\"}},\"drop-shadow\":{composite:{\"composite.frag\":\"precision mediump float;\\nuniform sampler2D u_layerFBOTexture;\\nuniform sampler2D u_blurTexture;\\nuniform vec4 u_shadowColor;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\\n  vec4 blurColor = texture2D(u_blurTexture, v_uv);\\n  gl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\\n}\"},\"drop-shadow.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nuniform highp mat3 u_displayViewMat3;\\nuniform highp vec2 u_offset;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec3 offset = u_displayViewMat3 * vec3(u_offset, 0.0);\\n  gl_Position = vec4(a_position, 0.0, 1.0) + vec4(offset, 0.0);\\n  v_uv = (a_position + 1.0) / 2.0;\\n}\"},\"edge-detect\":{\"frei-chen\":{\"frei-chen.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nvarying vec2 v_uv;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[9];\\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\\nvoid main() {\\n  G[0] = g0,\\n  G[1] = g1,\\n  G[2] = g2,\\n  G[3] = g3,\\n  G[4] = g4,\\n  G[5] = g5,\\n  G[6] = g6,\\n  G[7] = g7,\\n  G[8] = g8;\\n  mat3 I;\\n  float cnv[9];\\n  vec3 sample;\\n  for (float i = 0.0; i < 3.0; i++) {\\n    for (float j = 0.0; j < 3.0; j++) {\\n      sample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\\n      I[int(i)][int(j)] = length(sample);\\n    }\\n  }\\n  for (int i = 0; i < 9; i++) {\\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\n    cnv[i] = dp3 * dp3;\\n  }\\n  float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\\n  float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\\n  gl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\\n}\"},sobel:{\"sobel.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\\nvoid main() {\\n  mat3 I;\\n  float cnv[2];\\n  vec3 sample;\\n  G[0] = g0;\\n  G[1] = g1;\\n  for (float i = 0.0; i < 3.0; i++) {\\n    for (float j = 0.0; j < 3.0; j++) {\\n      sample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\n      I[int(i)][int(j)] = length(sample);\\n    }\\n  }\\n  for (int i = 0; i < 2; i++) {\\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\n    cnv[i] = dp3 * dp3;\\n  }\\n  gl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\\n}\"}},\"edge-enhance\":{\"edge-enhance.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\\nvoid main() {\\n  mat3 I;\\n  float cnv[2];\\n  vec3 sample;\\n  G[0] = g0;\\n  G[1] = g1;\\n  for (float i = 0.0; i < 3.0; i++) {\\n    for (float j = 0.0; j < 3.0; j++) {\\n      sample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\n      I[int(i)][int(j)] = length(sample);\\n    }\\n  }\\n  for (int i = 0; i < 2; i++) {\\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\n    cnv[i] = dp3 * dp3;\\n  }\\n  vec4 color = texture2D(u_colorTexture, v_uv);\\n  gl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\\n}\"},filterEffect:{\"filterEffect.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform mat4 u_coefficients;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec4 color = texture2D(u_colorTexture, v_uv);\\n  vec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\\n  float a = color.a;\\n  gl_FragColor = vec4(a * rgbw.rgb, a);\\n}\"},pp:{\"pp.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying vec2 v_uv;\\nvoid main() {\\n  gl_Position = vec4(a_position, 0.0, 1.0);\\n  v_uv = (a_position + 1.0) / 2.0;\\n}\"}},raster:{bitmap:{\"bitmap.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform highp vec2 u_coordScale;\\nuniform lowp float u_opacity;\\n#include <filtering/bicubic.glsl>\\nvoid main() {\\n#ifdef BICUBIC\\n  vec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\\n#else\\n  vec4 color = texture2D(u_texture, v_texcoord);\\n#endif\\n  float alpha = u_opacity * color.a;\\n  gl_FragColor = vec4(alpha * color.rgb, alpha);\\n}\",\"bitmap.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\n  v_texcoord = a_pos;\\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"},common:{\"common.glsl\":\"uniform sampler2D u_image;\\nuniform int u_bandCount;\\nuniform bool u_isFloatTexture;\\nuniform bool u_flipY;\\nuniform float u_opacity;\\nuniform int u_resampling;\\nuniform vec2 u_srcImageSize;\\n#ifdef APPLY_PROJECTION\\n#include <raster/common/projection.glsl>\\n#endif\\n#ifdef BICUBIC\\n#include <filtering/bicubic.glsl>\\n#endif\\n#ifdef BILINEAR\\n#include <filtering/bilinear.glsl>\\n#endif\\nvec2 getPixelLocation(vec2 coords) {\\n  vec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\\n#ifdef APPLY_PROJECTION\\n  targetLocation = projectPixelLocation(targetLocation);\\n#endif\\n  return targetLocation;\\n}\\nbool isOutside(vec2 coords){\\n   if (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\\n     return true;\\n   } else {\\n     return false;\\n   }\\n}\\nvec4 getPixel(vec2 pixelLocation) {\\n#ifdef BICUBIC\\n  vec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\\n#elif defined(BILINEAR)\\n  vec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\\n#else\\n  vec4 color = texture2D(u_image, pixelLocation);\\n#endif\\n  return color;\\n}\",\"contrastBrightness.glsl\":\"uniform float u_contrastOffset;\\nuniform float u_brightnessOffset;\\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\\n  vec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\\n  float maxI = 255.0;\\n  float mid = 128.0;\\n  float c = u_contrastOffset;\\n  float b = u_brightnessOffset;\\n  vec4 v;\\n  if (c > 0.0 && c < 100.0) {\\n    v = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\\n  } else if (c <= 0.0 && c > -100.0) {\\n    v = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\\n  } else if (c == 100.0) {\\n    v = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\\n    v = (sign(v) + 1.0) / 2.0;\\n  } else if (c == -100.0) {\\n    v = vec4(mid, mid, mid, currentPixel.a);\\n  }\\n  return vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\\n}\",\"projection.glsl\":\"uniform sampler2D u_transformGrid;\\nuniform vec2 u_transformSpacing;\\nuniform vec2 u_transformGridSize;\\nuniform vec2 u_targetImageSize;\\nvec2 projectPixelLocation(vec2 coords) {\\n  vec2 index_image = floor(coords * u_targetImageSize);\\n  vec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\\n  vec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\\n  vec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\\n  vec2 srcLocation;\\n  vec2 transform_location = index_transform + oneTransformPixel * 0.5;\\n  if (pos.s <= pos.t) {\\n    vec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\\n    vec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\\n    srcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\\n    srcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\\n  } else {\\n    vec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\\n    vec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\\n    srcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\\n    srcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\\n  }\\n  return srcLocation;\\n}\"},hillshade:{\"hillshade.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform int u_hillshadeType;\\nuniform float u_sinZcosAs[6];\\nuniform float u_sinZsinAs[6];\\nuniform float u_cosZs[6];\\nuniform float u_weights[6];\\nuniform vec2 u_factor;\\nuniform float u_minValue;\\nuniform float u_maxValue;\\n#include <raster/lut/colorize.glsl>\\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\\n  if (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\\n    return 0.0;\\n  }\\n  else {\\n    return e;\\n  }\\n}\\nvec3 rgb2hsv(vec3 c) {\\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n  vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\n  vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\n  float d = q.x - min(q.w, q.y);\\n  float e = 1.0e-10;\\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\\n  val = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\\n  vec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\\n  vec3 hsv = rgb2hsv(rgb.xyz);\\n  hsv.z = hillshade;\\n  return vec4(hsv2rgb(hsv), 1.0) * rgb.a;\\n}\\nvoid main() {\\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\\n  if (isOutside(pixelLocation)) {\\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n     return;\\n  }\\n  vec4 currentPixel = getPixel(pixelLocation);\\n  if (currentPixel.a == 0.0) {\\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n    return;\\n  }\\n  vec2 axy = vec2(-1.0, -1.0);\\n  vec2 bxy = vec2(0.0, -1.0);\\n  vec2 cxy = vec2(1.0, -1.0);\\n  vec2 dxy = vec2(-1.0, 0.0);\\n  vec2 fxy = vec2(1.0, 0.0);\\n  vec2 gxy = vec2(-1.0, 1.0);\\n  vec2 hxy = vec2(0.0, 1.0);\\n  vec2 ixy = vec2(1.0, 1.0);\\n  vec2 onePixel = 1.0 / u_srcImageSize;\\n  if (pixelLocation.s < onePixel.s) {\\n    axy[0] = 1.0;\\n    dxy[0] = 1.0;\\n    gxy[0] = 1.0;\\n  }\\n  if (pixelLocation.t < onePixel.t) {\\n    axy[1] = 1.0;\\n    bxy[1] = 1.0;\\n    cxy[1] = 1.0;\\n  }\\n  if (pixelLocation.s > 1.0 - onePixel.s) {\\n    cxy[0] = -1.0;\\n    fxy[0] = -1.0;\\n    ixy[0] = -1.0;\\n  }\\n  if (pixelLocation.t > 1.0 - onePixel.t) {\\n    gxy[1] = -1.0;\\n    hxy[1] = -1.0;\\n    ixy[1] = -1.0;\\n  }\\n  vec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\\n  vec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\\n  vec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\\n  vec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\\n  vec4 ve = texture2D(u_image, pixelLocation);\\n  vec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\\n  vec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\\n  vec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\\n  vec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\\n  float dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\\n  float dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\\n  float dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\\n  float hillshade = 0.0;\\n  if (u_hillshadeType == 0){\\n\\t   float cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\\n     float z = (u_cosZs[0] + cosDelta) / dzd;\\n     if (z < 0.0)  z = 0.0;\\n\\t   hillshade = z;\\n  } else {\\n\\t  for (int k = 0; k < 6; k++) {\\n\\t\\t float cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\\n\\t\\t float z = (u_cosZs[k] + cosDelta) / dzd;\\n\\t\\t if (z < 0.0) z = 0.0;\\n     hillshade = hillshade + z * u_weights[k];\\n\\t\\t if (k == 5) break;\\n    }\\n  }\\n  float alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\\n#ifdef APPLY_COLORMAP\\n  gl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\\n#else\\n  gl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\\n#endif\\n}\",\"hillshade.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\n  v_texcoord = a_pos;\\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"},lut:{\"colorize.glsl\":\"uniform sampler2D u_colormap;\\nuniform float u_colormapOffset;\\nuniform float u_colormapMaxIndex;\\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\\n  float clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\\n  vec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\\n  vec4 color = texture2D(u_colormap, clrPosition);\\n  vec4 result = vec4(color.rgb, color.a * currentPixel.a);\\n  return result;\\n}\",\"lut.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\\n  if (isOutside(pixelLocation)) {\\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n     return;\\n  }\\n  vec4 currentPixel = getPixel(pixelLocation);\\n  vec4 result = colorize(currentPixel, 1.0);\\n  gl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\\n}\",\"lut.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform highp float u_scale;\\nuniform highp vec2 u_offset;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\n  v_texcoord = a_pos * u_scale + u_offset;\\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform bool u_useGamma;\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\n#include <raster/lut/colorize.glsl>\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\\n  if (val >= maxCutOff) {\\n    return maxOutput;\\n  } else if (val <= minCutOff) {\\n    return minOutput;\\n  }\\n  float stretchedVal;\\n  if (useGamma) {\\n  \\tfloat tempf = 1.0;\\n\\t  float outRange = maxOutput - minOutput;\\n\\t  float relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\n\\t  if (gamma > 1.0) {\\n      tempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\\n    }\\n    stretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\\n  } else {\\n    stretchedVal = minOutput + (val - minCutOff) * factor;\\n  }\\n  return stretchedVal;\\n}\\nvoid main() {\\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\\n  if (isOutside(pixelLocation)) {\\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n     return;\\n  }\\n  vec4 currentPixel = getPixel(pixelLocation);\\n#ifdef NOOP\\n  gl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\n  return;\\n#endif\\n  if (u_bandCount == 1) {\\n    float grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\n#ifdef APPLY_COLORMAP\\n      vec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\\n      gl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\\n#else\\n      gl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\\n#endif\\n  } else {\\n    float redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\n    float greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\\n    float blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\\n    gl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\\n  }\\n}\",\"stretch.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform highp float u_scale;\\nuniform highp vec2 u_offset;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\n  v_texcoord = a_pos * u_scale + u_offset;\\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"}},stencil:{\"stencil.frag\":\"void main() {\\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n}\",\"stencil.vert\":\"attribute vec2 a_pos;\\nvoid main() {\\n  gl_Position = vec4(a_pos, 0.0, 1.0);\\n}\"},tileInfo:{\"tileInfo.frag\":\"uniform mediump sampler2D u_texture;\\nvarying mediump vec2 v_tex;\\nvoid main(void) {\\n  lowp vec4 color = texture2D(u_texture, v_tex);\\n  gl_FragColor = 0.75 * color;\\n}\",\"tileInfo.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_coord_ratio;\\nuniform mediump vec2 u_delta;\\nuniform mediump vec2 u_dimensions;\\nvarying mediump vec2 v_tex;\\nvoid main() {\\n  mediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\\n  vec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\\n  gl_Position = vec4(v_pos.xy, 0.0, 1.0);\\n  v_tex = a_pos;\\n}\"},util:{\"encoding.glsl\":\"const vec4 rgba2float_factors = vec4(\\n    255.0 / (256.0),\\n    255.0 / (256.0 * 256.0),\\n    255.0 / (256.0 * 256.0 * 256.0),\\n    255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n  );\\nfloat rgba2float(vec4 rgba) {\\n  return dot(rgba, rgba2float_factors);\\n}\"}};const a=new i.a(function(e){let t=o;return e.split(\"/\").forEach(e=>{t&&(t=t[e])}),t});function r(e){return a.resolveIncludes(e)}},vrr1:function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return r}),n.d(t,\"b\",function(){return o}),n.d(t,\"c\",function(){return a}),n.d(t,\"d\",function(){return c}),n.d(t,\"e\",function(){return s}),n.d(t,\"f\",function(){return l}),n.d(t,\"g\",function(){return f}),n.d(t,\"h\",function(){return u}),n.d(t,\"i\",function(){return d}),n.d(t,\"j\",function(){return m}),n.d(t,\"k\",function(){return _}),n(\"wSAH\"),n(\"n4uK\");var i=n(\"of9L\");function o(e,t,n=\"nearest\",o=!1){var a;const r=!(o&&\"u8\"===t.pixelType),l=r?5126:5121,s=null==t.pixels||0===t.pixels.length?null:r?t.getAsRGBAFloat():t.getAsRGBA(),c=null==(a=e.capabilities.textureFloat)?void 0:a.textureFloatLinear;return new i.a(e,{width:t.width,height:t.height,target:3553,pixelFormat:6408,internalFormat:6408,samplingMode:!c||\"bilinear\"!==n&&\"cubic\"!==n?9728:9729,dataType:l,wrapMode:33071,flipped:!1},s)}function a(e,t){const n=4*t.size[0],o=t.size[1],a={width:n,height:o,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5126,samplingMode:9728,wrapMode:33071,flipped:!1},r=new Float32Array(n*o*4);let l=0;for(let i=0;i<t.coefficients.length;i++)r[l++]=t.coefficients[i],i%3==2&&(r[l++]=1);return new i.a(e,a,r)}function r(e,t){return new i.a(e,{width:t.length/4,height:1,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071,flipped:!1},t)}function l(e,t,n,i=1,o=!0,a=!1){return{u_flipY:o,u_isFloatTexture:a,u_applyTransform:!!e,u_opacity:i,u_transformSpacing:e?e.spacing:null,u_transformGridSize:e?e.size:null,u_targetImageSize:t,u_srcImageSize:n}}function s(e,t){return{u_colormapOffset:t||0,u_colormapMaxIndex:e?e.length/4-1:null}}function c(e,t){return{u_scale:e,u_offset:t}}function u(e){return{u_bandCount:e.bandCount,u_minOutput:e.outMin,u_maxOutput:e.outMax,u_minCutOff:e.minCutOff,u_maxCutOff:e.maxCutOff,u_factor:e.factor,u_useGamma:e.useGamma,u_gamma:e.gamma,u_gammaCorrection:e.gammaCorrection}}function f(e){return{u_hillshadeType:e.hillshadeType,u_sinZcosAs:e.sinZcosAs,u_sinZsinAs:e.sinZsinAs,u_cosZs:e.cosZs,u_weights:e.weights,u_factor:e.factor,u_minValue:e.minValue,u_maxValue:e.maxValue}}function d(e,t){const n=e.gl,i=t.glName,o=n.getProgramParameter(i,n.ACTIVE_UNIFORMS),a=new Map;let r;for(let l=0;l<o;l++)r=n.getActiveUniform(i,l),r&&a.set(r.name,{location:n.getUniformLocation(i,r.name),info:r});return a}function _(e,t,n){Object.keys(n).forEach(i=>{const o=t.get(i)||t.get(i+\"[0]\");o&&function(e,t,n,i){if(null===i||null==n)return!1;const{info:o}=i;switch(o.type){case 5126:o.size>1?e.setUniform1fv(t,n):e.setUniform1f(t,n);break;case 35664:e.setUniform2fv(t,n);break;case 35665:e.setUniform3fv(t,n);break;case 35666:e.setUniform4fv(t,n);break;case 35675:e.setUniformMatrix3fv(t,n);break;case 35676:e.setUniformMatrix4fv(t,n);break;case 5124:o.size>1?e.setUniform1iv(t,n):e.setUniform1i(t,n);break;case 35670:e.setUniform1i(t,n?1:0);break;case 35667:case 35671:e.setUniform2iv(t,n);break;case 35668:case 35672:e.setUniform3iv(t,n);break;case 35669:case 35673:e.setUniform4iv(t,n)}}(e,i,n[i],o)})}function m(e,t,n,i){n.length===i.length&&(i.some(e=>null==e)||n.some(e=>null==e)||n.forEach((n,o)=>{t.setUniform1i(n,o),e.bindTexture(i[o],o)}))}n(\"0meK\"),n(\"bfJE\")}}]);","name":"3.35c3628479660b1ecfda.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[3],{\n\n/***/ \"+yyC\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return p; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return e; });\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nfunction e(e,r,i){const u=r&&r.length,o=u?r[0]*i:e.length;let y=n(e,0,o,i,!0);const p=new Array;if(!y||y.next===y.prev)return p;let c,v,s,h,d;if(u&&(y=function(e,x,r,i){const u=new Array;for(let t=0,r=x.length;t<r;t++){const o=n(e,x[t]*i,t<r-1?x[t+1]*i:e.length,i,!1);o===o.next&&(o.steiner=!0),u.push(l(o))}u.sort(w);for(const e of u)f(e,r),r=t(r,r.next);return r}(e,r,y,i)),e.length>80*i){c=s=e[0],v=h=e[1];for(let n=i;n<o;n+=i){const t=e[n],x=e[n+1];c=Math.min(c,t),v=Math.min(v,x),s=Math.max(s,t),h=Math.max(h,x)}d=Math.max(s-c,h-v),d=0!==d?1/d:0}return x(y,p,i,c,v,d),p}function n(e,n,t,x,r){let i;if(r===s(e,n,t,x)>0)for(let r=n;r<t;r+=x)i=u(r,e[r],e[r+1],i);else for(let r=t-x;r>=n;r-=x)i=u(r,e[r],e[r+1],i);return i&&a(i,i.next)&&(o(i),i=i.next),i}function t(e,n=e){if(!e)return e;let t,x=e;do{if(t=!1,x.steiner||!a(x,x.next)&&0!==c(x.prev,x,x.next))x=x.next;else{if(o(x),x=n=x.prev,x===x.next)break;t=!0}}while(t||x!==n);return n}function x(e,n,u,l,f,p,c=0){if(!e)return;!c&&p&&(e=y(e,l,f,p));let v=e;for(;e.prev!==e.next;){const y=e.prev,s=e.next;if(p?i(e,l,f,p):r(e))n.push(y.index/u),n.push(e.index/u),n.push(s.index/u),o(e),e=s.next,v=s.next;else if((e=s)===v){c?1===c?x(e=g(e,n,u),n,u,l,f,p,2):2===c&&M(e,n,u,l,f,p):x(t(e),n,u,l,f,p,1);break}}}function r(e){const n=e.prev,t=e,x=e.next;if(c(n,t,x)>=0)return!1;let r=e.next.next;const i=r;let u=0;for(;r!==e.prev&&(0===u||r!==i);){if(u++,h(n.x,n.y,t.x,t.y,x.x,x.y,r.x,r.y)&&c(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function i(e,n,t,x){const r=e.prev,i=e,u=e.next;if(c(r,i,u)>=0)return!1;const o=r.x<i.x?r.x<u.x?r.x:u.x:i.x<u.x?i.x:u.x,l=r.y<i.y?r.y<u.y?r.y:u.y:i.y<u.y?i.y:u.y,f=r.x>i.x?r.x>u.x?r.x:u.x:i.x>u.x?i.x:u.x,y=r.y>i.y?r.y>u.y?r.y:u.y:i.y>u.y?i.y:u.y,p=Z(o,l,n,t,x),v=Z(f,y,n,t,x);let s=e.prevZ,d=e.nextZ;for(;s&&s.z>=p&&d&&d.z<=v;){if(s!==e.prev&&s!==e.next&&h(r.x,r.y,i.x,i.y,u.x,u.y,s.x,s.y)&&c(s.prev,s,s.next)>=0)return!1;if(s=s.prevZ,d!==e.prev&&d!==e.next&&h(r.x,r.y,i.x,i.y,u.x,u.y,d.x,d.y)&&c(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(;s&&s.z>=p;){if(s!==e.prev&&s!==e.next&&h(r.x,r.y,i.x,i.y,u.x,u.y,s.x,s.y)&&c(s.prev,s,s.next)>=0)return!1;s=s.prevZ}for(;d&&d.z<=v;){if(d!==e.prev&&d!==e.next&&h(r.x,r.y,i.x,i.y,u.x,u.y,d.x,d.y)&&c(d.prev,d,d.next)>=0)return!1;d=d.nextZ}return!0}function u(e,n,t,x){const r=new m(e,n,t);return x?(r.next=x.next,r.prev=x,x.next.prev=r,x.next=r):(r.prev=r,r.next=r),r}function o(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function l(e){let n=e,t=e;do{(n.x<t.x||n.x===t.x&&n.y<t.y)&&(t=n),n=n.next}while(n!==e);return t}function f(e,n){if(n=function(e,n){let t=n;const x=e.x,r=e.y;let i,u=-1/0;do{if(r<=t.y&&r>=t.next.y&&t.next.y!==t.y){const e=t.x+(r-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(e<=x&&e>u){if(u=e,e===x){if(r===t.y)return t;if(r===t.next.y)return t.next}i=t.x<t.next.x?t:t.next}}t=t.next}while(t!==n);if(!i)return null;if(x===u)return i.prev;const o=i,l=i.x,f=i.y;let y,p=1/0;t=i.next;for(;t!==o;)x>=t.x&&t.x>=l&&x!==t.x&&h(r<f?x:u,r,l,f,r<f?u:x,r,t.x,t.y)&&(y=Math.abs(r-t.y)/(x-t.x),(y<p||y===p&&t.x>i.x)&&d(t,e)&&(i=t,p=y)),t=t.next;return i}(e,n)){const x=b(n,e);t(x,x.next)}}function y(e,n,t,x){for(let r;r!==e;r=r.next){if(r=r||e,null===r.z&&(r.z=Z(r.x,r.y,n,t,x)),r.prev.next!==r||r.next.prev!==r)return r.prev.next=r,r.next.prev=r,y(e,n,t,x);r.prevZ=r.prev,r.nextZ=r.next}return e.prevZ.nextZ=null,e.prevZ=null,function(e){let n,t=1;for(;;){let x,r=e;e=null,n=null;let i=0;for(;r;){i++,x=r;let u=0;for(;u<t&&x;u++)x=x.nextZ;let o=t;for(;u>0||o>0&&x;){let t;0===u?(t=x,x=x.nextZ,o--):0!==o&&x?r.z<=x.z?(t=r,r=r.nextZ,u--):(t=x,x=x.nextZ,o--):(t=r,r=r.nextZ,u--),n?n.nextZ=t:e=t,t.prevZ=n,n=t}r=x}if(n.nextZ=null,t*=2,i<2)return e}}(e)}function p(e,n,t,x){const r=n&&n.length,i=r?n[0]*t:e.length;let u=Math.abs(s(e,0,i,t));if(r)for(let x=0,r=n.length;x<r;x++){const i=n[x]*t,o=x<r-1?n[x+1]*t:e.length;u-=Math.abs(s(e,i,o,t))}let o=0;for(let n=0;n<x.length;n+=3){const r=x[n]*t,i=x[n+1]*t,u=x[n+2]*t;o+=Math.abs((e[r]-e[u])*(e[i+1]-e[r+1])-(e[r]-e[i])*(e[u+1]-e[r+1]))}return 0===u&&0===o?0:Math.abs((o-u)/u)}function c(e,n,t){return(n.y-e.y)*(t.x-n.x)-(n.x-e.x)*(t.y-n.y)}function v(e,n,t,x){return!!(a(e,n)&&a(t,x)||a(e,x)&&a(t,n))||c(e,n,t)>0!=c(e,n,x)>0&&c(t,x,e)>0!=c(t,x,n)>0}function s(e,n,t,x){let r=0;for(let i=n,u=t-x;i<t;i+=x)r+=(e[u]-e[i])*(e[i+1]+e[u+1]),u=i;return r}function h(e,n,t,x,r,i,u,o){return(r-u)*(n-o)-(e-u)*(i-o)>=0&&(e-u)*(x-o)-(t-u)*(n-o)>=0&&(t-u)*(i-o)-(r-u)*(x-o)>=0}function d(e,n){return c(e.prev,e,e.next)<0?c(e,n,e.next)>=0&&c(e,e.prev,n)>=0:c(e,n,e.prev)<0||c(e,e.next,n)<0}function Z(e,n,t,x,r){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-t)*r)|e<<8))|e<<4))|e<<2))|e<<1))|(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=32767*(n-x)*r)|n<<8))|n<<4))|n<<2))|n<<1))<<1}function a(e,n){return e.x===n.x&&e.y===n.y}function w(e,n){return e.x-n.x}function g(e,n,t){let x=e;do{const r=x.prev,i=x.next.next;!a(r,i)&&v(r,x,x.next,i)&&d(r,i)&&d(i,r)&&(n.push(r.index/t),n.push(x.index/t),n.push(i.index/t),o(x),o(x.next),x=e=i),x=x.next}while(x!==e);return x}function M(e,n,r,i,u,o){let l=e;do{let e=l.next.next;for(;e!==l.prev;){if(l.index!==e.index&&z(l,e)){let f=b(l,e);return l=t(l,l.next),f=t(f,f.next),x(l,n,r,i,u,o),void x(f,n,r,i,u,o)}e=e.next}l=l.next}while(l!==e)}function z(e,n){return e.next.index!==n.index&&e.prev.index!==n.index&&!function(e,n){let t=e;do{if(t.index!==e.index&&t.next.index!==e.index&&t.index!==n.index&&t.next.index!==n.index&&v(t,t.next,e,n))return!0;t=t.next}while(t!==e);return!1}(e,n)&&d(e,n)&&d(n,e)&&function(e,n){let t=e,x=!1;const r=(e.x+n.x)/2,i=(e.y+n.y)/2;do{t.y>i!=t.next.y>i&&t.next.y!==t.y&&r<(t.next.x-t.x)*(i-t.y)/(t.next.y-t.y)+t.x&&(x=!x),t=t.next}while(t!==e);return x}(e,n)}function b(e,n){const t=new m(e.index,e.x,e.y),x=new m(n.index,n.x,n.y),r=e.next,i=n.prev;return e.next=n,n.prev=e,t.next=r,r.prev=t,x.next=t,t.prev=x,i.next=x,x.prev=i,x}class m{constructor(e,n,t){this.index=e,this.x=n,this.y=t,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}}\n\n\n/***/ }),\n\n/***/ \"1F90\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return t; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return n; });\n/* harmony import */ var _Program_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"jjdI\");\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nfunction n(e){let n=\"\";for(const t in e){const o=e[t];if(\"boolean\"==typeof o)o&&(n+=`#define ${t}\\n`);else if(\"number\"==typeof o)n+=`#define ${t} ${o.toFixed()}\\n`;else if(\"object\"==typeof o){const e=o.options;let r=0;for(const t in e)n+=`#define ${e[t]} ${(r++).toFixed()}\\n`;n+=`#define ${t} ${e[o.value]}\\n`}}return n}function t(n,t,o,r){o=o||{},r=r||\"\";const f=\"function\"==typeof t.shaders?t.shaders(o):t.shaders;return new _Program_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](n,r+f.vertexShader,r+f.fragmentShader,t.attributes)}\n\n\n/***/ }),\n\n/***/ \"2yHJ\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return t; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return c; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return o; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return e; });\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst o=!0,t=32,c=1.5,e=200;\n\n\n/***/ }),\n\n/***/ \"6ldq\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ Programs_t; });\n__webpack_require__.d(__webpack_exports__, \"b\", function() { return /* binding */ i; });\n__webpack_require__.d(__webpack_exports__, \"c\", function() { return /* binding */ s; });\n__webpack_require__.d(__webpack_exports__, \"d\", function() { return /* binding */ f; });\n__webpack_require__.d(__webpack_exports__, \"e\", function() { return /* binding */ m; });\n__webpack_require__.d(__webpack_exports__, \"f\", function() { return /* binding */ l; });\n__webpack_require__.d(__webpack_exports__, \"g\", function() { return /* binding */ h; });\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/has.js\nvar has = __webpack_require__(\"wSAH\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/mathUtils.js\nvar mathUtils = __webpack_require__(\"OKTS\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/chunks/builtins.js\nvar builtins = __webpack_require__(\"n4uK\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/FramebufferObject.js\nvar FramebufferObject = __webpack_require__(\"0meK\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/programUtils.js\nvar programUtils = __webpack_require__(\"1F90\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/RenderingContext.js + 7 modules\nvar RenderingContext = __webpack_require__(\"bfJE\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/ShaderCompiler.js\nvar ShaderCompiler = __webpack_require__(\"SfCL\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/sources/shaderRepository.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var shaderRepository = ({background:{\"background.frag\":\"#ifdef PATTERN\\nuniform lowp float u_opacity;\\nuniform mediump vec2 u_pattern_tl;\\nuniform mediump vec2 u_pattern_br;\\nuniform sampler2D u_texture;\\nvarying mediump vec2 v_tileTextureCoord;\\n#else\\nuniform lowp vec4 u_color;\\n#endif\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvoid main() {\\n#ifdef PATTERN\\n  mediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\n  mediump vec2 samplePos = mix(u_pattern_tl, u_pattern_br, normalizedTextureCoord);\\n  lowp vec4 color = texture2D(u_texture, samplePos);\\n  gl_FragColor = u_opacity * color;\\n#else\\n  gl_FragColor = u_color;\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"background.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_coord_range;\\nuniform mediump float u_depth;\\n#ifdef PATTERN\\nuniform mediump mat3 u_pattern_matrix;\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\nvoid main() {\\n  gl_Position = vec4((u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0)).xy, u_depth, 1.0);\\n#ifdef PATTERN\\n  v_tileTextureCoord = (u_pattern_matrix * vec3(a_pos, 1.0)).xy;\\n#endif\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n}\"},circle:{\"circle.frag\":\"precision lowp float;\\nvarying lowp vec4 v_color;\\nvarying lowp vec4 v_stroke_color;\\nvarying mediump float v_blur;\\nvarying mediump float v_stroke_width;\\nvarying mediump float v_radius;\\nvarying mediump vec2 v_offset;\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvoid main()\\n{\\n  mediump float dist = length(v_offset);\\n  mediump float alpha = smoothstep(0.0, -v_blur, dist - 1.0);\\n  lowp float color_mix_ratio = v_stroke_width < 0.01 ? 0.0 : smoothstep(-v_blur, 0.0, dist - v_radius / (v_radius + v_stroke_width));\\n  gl_FragColor = alpha * mix(v_color, v_stroke_color, color_mix_ratio);\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"circle.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec4 a_color;\\nattribute vec4 a_stroke_color;\\nattribute vec4 a_data;\\nconst float sizePrecision = 0.25;\\nconst float blurPrecision = 0.03125;\\nvarying lowp vec4 v_color;\\nvarying lowp vec4 v_stroke_color;\\nvarying mediump float v_blur;\\nvarying mediump float v_stroke_width;\\nvarying mediump float v_radius;\\nvarying mediump vec2 v_offset;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform mediump vec2 u_circleTranslation;\\nuniform mediump float u_depth;\\nuniform mediump float u_radius;\\nuniform lowp vec4 u_color;\\nuniform mediump float u_blur;\\nuniform mediump float u_stroke_width;\\nuniform lowp vec4 u_stroke_color;\\nuniform mediump float u_antialiasingWidth;\\nvoid main()\\n{\\n  v_color = a_color * u_color;\\n  v_stroke_color = a_stroke_color * u_stroke_color;\\n  v_stroke_width = a_data[1] * sizePrecision * u_stroke_width;\\n  v_radius = a_data[2] * u_radius;\\n  v_blur = max(a_data[0] * blurPrecision + u_blur, u_antialiasingWidth / (v_radius + v_stroke_width));\\n  mediump vec2 offset = vec2(mod(a_pos, 2.0) * 2.0 - 1.0);\\n  v_offset = offset;\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos * 0.5, 1.0) + u_displayMat3 * vec3((v_radius + v_stroke_width) * offset + u_circleTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\\n}\"},fill:{\"fill.frag\":\"precision lowp float;\\n#ifdef PATTERN\\nuniform mediump vec2 u_pattern_tl;\\nuniform mediump vec2 u_pattern_br;\\nuniform lowp sampler2D u_texture;\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvarying lowp vec4 v_color;\\nvec4 mixColors(vec4 color1, vec4 color2) {\\n  float compositeAlpha = color2.a + color1.a * (1.0 - color2.a);\\n  vec3 compositeColor = color2.rgb + color1.rgb * (1.0 - color2.a);\\n  return vec4(compositeColor, compositeAlpha);\\n}\\nvoid main()\\n{\\n#ifdef PATTERN\\n  mediump vec2 normalizedTextureCoord = fract(v_tileTextureCoord);\\n  mediump vec2 samplePos = mix(u_pattern_tl, u_pattern_br, normalizedTextureCoord);\\n  lowp vec4 color = texture2D(u_texture, samplePos);\\n  gl_FragColor = v_color[3] * color;\\n#else\\n  gl_FragColor = v_color;\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"fill.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_fillTranslation;\\n#ifdef PATTERN\\nuniform mediump mat3 u_pattern_matrix;\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\n#ifdef DD\\nattribute vec4 a_color;\\n#endif\\nuniform lowp vec4 u_color;\\nvarying lowp vec4 v_color;\\nvoid main()\\n{\\n#ifdef DD\\n  v_color = a_color * u_color;\\n#else\\n  v_color = u_color;\\n#endif\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n#ifdef PATTERN\\n  v_tileTextureCoord = (u_pattern_matrix * vec3(a_pos, 1.0)).xy;\\n#endif\\n  vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(u_fillTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\\n}\"},icon:{\"icon.frag\":\"precision mediump float;\\nuniform lowp sampler2D u_texture;\\n#ifdef SDF\\nuniform lowp vec4 u_color;\\nuniform lowp vec4 u_outlineColor;\\nuniform mediump float u_outlineSize;\\n#endif\\nvarying mediump vec2 v_tex;\\nvarying lowp float v_opacity;\\nvarying mediump vec2 v_size;\\nvarying lowp vec4 v_color;\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\n#include <util/encoding.glsl>\\nvec4 mixColors(vec4 color1, vec4 color2) {\\n  float compositeAlpha = color2.a + color1.a * (1.0 - color2.a);\\n  vec3 compositeColor = color2.rgb + color1.rgb * (1.0 - color2.a);\\n  return vec4(compositeColor, compositeAlpha);\\n}\\nvoid main()\\n{\\n#ifdef SDF\\n  lowp vec4 fillPixelColor = v_color;\\n  float d = rgba2float(texture2D(u_texture, v_tex)) - 0.5;\\n  const float sofetEdgeRatio = 0.248062016;\\n  float size = max(v_size.x, v_size.y);\\n  float dist = d * sofetEdgeRatio * size;\\n  fillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\n  if (u_outlineSize > 0.25) {\\n    lowp vec4 outlinePixelColor = u_outlineColor;\\n    const float outlineLimitRatio = (16.0 / 86.0);\\n    float clampedOutlineSize = sofetEdgeRatio * min(u_outlineSize, outlineLimitRatio * max(v_size.x, v_size.y));\\n    outlinePixelColor *= clamp(0.5 - (abs(dist) - clampedOutlineSize), 0.0, 1.0);\\n    gl_FragColor = v_opacity * mixColors(fillPixelColor, outlinePixelColor);\\n  }\\n  else {\\n    gl_FragColor = v_opacity * fillPixelColor;\\n  }\\n#else\\n  lowp vec4 texColor = texture2D(u_texture, v_tex);\\n  gl_FragColor = v_opacity * texColor;\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"icon.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_vertexOffset;\\nattribute vec4 a_texAngleRange;\\nattribute vec4 a_levelInfo;\\nattribute float a_opacityInfo;\\n#ifdef DD\\nattribute vec4 a_color;\\nattribute mediump float a_size;\\n#endif\\nuniform lowp vec4 u_color;\\nuniform mediump float u_size;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nvarying lowp vec4 v_color;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform highp mat3 u_displayViewMat3;\\nuniform mediump vec2 u_iconTranslation;\\nuniform vec2 u_mosaicSize;\\nuniform mediump float u_depth;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_level;\\nuniform lowp float u_keepUpright;\\nuniform mediump float u_opacity;\\nuniform mediump float u_fadeDuration;\\nvarying mediump vec2 v_tex;\\nvarying lowp float v_opacity;\\nvarying mediump vec2 v_size;\\nconst float C_OFFSET_PRECISION = 1.0 / 8.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float tileCoordRatio = 1.0 / 8.0;\\nuniform highp float u_time;\\nvoid main()\\n{\\n  float modded = mod(a_opacityInfo, 128.0);\\n  float targetOpacity = (a_opacityInfo - modded) / 128.0;\\n  float startOpacity = modded / 127.0;\\n  float interpolatedOpacity = clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\\n  v_opacity = u_opacity * interpolatedOpacity;\\n  mediump float a_angle         = a_levelInfo[1];\\n  mediump float a_minLevel      = a_levelInfo[2];\\n  mediump float a_maxLevel      = a_levelInfo[3];\\n  mediump vec2 a_tex            = a_texAngleRange.xy;\\n  mediump float delta_z = 0.0;\\n  mediump float rotated = mod(a_angle + u_mapRotation, 256.0);\\n  delta_z += (1.0 - step(u_keepUpright, 0.0)) * step(64.0, rotated) * (1.0 - step(192.0, rotated));\\n  delta_z += 1.0 - step(a_minLevel, u_level);\\n  delta_z += step(a_maxLevel, u_level);\\n  delta_z += step(v_opacity, 0.0);\\n  vec2 offset = C_OFFSET_PRECISION * a_vertexOffset;\\n  v_size = abs(offset);\\n#ifdef SDF\\n  offset = (120.0 / 86.0) * offset;\\n#endif\\n#ifdef DD\\n  mediump float icon_size = a_size * u_size;\\n#else\\n  mediump float icon_size = u_size;\\n#endif\\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayViewMat3 * vec3(icon_size * offset, 0.0) + u_displayMat3 * vec3(u_iconTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth + delta_z, 1.0);\\n#ifdef DD\\n  v_color = a_color * u_color;\\n#else\\n  v_color = u_color;\\n#endif\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n  v_tex = a_tex.xy / u_mosaicSize;\\n  v_opacity *= v_color.w;\\n}\"},line:{\"line.frag\":\"varying mediump vec2 v_normal;\\nvarying highp float v_accumulatedDistance;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp vec4 v_color;\\nvarying mediump float v_blur;\\n#ifdef PATTERN\\nuniform mediump vec2 u_pattern_tl;\\nuniform mediump vec2 u_pattern_br;\\nuniform mediump vec2 u_spriteSize;\\nuniform sampler2D u_texture;\\nconst mediump float tileCoordRatio = 8.0;\\n#else\\nvarying mediump vec2 v_dasharray;\\n#endif\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvoid main()\\n{\\n  mediump float fragDist = length(v_normal) * v_lineHalfWidth;\\n  lowp float alpha = clamp((v_lineHalfWidth - fragDist) / v_blur, 0.0, 1.0);\\n#ifdef PATTERN\\n  mediump float relativeTexX = mod((v_accumulatedDistance + v_normal.x * v_lineHalfWidth * tileCoordRatio) / u_spriteSize.x, 1.0);\\n  mediump float relativeTexY = 0.5 + (v_normal.y * v_lineHalfWidth / u_spriteSize.y);\\n  mediump vec2 texCoord = mix(u_pattern_tl, u_pattern_br, vec2(relativeTexX, relativeTexY));\\n  lowp vec4 color = texture2D(u_texture, texCoord);\\n  gl_FragColor = alpha * v_color[3] * color;\\n#else\\n  lowp float dashPos =  mod(v_accumulatedDistance, v_dasharray.x + v_dasharray.y);\\n  lowp float dashAlpha = clamp(min(dashPos, v_dasharray.x - dashPos) + 0.5, 0.0, 1.0);\\n  dashAlpha = max(sign(-v_dasharray.y), dashAlpha);\\n  alpha *= dashAlpha;\\n  gl_FragColor = alpha * v_color;\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"line.vert\":\"attribute vec2 a_pos;\\nattribute vec4 a_offsetAndNormal;\\nattribute vec2 a_accumulatedDistance;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform highp mat3 u_displayViewMat3;\\nuniform mediump vec2 u_lineTranslation;\\nuniform mediump float u_blur;\\nuniform mediump float u_antialiasing;\\nuniform mediump float u_depth;\\nvarying mediump vec2 v_normal;\\nvarying highp float v_accumulatedDistance;\\nconst float scale = 1.0 / 31.0;\\n#ifdef DD\\nattribute vec4 a_color;\\nattribute mediump float a_width;\\n#endif\\nuniform lowp vec4 u_color;\\nuniform mediump float u_width;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nvarying lowp vec4 v_color;\\nvarying mediump float v_lineHalfWidth;\\nvarying mediump float v_blur;\\n#ifndef PATTERN\\nuniform mediump vec2 u_dasharray;\\nvarying mediump vec2 v_dasharray;\\n#endif\\nvoid main()\\n{\\n  v_normal = a_offsetAndNormal.zw * scale;\\n#ifdef DD\\n  v_lineHalfWidth = a_width * u_width;\\n#else\\n  v_lineHalfWidth = u_width;\\n#endif\\n  v_lineHalfWidth += u_antialiasing;\\n  v_lineHalfWidth *= 0.5;\\n#ifndef PATTERN\\n#ifdef DD\\n  v_dasharray = u_dasharray * a_width;\\n#else\\n  v_dasharray = u_dasharray * u_width;\\n#endif\\n#endif\\n  mediump vec2 dist = v_lineHalfWidth * scale * a_offsetAndNormal.xy;\\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) +  u_displayViewMat3 * vec3(dist, 0.0) + u_displayMat3 * vec3(u_lineTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\\n  v_accumulatedDistance = a_accumulatedDistance.x;\\n  v_blur = u_blur + u_antialiasing;\\n  #ifdef DD\\n    v_color = a_color * u_color;\\n  #else\\n    v_color = u_color;\\n  #endif\\n  #ifdef ID\\n    v_id = u_id / 255.0;\\n  #endif\\n}\"},outline:{\"outline.frag\":\"varying lowp vec4 v_color;\\nvarying mediump vec2 v_normal;\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvoid main()\\n{\\n  lowp float dist = abs(v_normal.y);\\n  lowp float alpha = smoothstep(1.0, 0.0, dist);\\n  gl_FragColor = alpha * v_color;\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"outline.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_xnormal;\\n#ifdef DD\\nattribute vec4 a_color;\\n#endif\\nuniform lowp vec4 u_color;\\nvarying lowp vec4 v_color;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform mediump vec2 u_fillTranslation;\\nuniform mediump float u_depth;\\nuniform mediump float u_outline_width;\\nvarying lowp vec2 v_normal;\\nconst float scale = 1.0 / 15.0;\\nvoid main()\\n{\\n#ifdef DD\\n  v_color = a_color * u_color;\\n#else\\n  v_color = u_color;\\n#endif\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n  v_normal = a_xnormal;\\n  mediump vec2 dist = u_outline_width * scale * a_offset;\\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(dist + u_fillTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\\n}\"},text:{\"text.frag\":\"uniform lowp sampler2D u_texture;\\nuniform mediump float u_edgeDistance;\\nvarying lowp vec2 v_tex;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying mediump float v_edgeWidth;\\nvarying mediump float v_edgeDistance;\\n#ifdef ID\\nvarying mediump vec4 v_id;\\n#endif\\nvoid main()\\n{\\n  lowp float dist = texture2D(u_texture, v_tex).a;\\n  mediump float alpha = smoothstep(v_edgeDistance - v_edgeWidth, v_edgeDistance + v_edgeWidth, dist) * v_opacity;\\n  gl_FragColor = alpha * v_color;\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"text.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_vertexOffset;\\nattribute vec4 a_texAngleRange;\\nattribute vec4 a_levelInfo;\\nattribute float a_opacityInfo;\\nuniform lowp vec4 u_color;\\n#ifdef DD\\nattribute vec4 a_color;\\n#endif\\nvarying lowp vec4 v_color;\\nuniform mediump float u_size;\\n#ifdef DD\\nattribute mediump float a_size;\\n#endif\\nvarying mediump float v_size;\\n#ifdef ID\\nuniform mediump vec4 u_id;\\nvarying mediump vec4 v_id;\\n#endif\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform highp mat3 u_displayViewMat3;\\nuniform mediump vec2 u_textTranslation;\\nuniform vec2 u_mosaicSize;\\nuniform mediump float u_depth;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_level;\\nuniform lowp float u_keepUpright;\\nuniform mediump float u_opacity;\\nuniform mediump float u_fadeDuration;\\nvarying lowp vec2 v_tex;\\nvarying lowp float v_opacity;\\nconst float offsetPrecision = 1.0 / 8.0;\\nconst mediump float edgePos = 0.75;\\nuniform mediump float u_edgeDistance;\\nuniform mediump float u_edgeBlur;\\nuniform mediump float u_antialiasingWidth;\\nvarying mediump float v_edgeDistance;\\nvarying mediump float v_edgeWidth;\\nuniform lowp float u_halo;\\nconst float sdfFontScale = 1.0 / 24.0;\\nuniform highp float u_time;\\nvoid main()\\n{\\n  float modded = mod(a_opacityInfo, 128.0);\\n  float targetOpacity = (a_opacityInfo - modded) / 128.0;\\n  float startOpacity = modded / 127.0;\\n  float interpolatedOpacity = clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\\n  v_opacity = u_opacity * interpolatedOpacity;\\n  mediump float a_angle       = a_levelInfo[1];\\n  mediump float a_minLevel    = a_levelInfo[2];\\n  mediump float a_maxLevel    = a_levelInfo[3];\\n  mediump vec2 a_tex           = a_texAngleRange.xy;\\n  mediump float a_visMinAngle    = a_texAngleRange.z;\\n  mediump float a_visMaxAngle    = a_texAngleRange.w;\\n  mediump float delta_z = 0.0;\\n  mediump float angle = mod(a_angle + u_mapRotation, 256.0);\\n  if (a_visMinAngle < a_visMaxAngle)\\n  {\\n    delta_z += (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) + (1.0 - step(a_visMinAngle, angle)));\\n  }\\n  else\\n  {\\n    delta_z += (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) * (1.0 - step(a_visMinAngle, angle)));\\n  }\\n  delta_z += 1.0 - step(a_minLevel, u_level);\\n  delta_z += step(a_maxLevel, u_level);\\n  delta_z += step(v_opacity, 0.0);\\n  v_tex = a_tex.xy / u_mosaicSize;\\n#ifdef DD\\n  if (u_halo > 0.5)\\n  {\\n    v_color = u_color;\\n  }\\n  else\\n  {\\n    v_color = a_color * u_color;\\n  }\\n#else\\n  v_color = u_color;\\n#endif\\n#ifdef DD\\n  v_size = a_size * u_size;\\n#else\\n  v_size = u_size;\\n#endif\\n#ifdef ID\\n  v_id = u_id / 255.0;\\n#endif\\n  v_edgeDistance = edgePos - u_edgeDistance / v_size;\\n  v_edgeWidth = (u_antialiasingWidth + u_edgeBlur) / v_size;\\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + sdfFontScale * u_displayViewMat3 * vec3(offsetPrecision * v_size * a_vertexOffset, 0.0) + u_displayMat3 * vec3(u_textTranslation, 0.0);\\n  gl_Position = vec4(pos.xy, u_depth + delta_z, 1.0);\\n}\"},util:{\"encoding.glsl\":\"const vec4 rgba2float_factors = vec4(\\n    255.0 / (256.0),\\n    255.0 / (256.0 * 256.0),\\n    255.0 / (256.0 * 256.0 * 256.0),\\n    255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n  );\\nfloat rgba2float(vec4 rgba) {\\n  return dot(rgba, rgba2float_factors);\\n}\"}});\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/sources/resolver.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst resolver_t=new ShaderCompiler[\"a\" /* default */]((function(r){let t=shaderRepository;return r.split(\"/\").forEach((r=>{t&&(t=t[r])})),t}));function o(r){return resolver_t.resolveIncludes(r)}\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/Programs.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst Programs_r=a=>Object(programUtils[\"b\" /* glslifyDefineMap */])({ID:a.id,PATTERN:a.pattern}),Programs_t={name:\"background\",shaders:e=>({vertexShader:Programs_r(e)+o(\"background/background.vert\"),fragmentShader:Programs_r(e)+o(\"background/background.frag\")}),attributes:{a_pos:0}},Programs_o=a=>Object(programUtils[\"b\" /* glslifyDefineMap */])({ID:a.id}),i={name:\"circle\",shaders:e=>({vertexShader:Programs_o(e)+o(\"circle/circle.vert\"),fragmentShader:Programs_o(e)+o(\"circle/circle.frag\")}),attributes:{a_pos:0,a_color:1,a_stroke_color:2,a_data:3}},n=a=>Object(programUtils[\"b\" /* glslifyDefineMap */])({ID:a.id,DD:a.dd,PATTERN:a.pattern}),s={name:\"fill\",shaders:e=>({vertexShader:n(e)+o(\"fill/fill.vert\"),fragmentShader:n(e)+o(\"fill/fill.frag\")}),attributes:{a_pos:0,a_color:1}},d=a=>Object(programUtils[\"b\" /* glslifyDefineMap */])({ID:a.id,DD:a.dd}),l={name:\"outline\",shaders:e=>({vertexShader:d(e)+o(\"outline/outline.vert\"),fragmentShader:d(e)+o(\"outline/outline.frag\")}),attributes:{a_pos:0,a_offset:1,a_xnormal:2,a_color:3}},c=a=>Object(programUtils[\"b\" /* glslifyDefineMap */])({ID:a.id,DD:a.dd,SDF:a.sdf}),f={name:\"icon\",shaders:e=>({vertexShader:c(e)+o(\"icon/icon.vert\"),fragmentShader:c(e)+o(\"icon/icon.frag\")}),attributes:{a_pos:0,a_vertexOffset:1,a_texAngleRange:2,a_levelInfo:3,a_color:4,a_size:5,a_opacityInfo:6}},_=a=>Object(programUtils[\"b\" /* glslifyDefineMap */])({ID:a.id,DD:a.dd,PATTERN:a.pattern}),m={name:\"line\",shaders:e=>({vertexShader:_(e)+o(\"line/line.vert\"),fragmentShader:_(e)+o(\"line/line.frag\")}),attributes:{a_pos:0,a_offsetAndNormal:1,a_accumulatedDistance:2,a_color:3,a_width:4}},g=a=>Object(programUtils[\"b\" /* glslifyDefineMap */])({ID:a.id,DD:a.dd}),h={name:\"text\",shaders:e=>({vertexShader:g(e)+o(\"text/text.vert\"),fragmentShader:g(e)+o(\"text/text.frag\")}),attributes:{a_pos:0,a_vertexOffset:1,a_texAngleRange:2,a_levelInfo:3,a_color:4,a_size:5,a_opacityInfo:6}};\n\n\n/***/ }),\n\n/***/ \"7F7D\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var _core_has_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"wSAH\");\n/* harmony import */ var _core_mathUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"OKTS\");\n/* harmony import */ var _chunks_builtins_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"n4uK\");\n/* harmony import */ var _webgl_BufferObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"fOQB\");\n/* harmony import */ var _webgl_VertexArrayObject_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"D6bk\");\n/* harmony import */ var _webgl_FramebufferObject_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"0meK\");\n/* harmony import */ var _webgl_programUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"1F90\");\n/* harmony import */ var _webgl_RenderingContext_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\"bfJE\");\n/* harmony import */ var _chunks_vec4f32_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\"XvKw\");\n/* harmony import */ var _WGLBrush_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(\"8HmA\");\n/* harmony import */ var _shaders_BackgroundPrograms_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(\"IcFU\");\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ __webpack_exports__[\"a\"] = (class extends _WGLBrush_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ \"a\"]{constructor(){super(...arguments),this._color=Object(_chunks_vec4f32_js__WEBPACK_IMPORTED_MODULE_8__[/* f */ \"b\"])(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:t},r){t.setDepthWriteEnabled(!1),t.setDepthTestEnabled(!1),t.setStencilTestEnabled(!0),t.setBlendingEnabled(!1),t.setColorMask(!1,!1,!1,!1),t.setStencilOp(7680,7680,7681),t.setStencilWriteMask(255),t.setStencilFunctionSeparate(1032,516,r.stencilRef,255)}draw(t,r){const{context:e}=t;this._initialized||this._initialize(e),e.bindVAO(this._solidVertexArrayObject),e.bindProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv(\"u_dvsMat3\",r.transforms.dvs),this._solidProgram.setUniform2fv(\"u_coord_range\",r.coordRange),this._solidProgram.setUniform1f(\"u_depth\",0),this._solidProgram.setUniform4fv(\"u_color\",this._color),e.drawArrays(5,0,4),e.bindVAO()}_initialize(i){if(this._initialized)return!0;const s=Object(_webgl_programUtils_js__WEBPACK_IMPORTED_MODULE_6__[/* createProgram */ \"a\"])(i,_shaders_BackgroundPrograms_js__WEBPACK_IMPORTED_MODULE_10__[/* background */ \"a\"]);if(!s)return!1;const a=new Int8Array([0,0,1,0,0,1,1,1]),n=_webgl_BufferObject_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].createVertex(i,35044,a),l=new _webgl_VertexArrayObject_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"](i,_shaders_BackgroundPrograms_js__WEBPACK_IMPORTED_MODULE_10__[/* background */ \"a\"].attributes,{geometry:[{name:\"a_pos\",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:n});return this._solidProgram=s,this._solidVertexArrayObject=l,this._initialized=!0,!0}});\n\n\n/***/ }),\n\n/***/ \"8HmA\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ __webpack_exports__[\"a\"] = (class{constructor(){this.name=this.constructor.name||\"UnnamedBrush\"}prepareState(r,t,a){}draw(r,t,a){}drawMany(r,t,a){for(const s of t)this.draw(r,s,a)}});\n\n\n/***/ }),\n\n/***/ \"D6bk\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var _Util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"hTmG\");\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nlet e=0;/* harmony default export */ __webpack_exports__[\"a\"] = (class{constructor(t,i,s,n,r){this._context=t,this._locations=i,this._layout=s,this._buffers=n,this._indexBuffer=r,this._glName=null,this.id=e++,this._initialized=!1,t.instanceCounter.increment(2,this)}get glName(){return this._glName}get vertexBuffers(){return this._buffers}get indexBuffer(){return this._indexBuffer}get size(){return Object.keys(this._buffers).reduce(((t,i)=>t+this._buffers[i].size),this._indexBuffer?this._indexBuffer.size:0)}get layout(){return this._layout}get locations(){return this._locations}dispose(t=!0){if(!this._context)return;const i=this._context.capabilities.vao;i&&this._glName&&(i.deleteVertexArray(this._glName),this._glName=null);if(this._context.getBoundVAO()===this&&this._context.bindVAO(null),t){for(const t in this._buffers)this._buffers[t].dispose(),delete this._buffers[t];this._indexBuffer&&(this._indexBuffer.dispose(),this._indexBuffer=null)}this._context.instanceCounter.decrement(2,this),this._context=null}initialize(){if(this._initialized)return;const t=this._context.capabilities.vao;if(t){const i=t.createVertexArray();t.bindVertexArray(i),this._bindLayout(),t.bindVertexArray(null),this._glName=i}this._initialized=!0}bind(){this.initialize();const t=this._context.capabilities.vao;t?t.bindVertexArray(this.glName):(this._context.bindVAO(null),this._bindLayout())}_bindLayout(){const i=this._buffers,e=!!this._context.capabilities.vao,s=this._layout,n=this._indexBuffer;i||console.error(\"Vertex buffer dictionary is empty!\");const r=this._context.gl;for(const e in i){const n=i[e];n||console.error(\"Vertex buffer is uninitialized!\");const r=s[e];r||console.error(\"Vertex element descriptor is empty!\"),Object(_Util_js__WEBPACK_IMPORTED_MODULE_0__[/* bindVertexBufferLayout */ \"a\"])(this._context,this._locations,n,r)}n&&(e?r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,n.glName):this._context.bindBuffer(n))}unbind(){this.initialize();const t=this._context.capabilities.vao;t?t.bindVertexArray(null):this._unbindLayout()}_unbindLayout(){const t=this._buffers,e=this._layout;t||console.error(\"Vertex buffer dictionary is empty!\");for(const s in t){const n=t[s];n||console.error(\"Vertex buffer is uninitialized!\");const r=e[s];Object(_Util_js__WEBPACK_IMPORTED_MODULE_0__[/* unbindVertexBufferLayout */ \"b\"])(this._context,this._locations,n,r)}const s=this._indexBuffer;s&&this._context.unbindBuffer(s.bufferType)}});\n\n\n/***/ }),\n\n/***/ \"HQFP\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export C_256_TO_RAD */\n/* unused harmony export C_2PI */\n/* unused harmony export C_DEG_TO_256 */\n/* unused harmony export C_DEG_TO_RAD */\n/* unused harmony export C_INFINITY */\n/* unused harmony export C_PI */\n/* unused harmony export C_PI_BY_2 */\n/* unused harmony export C_RAD_TO_256 */\n/* unused harmony export C_SQRT2 */\n/* unused harmony export C_SQRT2_INV */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return g; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return M; });\n/* unused harmony export interpolate */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return P; });\n/* unused harmony export positiveMod */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return h; });\n/* unused harmony export sqr */\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst n=Number.POSITIVE_INFINITY,t=Math.PI,r=2*t,u=t/2,o=128/t,e=t/128,c=256/360,f=t/180,i=1.414213562,I=1/1.414213562,N=1/Math.LN2;function a(n,t){return(n%=t)>=0?n:n+t}function h(n){return a(n*o,256)}function M(n){return a(.7111111111111111*n,256)}function P(n){return Math.log(n)*N}function T(n){return n*n}function b(n,t,r){return n*(1-r)+t*r}function g(n,t,r){return n>=t&&n<=r||n>=r&&n<=t}\n\n\n/***/ }),\n\n/***/ \"IcFU\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return a; });\n/* harmony import */ var _sources_resolver_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"vpBa\");\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst a={name:\"background\",shaders:{vertexShader:Object(_sources_resolver_js__WEBPACK_IMPORTED_MODULE_0__[/* resolveIncludes */ \"a\"])(\"background/background.vert\"),fragmentShader:Object(_sources_resolver_js__WEBPACK_IMPORTED_MODULE_0__[/* resolveIncludes */ \"a\"])(\"background/background.frag\")},attributes:{a_pos:0}};\n\n\n/***/ }),\n\n/***/ \"Oxob\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ brushes_g; });\n\n// UNUSED EXPORTS: vtlBrushes\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/definitions.js\nvar definitions = __webpack_require__(\"jIHu\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/VertexStream.js\nvar VertexStream = __webpack_require__(\"gjrC\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrush.js\nvar WGLBrush = __webpack_require__(\"8HmA\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushBitmap.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst BrushBitmap_s={nearest:{defines:[],samplingMode:9728,mips:!1},bilinear:{defines:[],samplingMode:9729,mips:!1},bicubic:{defines:[\"bicubic\"],samplingMode:9729,mips:!1},trilinear:{defines:[],samplingMode:9987,mips:!0}};/* harmony default export */ var BrushBitmap = (class extends WGLBrush[\"a\" /* default */]{constructor(){super(...arguments),this._desc={vsPath:\"raster/bitmap\",fsPath:\"raster/bitmap\",attributes:{a_position:0,a_texcoord:1}}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},t){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(i,n){const{context:r,renderingOptions:a,painter:o}=i;if(!n.source)return;i.timeline.begin(this.name),this._quad||(this._quad=new VertexStream[\"a\" /* default */](r,[0,0,1,0,0,1,1,1]));const d=((e,t,i)=>{if(\"dynamic\"===i.samplingMode){const{state:i}=e,n=t.resolution/t.pixelRatio/i.resolution,r=Math.round(e.pixelRatio)!==e.pixelRatio,a=n>1.05||n<.95;return i.rotation||a||r||t.isSourceScaled||t.rotation?BrushBitmap_s.bilinear:BrushBitmap_s.nearest}return BrushBitmap_s[i.samplingMode]})(i,n,a),m=o.materialManager.getProgram(i,this._desc,d.defines),{coordScale:c,computedOpacity:l,transforms:p}=n;n.setSamplingProfile(d),n.bind(i,definitions[\"w\" /* TEXTURE_BINDING_BITMAP */]),r.bindProgram(m),m.setUniformMatrix3fv(\"u_dvsMat3\",p.dvs),m.setUniform1i(\"u_texture\",definitions[\"w\" /* TEXTURE_BINDING_BITMAP */]),m.setUniform2fv(\"u_coordScale\",c),m.setUniform1f(\"u_opacity\",l),this._quad.draw(),i.timeline.end(this.name)}});\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/programUtils.js\nvar programUtils = __webpack_require__(\"1F90\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/chunks/vec4f32.js\nvar vec4f32 = __webpack_require__(\"XvKw\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/Utils.js + 1 modules\nvar Utils = __webpack_require__(\"yN2G\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BackgroundPrograms.js\nvar BackgroundPrograms = __webpack_require__(\"IcFU\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushClip.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var BrushClip = (class extends WGLBrush[\"a\" /* default */]{constructor(){super(...arguments),this._color=Object(vec4f32[\"b\" /* f */])(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:t}){t.setStencilTestEnabled(!0),t.setBlendingEnabled(!1),t.setFaceCullingEnabled(!1),t.setColorMask(!1,!1,!1,!1),t.setStencilOp(7680,7680,7681),t.setStencilWriteMask(255),t.setStencilFunction(519,0,255)}draw(r,s){const{context:i,state:a}=r;this._program||(this._program=Object(programUtils[\"a\" /* createProgram */])(i,BackgroundPrograms[\"a\" /* background */]));const n=this._program,m=Object(Utils[\"f\" /* createProgramDescriptor */])(\"clip\",{geometry:[{location:0,name:\"a_pos\",count:2,type:5122}]}),c=s.getVAO(i,a,m.attributes,m.bufferLayouts);i.bindProgram(this._program),n.setUniform2fv(\"u_coord_range\",[1,1]),n.setUniform4fv(\"u_color\",this._color),n.setUniformMatrix3fv(\"u_dvsMat3\",a.displayMat3),i.bindVAO(c),i.drawElements(4,c.indexBuffer.size,5125,0),i.bindVAO()}});\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushInfo.js + 1 modules\nvar WGLBrushInfo = __webpack_require__(\"b3VY\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushStencil.js\nvar WGLBrushStencil = __webpack_require__(\"7F7D\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/has.js\nvar has = __webpack_require__(\"wSAH\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/mathUtils.js\nvar mathUtils = __webpack_require__(\"OKTS\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/chunks/mat3f32.js\nvar mat3f32 = __webpack_require__(\"jHF5\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/chunks/builtins.js\nvar builtins = __webpack_require__(\"n4uK\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/BufferObject.js\nvar BufferObject = __webpack_require__(\"fOQB\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/VertexArrayObject.js\nvar VertexArrayObject = __webpack_require__(\"D6bk\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/FramebufferObject.js\nvar FramebufferObject = __webpack_require__(\"0meK\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/RenderingContext.js + 7 modules\nvar RenderingContext = __webpack_require__(\"bfJE\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/number.js\nvar number = __webpack_require__(\"0RS7\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/enums.js\nvar enums = __webpack_require__(\"yE7X\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/Programs.js + 2 modules\nvar Programs = __webpack_require__(\"6ldq\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLBackground.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nclass WGLBrushVTLBackground_f extends WGLBrush[\"a\" /* default */]{constructor(){super(...arguments),this._color=Object(vec4f32[\"b\" /* f */])(1,0,0,1),this._patternMatrix=Object(mat3f32[\"b\" /* c */])(),this._programOptions={id:!1,pattern:!1}}dispose(){this._program&&(this._program.dispose(),this._program=null),this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(o,e){const{context:s,styleLayerUID:i}=o;this._loadWGLResources(s);const a=o.displayLevel,c=o.styleLayer,p=o.painter.getVectorTileProgramCache(),f=c.getPaintValue(\"background-color\",a),l=c.getPaintValue(\"background-opacity\",a),_=c.getPaintValue(\"background-pattern\",a),u=void 0!==_,h=f[3]*l,d=1|window.devicePixelRatio,g=o.spriteMosaic;let b;const v=d>definitions[\"G\" /* VTL_HIGH_RES_CUTOFF */]?2:1,j=o.drawPhase===enums[\"c\" /* WGLDrawPhase */].HITTEST,x=(j?1:0)<<1|(u?1:0),y=this._programOptions;y.id=j,y.pattern=u;const w=p.getProgram(0,x,y);if(s.bindVAO(this._vao),s.bindProgram(w),u){if(b=g.getMosaicItemPosition(_,!0),!b)return;w.setUniform1f(\"u_opacity\",l),w.setUniform2f(\"u_pattern_tl\",b.tl[0],b.tl[1]),w.setUniform2f(\"u_pattern_br\",b.br[0],b.br[1]),w.setUniform1i(\"u_texture\",definitions[\"I\" /* VTL_TEXTURE_BINDING_UNIT_SPRITES */]),g.bind(s,9729,b.page,definitions[\"I\" /* VTL_TEXTURE_BINDING_UNIT_SPRITES */])}else this._color[0]=h*f[0],this._color[1]=h*f[1],this._color[2]=h*f[2],this._color[3]=h,w.setUniform4fv(\"u_color\",this._color);if(w.setUniform1f(\"u_depth\",c.z||0),j){const t=Object(number[\"c\" /* u32to4Xu8 */])(i+1);w.setUniform4fv(\"u_id\",t)}for(const t of e){if(w.setUniform1f(\"u_coord_range\",t.coordRange[0]),w.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.dvs),u){const r=Math.max(Math.pow(2,Math.round(a)-t.key.level),1),o=v*t.size[0]*r,e=o/b.size[0],s=o/b.size[1];this._patternMatrix[0]=e,this._patternMatrix[4]=s,w.setUniformMatrix3fv(\"u_pattern_matrix\",this._patternMatrix)}s.setStencilFunction(514,t.stencilRef,255),s.drawArrays(5,0,4)}}_loadWGLResources(t){if(this._program&&this._vao)return;const r=Object(programUtils[\"a\" /* createProgram */])(t,Programs[\"a\" /* background */]);if(!r)return;const o=new Int8Array([0,0,1,0,0,1,1,1]),a=BufferObject[\"a\" /* default */].createVertex(t,35044,o),n=new VertexArrayObject[\"a\" /* default */](t,Programs[\"a\" /* background */].attributes,{geometry:[{name:\"a_pos\",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:a});this._program=r,this._vao=n}}\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/maybe.js\nvar maybe = __webpack_require__(\"srIe\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLCircle.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst WGLBrushVTLCircle_a=[1,1,1,1];class WGLBrushVTLCircle_s extends WGLBrush[\"a\" /* default */]{constructor(){super(...arguments),this._color=Object(vec4f32[\"a\" /* c */])(),this._strokeColor=Object(vec4f32[\"a\" /* c */])(),this._programOptions={id:!1}}dispose(){}drawMany(r,i){const{context:s,state:n,drawPhase:c,styleLayerUID:l}=r,u=r.displayLevel,f=r.styleLayer,h=r.painter.getVectorTileProgramCache(),m=f.hasDataDrivenRadius?1:f.getPaintValue(\"circle-radius\",u),_=f.hasDataDrivenColor?WGLBrushVTLCircle_a:f.getPaintValue(\"circle-color\",u),d=f.hasDataDrivenOpacity?1:f.getPaintValue(\"circle-opacity\",u),p=f.hasDataDrivenStrokeWidth?1:f.getPaintValue(\"circle-stroke-width\",u),g=f.hasDataDrivenStrokeColor?WGLBrushVTLCircle_a:f.getPaintValue(\"circle-stroke-color\",u),y=f.hasDataDrivenStrokeOpacity?1:f.getPaintValue(\"circle-stroke-opacity\",u),v=f.hasDataDrivenBlur?0:f.getPaintValue(\"circle-blur\",u);let D=d*_[3];this._color[0]=D*_[0],this._color[1]=D*_[1],this._color[2]=D*_[2],this._color[3]=D,D=y*g[3],this._strokeColor[0]=D*g[0],this._strokeColor[1]=D*g[1],this._strokeColor[2]=D*g[2],this._strokeColor[3]=D;const k=f.getPaintValue(\"circle-translate\",u),P=f.getPaintValue(\"circle-translate-anchor\",u),U=c===enums[\"c\" /* WGLDrawPhase */].HITTEST,V=U?1:0,C=this._programOptions;C.id=U;const x=h.getProgram(5,V,C);if(s.bindProgram(x),x.setUniformMatrix3fv(\"u_displayMat3\",1===P?n.displayMat3:n.displayViewMat3),x.setUniform2fv(\"u_circleTranslation\",k),x.setUniform1f(\"u_depth\",f.z),x.setUniform1f(\"u_radius\",m),x.setUniform4fv(\"u_color\",this._color),x.setUniform1f(\"u_blur\",v),x.setUniform1f(\"u_stroke_width\",p),x.setUniform4fv(\"u_stroke_color\",this._strokeColor),x.setUniform1f(\"u_antialiasingWidth\",1.2),U){const t=Object(number[\"c\" /* u32to4Xu8 */])(l+1);x.setUniform4fv(\"u_id\",t)}for(const r of i){if(!r.layerData.has(l))continue;const e=r.layerData.get(l);e.prepareForRendering(s,h);const o=e.circleVertexArrayObject;Object(maybe[\"g\" /* isNone */])(o)||(s.bindVAO(o),x.setUniformMatrix3fv(\"u_dvsMat3\",r.transforms.dvs),s.setStencilFunction(514,r.stencilRef,255),s.drawElements(4,e.circleIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.circleIndexStart),r.triangleCount+=e.circleIndexCount/3)}}}\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLFill.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst WGLBrushVTLFill_l=[1,1,1,1];class WGLBrushVTLFill_f extends WGLBrush[\"a\" /* default */]{constructor(){super(...arguments),this._color=Object(vec4f32[\"a\" /* c */])(),this._outlineColor=Object(vec4f32[\"a\" /* c */])(),this._fillProgramOptions={id:!1,dd:!1,pattern:!1},this._outlineProgramOptions={id:!1,dd:!1},this._patternMatrix=Object(mat3f32[\"b\" /* c */])()}dispose(){}drawMany(t,i){const{displayLevel:e,drawPhase:r,renderPass:o,styleLayerUID:s}=t,f=t.styleLayer,u=f.getPaintValue(\"fill-pattern\",e),c=f.hasDataDrivenColor?WGLBrushVTLFill_l:f.getPaintValue(\"fill-color\",e),d=f.hasDataDrivenOpacity?1:f.getPaintValue(\"fill-opacity\",e),_=d*c[3],h=void 0!==u||_<1||f.hasDataDrivenFill;if(h&&\"opaque\"===o)return;this._color[0]=_*c[0],this._color[1]=_*c[1],this._color[2]=_*c[2],this._color[3]=_;let m;r===enums[\"c\" /* WGLDrawPhase */].HITTEST&&(m=Object(number[\"c\" /* u32to4Xu8 */])(s+1));const p=f.getPaintValue(\"fill-translate\",e),g=f.getPaintValue(\"fill-translate-anchor\",e);this._drawFill(t,s,f,i,p,g,u,h,m),this._drawOutline(t,s,f,i,p,g,u,m,d)}_drawFill(r,o,a,s,l,f,u,c,d){const{context:_,displayLevel:h,drawPhase:m,pixelRatio:p,renderPass:g,spriteMosaic:v,state:P}=r;if(!c&&\"translucent\"===g)return;const x=void 0!==u,y=p>definitions[\"G\" /* VTL_HIGH_RES_CUTOFF */]?2:1,M=a.hasDataDrivenFill,C=r.painter.getVectorTileProgramCache();let U;const D=m===enums[\"c\" /* WGLDrawPhase */].HITTEST,T=(D?1:0)<<2|(M?1:0)<<1|(x?1:0),E=this._fillProgramOptions;E.id=D,E.dd=M,E.pattern=x;const V=C.getProgram(1,T,E);if(_.bindProgram(V),x){if(U=v.getMosaicItemPosition(u,!0),!U)return void _.bindProgram();V.setUniform2f(\"u_pattern_tl\",U.tl[0],U.tl[1]),V.setUniform2f(\"u_pattern_br\",U.br[0],U.br[1]),V.setUniform1i(\"u_texture\",definitions[\"I\" /* VTL_TEXTURE_BINDING_UNIT_SPRITES */]),v.bind(_,9729,U.page,definitions[\"I\" /* VTL_TEXTURE_BINDING_UNIT_SPRITES */])}V.setUniformMatrix3fv(\"u_displayMat3\",1===f?P.displayMat3:P.displayViewMat3),V.setUniform2fv(\"u_fillTranslation\",l),V.setUniform1f(\"u_depth\",a.z+152587890625e-16),V.setUniform4fv(\"u_color\",this._color),D&&V.setUniform4fv(\"u_id\",d);for(const i of s){if(!i.layerData.has(o))continue;const e=i.layerData.get(o);e.prepareForRendering(_,C);const r=e.fillVertexArrayObject;if(!Object(maybe[\"g\" /* isNone */])(r)){if(_.bindVAO(r),V.setUniformMatrix3fv(\"u_dvsMat3\",i.transforms.dvs),x){const t=Math.max(Math.pow(2,Math.round(h)-i.key.level),1),e=i.coordRange[0]/(y*i.size[0]*t),r=1/(U.size[0]*e),o=1/(U.size[1]*e);this._patternMatrix[0]=r,this._patternMatrix[4]=o,V.setUniformMatrix3fv(\"u_pattern_matrix\",this._patternMatrix)}_.setStencilFunction(514,i.stencilRef,255),_.drawElements(4,e.fillIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.fillIndexStart),i.triangleCount+=e.fillIndexCount/3}}}_drawOutline(i,e,r,o,a,s,f,u,c){const{context:d,displayLevel:_,drawPhase:h,renderPass:m,pixelRatio:p,state:g}=i;if(\"opaque\"===m)return;const v=void 0!==f;if(!(r.getPaintValue(\"fill-antialias\",_)&&!v||r.hasDataDrivenOutlineColor))return;const P=i.painter.getVectorTileProgramCache(),x=r.hasDataDrivenOutline;if(r.outlineUsesFillColor){if(1!==this._color[3])return;this._outlineColor[0]=this._color[0],this._outlineColor[1]=this._color[1],this._outlineColor[2]=this._color[2],this._outlineColor[3]=this._color[3]}else{const t=r.hasDataDrivenOutlineColor?WGLBrushVTLFill_l:r.getPaintValue(\"fill-outline-color\",_),i=c*t[3];this._outlineColor[0]=i*t[0],this._outlineColor[1]=i*t[1],this._outlineColor[2]=i*t[2],this._outlineColor[3]=i}const y=.75/p,M=h===enums[\"c\" /* WGLDrawPhase */].HITTEST,C=(M?1:0)<<1|(x?1:0),U=this._outlineProgramOptions;U.id=M,U.dd=x;const D=P.getProgram(2,C,U);d.bindProgram(D),D.setUniformMatrix3fv(\"u_displayMat3\",1===s?g.displayMat3:g.displayViewMat3),D.setUniform2fv(\"u_fillTranslation\",a),D.setUniform1f(\"u_depth\",r.z+152587890625e-16),D.setUniform1f(\"u_outline_width\",y),D.setUniform4fv(\"u_color\",this._outlineColor),M&&D.setUniform4fv(\"u_id\",u);for(const i of o){if(!i.layerData.has(e))continue;const r=i.layerData.get(e);r.prepareForRendering(d,P);const o=r.outlineVertexArrayObject;Object(maybe[\"g\" /* isNone */])(o)||(d.bindVAO(o),D.setUniformMatrix3fv(\"u_dvsMat3\",i.transforms.dvs),d.setStencilFunction(514,i.stencilRef,255),d.drawElements(4,r.outlineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*r.outlineIndexStart),i.triangleCount+=r.outlineIndexCount/3)}}}\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/chunks/vec2f32.js\nvar vec2f32 = __webpack_require__(\"c46T\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLLine.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst WGLBrushVTLLine_o=Math.PI/180,WGLBrushVTLLine_l=[1,1,1,1];class WGLBrushVTLLine_f extends WGLBrush[\"a\" /* default */]{constructor(){super(...arguments),this._color=Object(vec4f32[\"a\" /* c */])(),this._dashArray=Object(vec2f32[\"a\" /* c */])(),this._programOptions={id:!1,dd:!1,pattern:!1}}dispose(){}drawMany(i,r){const{context:n,displayLevel:o,state:f,drawPhase:c,styleLayerUID:m}=i,d=i.styleLayer,u=i.painter.getVectorTileProgramCache(),h=d.getPaintValue(\"line-translate\",o),p=d.getPaintValue(\"line-translate-anchor\",o),_=d.getPaintValue(\"line-pattern\",o),y=void 0!==_,g=1/i.pixelRatio,v=d.getPaintValue(\"line-blur\",o),U=d.hasDataDrivenColor?WGLBrushVTLLine_l:d.getPaintValue(\"line-color\",o),P=d.hasDataDrivenOpacity?1:d.getPaintValue(\"line-opacity\",o),M=d.hasDataDrivenWidth?1:d.getPaintValue(\"line-width\",o),V=P*U[3];this._color[0]=V*U[0],this._color[1]=V*U[1],this._color[2]=V*U[2],this._color[3]=V;const x=d.hasDataDrivenLine,b=c===enums[\"c\" /* WGLDrawPhase */].HITTEST;let D;b&&(D=Object(number[\"c\" /* u32to4Xu8 */])(m+1));const j=(b?1:0)<<2|(x?1:0)<<1|(y?1:0),w=this._programOptions;w.id=b,w.dd=x,w.pattern=y;const A=u.getProgram(3,j,w);if(n.bindProgram(A),A.setUniformMatrix3fv(\"u_displayViewMat3\",f.displayViewMat3),A.setUniformMatrix3fv(\"u_displayMat3\",1===p?f.displayMat3:f.displayViewMat3),A.setUniform2fv(\"u_lineTranslation\",h),A.setUniform1f(\"u_depth\",d.z),A.setUniform1f(\"u_blur\",v),A.setUniform1f(\"u_antialiasing\",g),A.setUniform4fv(\"u_color\",this._color),A.setUniform1f(\"u_width\",M),b&&A.setUniform4fv(\"u_id\",D),y){const t=i.spriteMosaic,r=t.getMosaicItemPosition(_,!0);r&&(t.bind(n,9729,r.page,definitions[\"I\" /* VTL_TEXTURE_BINDING_UNIT_SPRITES */]),A.setUniform2f(\"u_pattern_tl\",r.tl[0],r.br[1]),A.setUniform2f(\"u_pattern_br\",r.br[0],r.tl[1]),A.setUniform2f(\"u_spriteSize\",8*r.size[0],r.size[1]),A.setUniform1i(\"u_texture\",definitions[\"I\" /* VTL_TEXTURE_BINDING_UNIT_SPRITES */]))}else{let t=d.getPaintValue(\"line-dasharray\",o);t.length<2&&(t=[1,-1]);const e=8;this._dashArray[0]=e*t[0],this._dashArray[1]=e*t[1],A.setUniform2fv(\"u_dasharray\",this._dashArray)}for(const e of r){if(!e.layerData.has(m))continue;const i=e.layerData.get(m);i.prepareForRendering(n,u);const r=i.lineVertexArrayObject;Object(maybe[\"g\" /* isNone */])(r)||(n.bindVAO(r),A.setUniformMatrix3fv(\"u_dvsMat3\",e.transforms.dvs),n.setStencilFunction(514,e.stencilRef,255),n.drawElements(4,i.lineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*i.lineIndexStart),e.triangleCount+=i.lineIndexCount/3)}}}\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/vectorTiles/decluttering/config.js\nvar config = __webpack_require__(\"2yHJ\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/GeometryUtils.js\nvar GeometryUtils = __webpack_require__(\"HQFP\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLSymbol.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst WGLBrushVTLSymbol_u=[1,1,1,1];class WGLBrushVTLSymbol_m extends WGLBrush[\"a\" /* default */]{constructor(){super(...arguments),this._iconProgramOptions={id:!1,dd:!1,sdf:!1},this._sdfProgramOptions={id:!1,dd:!1},this._spritesTextureSize=Object(vec2f32[\"a\" /* c */])(),this._haloColor=Object(vec4f32[\"a\" /* c */])(),this._sdfColor=Object(vec4f32[\"a\" /* c */])(),this._color=Object(vec4f32[\"a\" /* c */])()}dispose(){}drawMany(t,e){const{drawPhase:i,styleLayerUID:o}=t,a=t.styleLayer;let r;i===enums[\"c\" /* WGLDrawPhase */].HITTEST&&(r=Object(number[\"c\" /* u32to4Xu8 */])(o+1)),this._drawIcons(t,a,e,r),this._drawText(t,a,e,r)}_drawIcons(i,o,a,r){const{context:n,displayLevel:f,drawPhase:m,painter:h,state:d,styleLayerUID:p}=i;let _,g=!1;for(const t of a)if(t.layerData.has(p)&&(_=t.layerData.get(p),_.iconPerPageElementsMap.size>0)){g=!0;break}if(!g)return;const y=o.hasDataDrivenIconSize?1:o.getLayoutValue(\"icon-size\",f),U=o.hasDataDrivenIconColor?WGLBrushVTLSymbol_u:o.getPaintValue(\"icon-color\",f),x=o.hasDataDrivenIconOpacity?1:o.getPaintValue(\"icon-opacity\",f),P=o.getPaintValue(\"icon-translate\",f),T=o.getPaintValue(\"icon-translate-anchor\",f),v=h.getVectorTileProgramCache(),M=U[3]*x;this._color[0]=M*U[0],this._color[1]=M*U[1],this._color[2]=M*U[2],this._color[3]=M;let V=o.getLayoutValue(\"icon-rotation-alignment\",f);2===V&&(V=0===o.getLayoutValue(\"symbol-placement\",f)?1:0);const D=0===V,E=o.getLayoutValue(\"icon-keep-upright\",f)&&D,S=_.isIconSDF,w=o.hasDataDrivenIcon,z=m===enums[\"c\" /* WGLDrawPhase */].HITTEST,C=(z?1:0)<<2|(w?1:0)<<1|(S?1:0),L=this._iconProgramOptions;L.id=z,L.dd=w,L.sdf=S;const b=v.getProgram(4,C,L);if(n.bindProgram(b),S){const t=o.getPaintValue(\"icon-halo-color\",f),e=o.getPaintValue(\"icon-halo-width\",f);b.setUniform4f(\"u_outlineColor\",t[0],t[1],t[2],t[3]),b.setUniform1f(\"u_outlineSize\",e)}b.setUniformMatrix3fv(\"u_displayViewMat3\",0===V?d.displayViewMat3:d.displayMat3),b.setUniformMatrix3fv(\"u_displayMat3\",1===T?d.displayMat3:d.displayViewMat3),b.setUniform2fv(\"u_iconTranslation\",P),b.setUniform1f(\"u_depth\",o.z),b.setUniform1f(\"u_mapRotation\",Object(GeometryUtils[\"b\" /* degToByte */])(d.rotation)),b.setUniform1f(\"u_keepUpright\",E?1:0),b.setUniform1f(\"u_level\",10*f),b.setUniform1i(\"u_texture\",definitions[\"I\" /* VTL_TEXTURE_BINDING_UNIT_SPRITES */]),b.setUniform1f(\"u_size\",y),b.setUniform4fv(\"u_color\",this._color),b.setUniform1f(\"u_opacity\",1),b.setUniform1f(\"u_fadeDuration\",config[\"d\" /* FADE_DURATION */]/1e3),z&&b.setUniform4fv(\"u_id\",r);for(const e of a){if(!e.layerData.has(p))continue;if(_=e.layerData.get(p),0===_.iconPerPageElementsMap.size)continue;_.prepareForRendering(n,v),_.updateOpacityInfo();const o=_.iconVertexArrayObject;if(!Object(maybe[\"g\" /* isNone */])(o)){n.bindVAO(o),b.setUniformMatrix3fv(\"u_dvsMat3\",e.transforms.dvs),b.setUniform1f(\"u_time\",(performance.now()-_.lastOpacityUpdate)/1e3);for(const[t,o]of _.iconPerPageElementsMap)this._renderIconRange(i,b,o,t,e)}}}_renderIconRange(t,i,o,a,r){const{context:s,spriteMosaic:n}=t;this._spritesTextureSize[0]=n.getWidth(a)/4,this._spritesTextureSize[1]=n.getHeight(a)/4,i.setUniform2fv(\"u_mosaicSize\",this._spritesTextureSize),n.bind(s,9729,a,definitions[\"I\" /* VTL_TEXTURE_BINDING_UNIT_SPRITES */]),s.setStencilTestEnabled(!0),s.setStencilFunction(516,255,255),s.setStencilWriteMask(0),s.drawElements(4,o[1],5125,Uint32Array.BYTES_PER_ELEMENT*o[0]),r.triangleCount+=o[1]/3}_drawText(e,o,r,n){const{context:f,displayLevel:m,drawPhase:h,glyphMosaic:d,painter:p,pixelRatio:_,state:g,styleLayerUID:y}=e;let U,x=!1;for(const t of r)if(t.layerData.has(y)&&(U=t.layerData.get(y),U.glyphPerPageElementsMap.size>0)){x=!0;break}if(!x)return;let P=o.getLayoutValue(\"text-rotation-alignment\",m);2===P&&(P=0===o.getLayoutValue(\"symbol-placement\",m)?1:0);const T=0===P,v=o.getLayoutValue(\"text-keep-upright\",m)&&T,M=h===enums[\"c\" /* WGLDrawPhase */].HITTEST,V=.8*3/_,D=o.hasDataDrivenTextSize?1:o.getLayoutValue(\"text-size\",m),E=o.hasDataDrivenTextColor?WGLBrushVTLSymbol_u:o.getPaintValue(\"text-color\",m),S=o.hasDataDrivenTextOpacity?1:o.getPaintValue(\"text-opacity\",m),w=o.getPaintValue(\"text-halo-color\",m),z=o.getPaintValue(\"text-halo-width\",m),C=3*o.getPaintValue(\"text-halo-blur\",m),L=3*z,b=p.getVectorTileProgramCache(),I=E[3]*S;this._sdfColor[0]=I*E[0],this._sdfColor[1]=I*E[1],this._sdfColor[2]=I*E[2],this._sdfColor[3]=I;const O=w[3]*S;this._haloColor[0]=O*w[0],this._haloColor[1]=O*w[1],this._haloColor[2]=O*w[2],this._haloColor[3]=O,this._glyphTextureSize||(this._glyphTextureSize=Object(vec2f32[\"b\" /* f */])(d.width/4,d.height/4));const R=o.getPaintValue(\"text-translate\",m),j=o.getPaintValue(\"text-translate-anchor\",m),k=o.hasDataDrivenText,A=(M?1:0)<<1|(k?1:0),B=this._sdfProgramOptions;B.id=M,B.dd=k;const F=b.getProgram(6,A,B);f.bindProgram(F),F.setUniformMatrix3fv(\"u_displayViewMat3\",0===P?g.displayViewMat3:g.displayMat3),F.setUniformMatrix3fv(\"u_displayMat3\",1===j?g.displayMat3:g.displayViewMat3),F.setUniform2fv(\"u_textTranslation\",R),F.setUniform1f(\"u_depth\",o.z+152587890625e-16),F.setUniform2fv(\"u_mosaicSize\",this._glyphTextureSize),F.setUniform1f(\"u_mapRotation\",Object(GeometryUtils[\"b\" /* degToByte */])(g.rotation)),F.setUniform1f(\"u_keepUpright\",v?1:0),F.setUniform1f(\"u_level\",10*m),F.setUniform1i(\"u_texture\",definitions[\"H\" /* VTL_TEXTURE_BINDING_UNIT_GLYPHS */]),F.setUniform1f(\"u_size\",D),F.setUniform1f(\"u_antialiasingWidth\",V),F.setUniform1f(\"u_opacity\",1),F.setUniform1f(\"u_fadeDuration\",config[\"d\" /* FADE_DURATION */]/1e3),M&&F.setUniform4fv(\"u_id\",n);for(const e of r){if(!e.layerData.has(y))continue;if(U=e.layerData.get(y),0===U.glyphPerPageElementsMap.size)continue;U.prepareForRendering(f,b),U.updateOpacityInfo();const i=U.textVertexArrayObject;if(Object(maybe[\"g\" /* isNone */])(i))continue;f.bindVAO(i),F.setUniformMatrix3fv(\"u_dvsMat3\",e.transforms.dvs),f.setStencilTestEnabled(!0),f.setStencilFunction(516,255,255),f.setStencilWriteMask(0);const o=(performance.now()-U.lastOpacityUpdate)/1e3;F.setUniform1f(\"u_time\",o),U.glyphPerPageElementsMap.forEach(((t,i)=>{this._renderGlyphRange(f,t,i,d,F,w[3],z,C,L,e)}))}}_renderGlyphRange(t,e,o,a,r,s,n,l,f,c){a.bind(t,9729,o,definitions[\"H\" /* VTL_TEXTURE_BINDING_UNIT_GLYPHS */]),s>0&&n>0&&(r.setUniform4fv(\"u_color\",this._haloColor),r.setUniform1f(\"u_halo\",1),r.setUniform1f(\"u_edgeDistance\",f),r.setUniform1f(\"u_edgeBlur\",l),t.drawElements(4,e[1],5125,Uint32Array.BYTES_PER_ELEMENT*e[0]),c.triangleCount+=e[1]/3),this._sdfColor[3]>0&&(r.setUniform4fv(\"u_color\",this._sdfColor),r.setUniform1f(\"u_halo\",0),r.setUniform1f(\"u_edgeDistance\",0),r.setUniform1f(\"u_edgeBlur\",0),t.drawElements(4,e[1],5125,Uint32Array.BYTES_PER_ELEMENT*e[0]),c.triangleCount+=e[1]/3)}}\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/RandomLCG.js\nvar RandomLCG = __webpack_require__(\"iA3P\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/Texture.js\nvar Texture = __webpack_require__(\"of9L\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/materialKey/MaterialKey.js\nvar MaterialKey = __webpack_require__(\"GMaR\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrush.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var WGLGeometryBrush = (class extends WGLBrush[\"a\" /* default */]{prepareState({context:t},e,i){const r=i&&-1!==i.indexOf(\"id\");t.setBlendingEnabled(!r),t.setBlendFunctionSeparate(1,771,1,771),t.setColorMask(!0,!0,!0,!0),t.setStencilWriteMask(0),t.setStencilTestEnabled(!0),t.setStencilFunction(514,e.stencilRef,255)}draw(t,e,i){if(e.commitChanges(t),!e.visible)return;const r=this.getGeometryType(),s=e.getDisplayList(),a=e.getGeometry(r);a&&s&&(t.timeline.begin(this.name),t.attributeView.bindTextures(t.context),s.byType(r,(r=>{this.drawGeometry(t,e,r,a,i)})),t.timeline.end(this.name))}_getVAO(t,e,i,r){return r.vao||(r.vao=new VertexArrayObject[\"a\" /* default */](t,i,e,r.vertexBufferMap,r.indexBuffer)),r.vao}_setSharedUniforms(s,a,n){s.setUniform1f(\"u_pixelRatio\",a.pixelRatio),s.setUniformMatrix3fv(\"u_dvsMat3\",n.transforms.dvs),s.setUniformMatrix3fv(\"u_displayViewMat3\",a.state.displayViewMat3),s.setUniform1i(\"u_attributeTextureSize\",a.attributeView.size),s.setUniform1i(\"u_attributeData0\",definitions[\"s\" /* TEXTURE_BINDING_ATTRIBUTE_DATA_0 */]),s.setUniform1i(\"u_attributeData1\",definitions[\"t\" /* TEXTURE_BINDING_ATTRIBUTE_DATA_1 */]),s.setUniform1i(\"u_attributeData2\",definitions[\"u\" /* TEXTURE_BINDING_ATTRIBUTE_DATA_2 */]),s.setUniform1i(\"u_attributeData3\",definitions[\"v\" /* TEXTURE_BINDING_ATTRIBUTE_DATA_3 */])}});\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrushFill.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var WGLGeometryBrushFill = (class extends WGLGeometryBrush{constructor(){super(...arguments),this._dotTextureSize=0,this._dotTextures=null,this._dotSamplers=new Int32Array([definitions[\"A\" /* TEXTURE_BINDING_RENDERER_0 */],definitions[\"B\" /* TEXTURE_BINDING_RENDERER_1 */]])}dispose(){this._disposeTextures()}getGeometryType(){return enums[\"d\" /* WGLGeometryType */].FILL}drawGeometry(e,t,o,r,s){const{context:l,painter:d,rendererInfo:u,requiredLevel:m}=e,{indexCount:c,indexFrom:_,materialKey:f}=o,p=MaterialKey[\"a\" /* FillMaterialKey */].load(f),{bufferLayouts:x,attributes:v}=(e=>Object(Utils[\"f\" /* createProgramDescriptor */])(e.data,{geometry:[{location:0,name:\"a_pos\",count:2,type:5122},{location:1,name:\"a_id\",count:4,type:5121},...e.dotDensity?[]:[{location:2,name:\"a_color\",count:4,type:5121,normalized:!0},{location:3,name:\"a_tlbr\",count:4,type:5123},{location:4,name:\"a_aux1\",count:4,type:5121},{location:5,name:\"a_aux2\",count:2,type:5123},{location:6,name:\"a_aux3\",count:4,type:5121}],...e.dotDensity?[{location:2,name:\"a_inverseArea\",count:1,type:5126}]:[]]}))(p),h=d.materialManager.getMaterialProgram(e,p,\"materials/fill\",v,s),y=this._getVAO(l,x,v,r);if(l.bindProgram(h),l.bindVAO(y),this._setSharedUniforms(h,e,t),p.textureBinding){d.textureManager.bindTextures(l,h,p);const o=1/Math.pow(2,m-t.key.level)/e.pixelRatio;h.setUniform1f(\"u_zoomFactor\",o)}if(p.vvColor&&(h.setUniform1fv(\"u_vvColorValues\",u.vvColorValues),h.setUniform4fv(\"u_vvColors\",u.vvColors)),p.vvOpacity&&(h.setUniform1fv(\"u_vvOpacityValues\",u.vvOpacityValues),h.setUniform1fv(\"u_vvOpacities\",u.vvOpacities)),p.dotDensity){const o=definitions[\"F\" /* TILE_SIZE */]/u.ddDotSize,r=o*window.devicePixelRatio*o*window.devicePixelRatio,s=1/Math.pow(2,m-t.key.level),a=1/s*(1/s),n=u.ddDotScale?e.state.scale/u.ddDotScale:1;h.setUniform1f(\"u_tileZoomFactor\",s),h.setUniform1f(\"u_tileDotsOverArea\",r/(definitions[\"F\" /* TILE_SIZE */]*window.devicePixelRatio*definitions[\"F\" /* TILE_SIZE */]*window.devicePixelRatio)),h.setUniformMatrix4fv(\"u_dotColors\",u.ddColors),h.setUniform4fv(\"u_isActive\",u.ddActiveDots),h.setUniform4fv(\"u_dotBackgroundColor\",u.ddBackgroundColor),h.setUniform1f(\"u_dotValue\",Math.max(1,u.ddDotValue*n*a)),this._bindDotDensityTextures(l,h,u,o)}l.drawElements(4,c,5125,Uint32Array.BYTES_PER_ELEMENT*_),l.bindVAO(null)}_disposeTextures(){if(this._dotTextures){for(let e=0;e<this._dotTextures.length;e++)this._dotTextures[e].dispose();this._dotTextures=null}}_bindDotDensityTextures(e,t,o,i){const r=this._createDotDensityTextures(e,i,o.ddSeed);t.setUniform1iv(\"u_dotTextures\",this._dotSamplers);for(let t=0;t<r.length;t++)e.bindTexture(r[t],this._dotSamplers[t])}_createDotDensityTextures(t,o,i){if(this._dotTextureSize===o&&this._seed===i||(this._disposeTextures(),this._dotTextureSize=o,this._seed=i),null===this._dotTextures){const r=new RandomLCG[\"a\" /* default */](i);this._dotTextures=[this._allocDotDensityTexture(t,o,r),this._allocDotDensityTexture(t,o,r)]}return this._dotTextures}_allocDotDensityTexture(e,t,o){const i=new Float32Array(t*t*4);for(let e=0;e<i.length;e++)i[e]=o.getFloat();return new Texture[\"a\" /* default */](e,{wrapMode:10497,pixelFormat:6408,dataType:5126,samplingMode:9728,width:t,height:t},i)}});\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrushLabel.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var WGLGeometryBrushLabel = (class extends WGLGeometryBrush{dispose(){}getGeometryType(){return enums[\"d\" /* WGLGeometryType */].LABEL}drawGeometry(e,o,i,n,l){const{context:r,painter:s,state:m,rendererInfo:u}=e,{indexCount:f,indexFrom:d,materialKey:v}=i,c=MaterialKey[\"b\" /* LabelMaterialKey */].load(v),p=c.mapAligned?1:0;if(!p&&Math.abs(o.key.level-Math.round(100*e.displayLevel)/100)>=1)return;const{bufferLayouts:S,attributes:y}=(e=>Object(Utils[\"f\" /* createProgramDescriptor */])(e.data,{geometry:[{location:0,name:\"a_pos\",count:2,type:5122},{location:1,name:\"a_id\",count:4,type:5121},{location:2,name:\"a_color\",count:4,type:5121,normalized:!0},{location:3,name:\"a_haloColor\",count:4,type:5121,normalized:!0},{location:4,name:\"a_texAndSize\",count:4,type:5121},{location:5,name:\"a_refSymbolAndPlacementOffset\",count:4,type:5121},{location:6,name:\"a_glyphData\",count:4,type:5121},{location:7,name:\"a_vertexOffset\",count:2,type:5122},{location:8,name:\"a_texCoords\",count:2,type:5123}]}))(c),_=s.materialManager.getMaterialProgram(e,c,\"materials/label\",y,l),z=this._getVAO(r,S,y,n);e.context.setStencilFunction(514,0,255),r.bindProgram(_),r.bindVAO(z),this._setSharedUniforms(_,e,o),s.textureManager.bindTextures(r,_,c);const M=1===p?m.displayViewMat3:m.displayMat3;if(c.vvSizeMinMaxValue&&_.setUniform4fv(\"u_vvSizeMinMaxValue\",u.vvSizeMinMaxValue),c.vvSizeScaleStops&&_.setUniform1f(\"u_vvSizeScaleStopsValue\",u.vvSizeScaleStopsValue),c.vvSizeFieldStops){const e=u.getSizeVVFieldStops(o.key.level);_.setUniform1fv(\"u_vvSizeFieldStopsValues\",e.values),_.setUniform1fv(\"u_vvSizeFieldStopsSizes\",e.sizes)}c.vvSizeUnitValue&&_.setUniform1f(\"u_vvSizeUnitValueWorldToPixelsRatio\",u.vvSizeUnitValueToPixelsRatio),_.setUniform1f(\"u_mapRotation\",Math.floor(m.rotation/360*254)),_.setUniform1f(\"u_mapAligned\",p),_.setUniformMatrix3fv(\"u_displayMat3\",M),_.setUniform1f(\"u_opacity\",1),_.setUniform1f(\"u_zoomLevel\",Math.round(10*e.displayLevel)),_.setUniform2fv(\"u_screenSize\",e.state.size),_.setUniform1f(\"u_isHalo\",1),r.drawElements(4,f,5125,Uint32Array.BYTES_PER_ELEMENT*d),_.setUniform1f(\"u_isHalo\",0),r.drawElements(4,f,5125,Uint32Array.BYTES_PER_ELEMENT*d),r.bindVAO(null),r.setStencilTestEnabled(!0),r.setBlendingEnabled(!0)}});\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrushLine.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var WGLGeometryBrushLine = (class extends WGLGeometryBrush{dispose(){}getGeometryType(){return enums[\"d\" /* WGLGeometryType */].LINE}drawGeometry(e,i,o,n,l){const{context:r,painter:s,rendererInfo:v,requiredLevel:u}=e,{indexFrom:m,indexCount:c,materialKey:f}=o,p=MaterialKey[\"c\" /* LineMaterialKey */].load(f),{bufferLayouts:d,attributes:S}=(e=>Object(Utils[\"f\" /* createProgramDescriptor */])(e.data,{geometry:[{location:0,name:\"a_pos\",count:2,type:5122},{location:1,name:\"a_id\",count:4,type:5121},{location:2,name:\"a_color\",count:4,type:5121,normalized:!0},{location:3,name:\"a_offsetAndNormal\",count:4,type:5120},{location:4,name:\"a_accumulatedDistanceAndHalfWidth\",count:2,type:5123},{location:5,name:\"a_tlbr\",count:4,type:5123},{location:6,name:\"a_segmentDirection\",count:4,type:5120},{location:7,name:\"a_aux\",count:2,type:5123}]}))(p),_=s.materialManager.getMaterialProgram(e,p,\"materials/line\",S,l),y=this._getVAO(r,d,S,n),U=1/e.pixelRatio;r.bindProgram(_),r.bindVAO(y),this._setSharedUniforms(_,e,i),p.textureBinding&&s.textureManager.bindTextures(r,_,p);const V=Math.pow(2,u-i.key.level)/e.pixelRatio;if(_.setUniform1f(\"u_zoomFactor\",V),_.setUniform1f(\"u_blur\",0+U),_.setUniform1f(\"u_antialiasing\",U),p.vvSizeMinMaxValue&&_.setUniform4fv(\"u_vvSizeMinMaxValue\",v.vvSizeMinMaxValue),p.vvSizeScaleStops&&_.setUniform1f(\"u_vvSizeScaleStopsValue\",v.vvSizeScaleStopsValue),p.vvSizeFieldStops){const e=v.getSizeVVFieldStops(i.key.level);_.setUniform1fv(\"u_vvSizeFieldStopsValues\",e.values),_.setUniform1fv(\"u_vvSizeFieldStopsSizes\",e.sizes)}p.vvSizeUnitValue&&_.setUniform1f(\"u_vvSizeUnitValueWorldToPixelsRatio\",v.vvSizeUnitValueToPixelsRatio),p.vvColor&&(_.setUniform1fv(\"u_vvColorValues\",v.vvColorValues),_.setUniform4fv(\"u_vvColors\",v.vvColors)),p.vvOpacity&&(_.setUniform1fv(\"u_vvOpacityValues\",v.vvOpacityValues),_.setUniform1fv(\"u_vvOpacities\",v.vvOpacities)),r.setFaceCullingEnabled(!0),r.setFrontFace(2305),r.setCullFace(1029),r.drawElements(4,c,5125,Uint32Array.BYTES_PER_ELEMENT*m),r.setFaceCullingEnabled(!1),r.bindVAO(null)}});\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrushMarker.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var WGLGeometryBrushMarker = (class extends WGLGeometryBrush{dispose(){}getGeometryType(){return enums[\"d\" /* WGLGeometryType */].MARKER}drawGeometry(e,o,a,n,r){const{context:s,painter:v,rendererInfo:l,state:u}=e,{indexCount:m,indexFrom:p,materialKey:f}=a,c=MaterialKey[\"d\" /* MarkerMaterialKey */].load(f),{bufferLayouts:d,attributes:y}=(e=>Object(Utils[\"f\" /* createProgramDescriptor */])(e.data,{geometry:[{location:0,name:\"a_pos\",count:2,type:5122},{location:1,name:\"a_vertexOffset\",count:2,type:5122},{location:2,name:\"a_texCoords\",count:2,type:5123},{location:3,name:\"a_bitSetAndDistRatio\",count:4,type:5121},{location:4,name:\"a_id\",count:4,type:5121},{location:5,name:\"a_color\",count:4,type:5121,normalized:!0},{location:6,name:\"a_outlineColor\",count:4,type:5121,normalized:!0},{location:7,name:\"a_sizeAndOutlineWidth\",count:4,type:5121}]}))(c),S=v.materialManager.getMaterialProgram(e,c,\"materials/icon\",y,r),_=this._getVAO(s,d,y,n);s.bindProgram(S),s.bindVAO(_),c.textureBinding&&v.textureManager.bindTextures(s,S,c,!0),this._setSharedUniforms(S,e,o);const V=c.vvRotation?u.displayViewMat3:u.displayMat3;if(S.setUniformMatrix3fv(\"u_displayMat3\",V),c.vvSizeMinMaxValue&&S.setUniform4fv(\"u_vvSizeMinMaxValue\",l.vvSizeMinMaxValue),c.vvSizeScaleStops&&S.setUniform1f(\"u_vvSizeScaleStopsValue\",l.vvSizeScaleStopsValue),c.vvSizeFieldStops){const e=l.getSizeVVFieldStops(o.key.level);S.setUniform1fv(\"u_vvSizeFieldStopsValues\",e.values),S.setUniform1fv(\"u_vvSizeFieldStopsSizes\",e.sizes)}c.vvSizeUnitValue&&S.setUniform1f(\"u_vvSizeUnitValueWorldToPixelsRatio\",l.vvSizeUnitValueToPixelsRatio),c.vvColor&&(S.setUniform1fv(\"u_vvColorValues\",l.vvColorValues),S.setUniform4fv(\"u_vvColors\",l.vvColors)),c.vvOpacity&&(S.setUniform1fv(\"u_vvOpacityValues\",l.vvOpacityValues),S.setUniform1fv(\"u_vvOpacities\",l.vvOpacities)),c.vvRotation&&S.setUniform1f(\"u_vvRotationType\",\"geographic\"===l.vvMaterialParameters.vvRotationType?0:1),s.drawElements(4,m,5125,Uint32Array.BYTES_PER_ELEMENT*p),s.bindVAO(null)}});\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrushText.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var WGLGeometryBrushText = (class extends WGLGeometryBrush{dispose(){}getGeometryType(){return enums[\"d\" /* WGLGeometryType */].TEXT}drawGeometry(e,o,i,r,n){const{context:s,painter:l,rendererInfo:v,state:m}=e,{indexCount:u,indexFrom:f,materialKey:p}=i,c=MaterialKey[\"f\" /* TextMaterialKey */].load(p),{bufferLayouts:d,attributes:y}=(e=>Object(Utils[\"f\" /* createProgramDescriptor */])(e.data,{geometry:[{location:0,name:\"a_pos\",count:2,type:5122},{location:1,name:\"a_id\",count:4,type:5121},{location:2,name:\"a_color\",count:4,type:5121,normalized:!0},{location:3,name:\"a_haloColor\",count:4,type:5121,normalized:!0},{location:4,name:\"a_texFontSize\",count:4,type:5121},{location:5,name:\"a_aux\",count:4,type:5120},{location:6,name:\"a_vertexOffset\",count:2,type:5122},{location:7,name:\"a_texCoords\",count:2,type:5123}]}))(c),S=l.materialManager.getMaterialProgram(e,c,\"materials/text\",y,n),_=this._getVAO(s,d,y,r);if(s.bindProgram(S),s.bindVAO(_),this._setSharedUniforms(S,e,o),l.textureManager.bindTextures(s,S,c),S.setUniformMatrix3fv(\"u_displayMat3\",m.displayMat3),S.setUniformMatrix3fv(\"u_displayViewMat3\",m.displayViewMat3),c.vvSizeMinMaxValue&&S.setUniform4fv(\"u_vvSizeMinMaxValue\",v.vvSizeMinMaxValue),c.vvSizeScaleStops&&S.setUniform1f(\"u_vvSizeScaleStopsValue\",v.vvSizeScaleStopsValue),c.vvSizeFieldStops){const e=v.getSizeVVFieldStops(o.key.level);S.setUniform1fv(\"u_vvSizeFieldStopsValues\",e.values),S.setUniform1fv(\"u_vvSizeFieldStopsSizes\",e.sizes)}c.vvSizeUnitValue&&S.setUniform1f(\"u_vvSizeUnitValueWorldToPixelsRatio\",v.vvSizeUnitValueToPixelsRatio),c.vvColor&&(S.setUniform1fv(\"u_vvColorValues\",v.vvColorValues),S.setUniform4fv(\"u_vvColors\",v.vvColors)),c.vvOpacity&&(S.setUniform1fv(\"u_vvOpacityValues\",v.vvOpacityValues),S.setUniform1fv(\"u_vvOpacities\",v.vvOpacities)),c.vvRotation&&S.setUniform1f(\"u_vvRotationType\",\"geographic\"===v.vvMaterialParameters.vvRotationType?0:1),S.setUniform1f(\"u_isHalo\",1),s.drawElements(4,u,5125,Uint32Array.BYTES_PER_ELEMENT*f),S.setUniform1f(\"u_isHalo\",0),s.drawElements(4,u,5125,Uint32Array.BYTES_PER_ELEMENT*f),s.bindVAO(null)}});\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/rasterUtils.js\nvar rasterUtils = __webpack_require__(\"vrr1\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/raster/BrushRasterBitmap.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var BrushRasterBitmap = (class extends WGLBrush[\"a\" /* default */]{constructor(){super(...arguments),this._desc={lut:{vsPath:\"raster/lut\",fsPath:\"raster/lut\",attributes:{a_position:0,a_texcoord:1}},stretch:{vsPath:\"raster/stretch\",fsPath:\"raster/stretch\",attributes:{a_position:0,a_texcoord:1}},hillshade:{vsPath:\"raster/hillshade\",fsPath:\"raster/hillshade\",attributes:{a_position:0,a_texcoord:1}}},this._rendererUniformInfos=new Map}dispose(){this._quad&&this._quad.dispose()}prepareState({context:t},e){t.setBlendingEnabled(!0),t.setBlendFunctionSeparate(1,771,1,771),t.setColorMask(!0,!0,!0,!0),t.setStencilWriteMask(0),t.setStencilTestEnabled(!0),t.setStencilFunction(514,e.stencilRef,255)}draw(t,e){var r;if(!e.source)return;if(e.suspended)return;t.timeline.begin(this.name);const s=!(null!=(r=t.context.capabilities.textureFloat)&&r.textureFloatLinear);e.updateTexture(t);const a=this.getShaderVariations(e,s),i=t.painter.materialManager.getProgram(t,this._desc[e.symbolizerParameters.type],a);this.drawWithProgram(t.context,i,e),t.timeline.end(this.name)}drawWithProgram(o,c,l,d=1,u=[0,0],p=!1){this._quad||(this._quad=new VertexStream[\"a\" /* default */](o,[0,0,1,0,0,1,1,1]));const{symbolizerParameters:m,transformGrid:f,width:g,height:_,opacity:b}=l,x=m.type;o.bindProgram(c);const P=this.getShaderVariations(l),S=this.getUniformInfos(x,o,c,P),{names:y,textures:w}=l.getTextures();Object(rasterUtils[\"j\" /* setTextures */])(o,c,y,w);const U=Object(rasterUtils[\"d\" /* getBasicGridUniforms */])(d,u),v=Object(rasterUtils[\"f\" /* getCommonUniforms */])(f,[g,_],[l.source.width,l.source.height],b,p);if(Object(rasterUtils[\"k\" /* setUniforms */])(c,S,{u_coordScale:l.coordScale,u_dvsMat3:l.transforms.dvs,...U,...v}),m.colormap){const{colormap:t,colormapOffset:e}=m,a=Object(rasterUtils[\"e\" /* getColormapUniforms */])(t,e);Object(rasterUtils[\"k\" /* setUniforms */])(c,S,a)}if(\"stretch\"===m.type){const t=Object(rasterUtils[\"h\" /* getStretchUniforms */])(m);Object(rasterUtils[\"k\" /* setUniforms */])(c,S,t)}else if(\"hillshade\"===m.type){const t=Object(rasterUtils[\"g\" /* getShadedReliefUniforms */])(m);Object(rasterUtils[\"k\" /* setUniforms */])(c,S,t)}this._quad.draw()}getUniformInfos(t,e,r,s){const a=s.length>0?t+\"-\"+s.join(\"-\"):t;if(this._rendererUniformInfos.has(a))return this._rendererUniformInfos.get(a);const i=Object(rasterUtils[\"i\" /* getUniformLocationInfos */])(e,r);return this._rendererUniformInfos.set(a,i),i}getShaderVariations(t,e=!1){const r=[];return\"cubic\"===t.interpolation?r.push(\"bicubic\"):e&&\"bilinear\"===t.interpolation&&r.push(\"bilinear\"),t.isRendereredSource?r.push(\"noop\"):t.symbolizerParameters.colormap&&r.push(\"applyColormap\"),t.transformGrid&&r.push(\"applyProjection\"),r}});\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/brushes.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst brushes_g={marker:WGLGeometryBrushMarker,line:WGLGeometryBrushLine,fill:WGLGeometryBrushFill,text:WGLGeometryBrushText,label:WGLGeometryBrushLabel,clip:BrushClip,stencil:WGLBrushStencil[\"a\" /* default */],bitmap:BrushBitmap,raster:BrushRasterBitmap,tileInfo:WGLBrushInfo[\"a\" /* default */],vtlBackground:WGLBrushVTLBackground_f,vtlFill:WGLBrushVTLFill_f,vtlLine:WGLBrushVTLLine_f,vtlCircle:WGLBrushVTLCircle_s,vtlSymbol:WGLBrushVTLSymbol_m},G={vtlBackground:WGLBrushVTLBackground_f,vtlFill:WGLBrushVTLFill_f,vtlLine:WGLBrushVTLLine_f,vtlCircle:WGLBrushVTLCircle_s,vtlSymbol:WGLBrushVTLSymbol_m};\n\n\n/***/ }),\n\n/***/ \"SfCL\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ __webpack_exports__[\"a\"] = (class{constructor(e){this.readFile=e}resolveIncludes(e){return this.resolve(e)}resolve(e,t=new Map){if(t.has(e))return t.get(e);const r=this.read(e);if(!r)throw new Error(`cannot find shader file ${e}`);const s=/^[^\\S\\n]*#include\\s+<(\\S+)>[^\\S\\n]?/gm;let n=s.exec(r);const l=[];for(;null!=n;)l.push({path:n[1],start:n.index,length:n[0].length}),n=s.exec(r);let a=0,h=\"\";return l.forEach((e=>{h+=r.slice(a,e.start),h+=t.has(e.path)?\"\":this.resolve(e.path,t),a=e.start+e.length})),h+=r.slice(a),t.set(e,h),h}read(e){return this.readFile(e)}});\n\n\n/***/ }),\n\n/***/ \"XvKw\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export O */\n/* unused harmony export U */\n/* unused harmony export Z */\n/* unused harmony export a */\n/* unused harmony export b */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return n; });\n/* unused harmony export d */\n/* unused harmony export e */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return t; });\n/* unused harmony export g */\n/* unused harmony export h */\n/* unused harmony export i */\n/* unused harmony export j */\n/* unused harmony export o */\n/* unused harmony export u */\n/* unused harmony export v */\n/* unused harmony export z */\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nfunction n(){return new Float32Array(4)}function r(n){const r=new Float32Array(4);return r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r}function t(n,r,t,a){const e=new Float32Array(4);return e[0]=n,e[1]=r,e[2]=t,e[3]=a,e}function a(n,r){return new Float32Array(n,r,4)}function e(){return n()}function u(){return t(1,1,1,1)}function o(){return t(1,0,0,0)}function s(){return t(0,1,0,0)}function c(){return t(0,0,1,0)}function i(){return t(0,0,0,1)}const f=e(),l=u(),_=o(),w=s(),N=c(),U=i();var y=Object.freeze({__proto__:null,create:n,clone:r,fromValues:t,createView:a,zeros:e,ones:u,unitX:o,unitY:s,unitZ:c,unitW:i,ZEROS:f,ONES:l,UNIT_X:_,UNIT_Y:w,UNIT_Z:N,UNIT_W:U});\n\n\n/***/ }),\n\n/***/ \"b3VY\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/has.js\nvar has = __webpack_require__(\"wSAH\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/chunks/builtins.js\nvar builtins = __webpack_require__(\"n4uK\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/BufferObject.js\nvar BufferObject = __webpack_require__(\"fOQB\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/Texture.js\nvar Texture = __webpack_require__(\"of9L\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/VertexArrayObject.js\nvar VertexArrayObject = __webpack_require__(\"D6bk\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/FramebufferObject.js\nvar FramebufferObject = __webpack_require__(\"0meK\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/programUtils.js\nvar programUtils = __webpack_require__(\"1F90\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/RenderingContext.js + 7 modules\nvar RenderingContext = __webpack_require__(\"bfJE\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/chunks/vec4f32.js\nvar vec4f32 = __webpack_require__(\"XvKw\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrush.js\nvar WGLBrush = __webpack_require__(\"8HmA\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BackgroundPrograms.js\nvar BackgroundPrograms = __webpack_require__(\"IcFU\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/resolver.js + 1 modules\nvar resolver = __webpack_require__(\"vpBa\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/shaders/TileInfoPrograms.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst TileInfoPrograms_r={name:\"tileInfo\",shaders:{vertexShader:Object(resolver[\"a\" /* resolveIncludes */])(\"tileInfo/tileInfo.vert\"),fragmentShader:Object(resolver[\"a\" /* resolveIncludes */])(\"tileInfo/tileInfo.frag\")},attributes:{a_pos:0}};\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushInfo.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var WGLBrushInfo = __webpack_exports__[\"a\"] = (class extends WGLBrush[\"a\" /* default */]{constructor(){super(...arguments),this._color=Object(vec4f32[\"b\" /* f */])(1,0,0,1)}dispose(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null}prepareState({context:t}){t.setBlendingEnabled(!0),t.setBlendFunctionSeparate(1,771,1,771),t.setColorMask(!0,!0,!0,!0),t.setStencilWriteMask(0),t.setStencilTestEnabled(!1)}draw(t,e){const{context:r}=t;if(!e.isReady)return;this._loadWGLResources(r),r.bindVAO(this._outlineVertexArrayObject),r.bindProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv(\"u_dvsMat3\",e.transforms.dvs),this._outlineProgram.setUniform2f(\"u_coord_range\",e.coordRange[0],e.coordRange[1]),this._outlineProgram.setUniform1f(\"u_depth\",0),this._outlineProgram.setUniform4fv(\"u_color\",this._color),r.drawArrays(3,0,4),r.bindVAO();const i=this._getTexture(r,e);i&&(r.bindVAO(this._tileInfoVertexArrayObject),r.bindProgram(this._tileInfoProgram),r.bindTexture(i,0),this._tileInfoProgram.setUniformMatrix3fv(\"u_dvsMat3\",e.transforms.dvs),this._tileInfoProgram.setUniform1f(\"u_depth\",0),this._tileInfoProgram.setUniform2f(\"u_coord_ratio\",e.coordRange[0]/e.size[0],e.coordRange[1]/e.size[1]),this._tileInfoProgram.setUniform2f(\"u_delta\",8,8),this._tileInfoProgram.setUniform2f(\"u_dimensions\",i.descriptor.width,i.descriptor.height),r.drawArrays(5,0,4),r.bindVAO())}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const o=Object(programUtils[\"a\" /* createProgram */])(e,BackgroundPrograms[\"a\" /* background */]),s=Object(programUtils[\"a\" /* createProgram */])(e,TileInfoPrograms_r),l={geometry:[{name:\"a_pos\",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},u=new Int8Array([0,0,1,0,1,1,0,1]),m=BufferObject[\"a\" /* default */].createVertex(e,35044,u),c=new VertexArrayObject[\"a\" /* default */](e,BackgroundPrograms[\"a\" /* background */].attributes,l,{geometry:m}),f=new Int8Array([0,0,1,0,0,1,1,1]),d=BufferObject[\"a\" /* default */].createVertex(e,35044,f),g=new VertexArrayObject[\"a\" /* default */](e,TileInfoPrograms_r.attributes,l,{geometry:d});this._outlineProgram=o,this._tileInfoProgram=s,this._outlineVertexArrayObject=c,this._tileInfoVertexArrayObject=g}_getTexture(t,r){if(r.texture&&r.triangleCountReportedInDebug===r.triangleCount)return r.texture;r.triangleCountReportedInDebug=r.triangleCount,this._canvas||(this._canvas=document.createElement(\"canvas\"),this._canvas.setAttribute(\"id\",\"canvas2d\"),this._canvas.setAttribute(\"width\",\"300\"),this._canvas.setAttribute(\"height\",\"32\"),this._canvas.setAttribute(\"style\",\"display:none\"));const i=r.triangleCount;let o=r.key.id;r.triangleCount>0&&(o+=`, ${i}`);const s=this._canvas,n=s.getContext(\"2d\");return n.font=\"24px sans-serif\",n.textAlign=\"left\",n.textBaseline=\"top\",n.clearRect(0,0,300,32),i>1e5?(n.fillStyle=\"red\",n.fillRect(0,0,300,32),n.fillStyle=\"black\"):(n.clearRect(0,0,300,32),n.fillStyle=\"blue\"),n.fillText(o,0,0),r.texture=new Texture[\"a\" /* default */](t,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071},s),r.texture}});\n\n\n/***/ }),\n\n/***/ \"fOQB\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var _core_typedArrayUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"ohva\");\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nclass i{constructor(e,t,i,n,r){this._context=null,this._glName=null,this._bufferType=void 0,this._usage=35044,this._size=-1,this._indexType=void 0,this.id=s++,e.instanceCounter.increment(1,this),this._context=e,this._bufferType=t,this._usage=i,this._glName=this._context.gl.createBuffer(),n&&this.setData(n,r)}static createIndex(e,t,s,n){return new i(e,34963,t,s,n)}static createVertex(e,t,s){return new i(e,34962,t,s)}get glName(){return this._glName}get size(){return this._size}get usage(){return this._usage}get bufferType(){return this._bufferType}get indexType(){return this._indexType}get byteSize(){return 34962===this._bufferType?this._size:5125===this._indexType?4*this._size:2*this._size}dispose(){if(this._context){if(this._glName){this._context.gl.deleteBuffer(this._glName),this._glName=null}this._context.instanceCounter.decrement(1,this),this._context=null}}setData(i,s){if(!i)return;if(\"number\"==typeof i){if(i<0&&console.error(\"Buffer size cannot be negative!\"),34963===this._bufferType&&s)switch(this._indexType=s,this._size=i,s){case 5123:i*=2;break;case 5125:i*=4}}else{let s=i.byteLength;Object(_core_typedArrayUtil_js__WEBPACK_IMPORTED_MODULE_0__[/* isUint16Array */ \"i\"])(i)&&(s/=2,this._indexType=5123),Object(_core_typedArrayUtil_js__WEBPACK_IMPORTED_MODULE_0__[/* isUint32Array */ \"j\"])(i)&&(s/=4,this._indexType=5125),this._size=s}const n=this._context.getBoundVAO();this._context.bindVAO(null),this._context.bindBuffer(this);this._context.gl.bufferData(this._bufferType,i,this._usage),this._context.bindVAO(n)}setSubData(i,s=0,n=0,r){if(!i)return;(s<0||s>=this._size)&&console.error(\"offset is out of range!\");let h=s,o=n,u=r,f=i.byteLength;Object(_core_typedArrayUtil_js__WEBPACK_IMPORTED_MODULE_0__[/* isUint16Array */ \"i\"])(i)&&(f/=2,h*=2,o*=2,u*=2),Object(_core_typedArrayUtil_js__WEBPACK_IMPORTED_MODULE_0__[/* isUint32Array */ \"j\"])(i)&&(f/=4,h*=4,o*=4,u*=4),void 0===r&&(r=f-1),n>=r&&console.error(\"end must be bigger than start!\"),s+n-r>this._size&&console.error(\"An attempt to write beyond the end of the buffer!\");const _=this._context.getBoundVAO();this._context.bindVAO(null),this._context.bindBuffer(this);const a=this._context.gl,c=ArrayBuffer.isView(i)?i.buffer:i;a.bufferSubData(this._bufferType,h,c.slice(o,u)),this._context.bindVAO(_)}}let s=0;/* harmony default export */ __webpack_exports__[\"a\"] = (i);\n\n\n/***/ }),\n\n/***/ \"gjrC\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var _core_has_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"wSAH\");\n/* harmony import */ var _core_mathUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"OKTS\");\n/* harmony import */ var _chunks_builtins_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"n4uK\");\n/* harmony import */ var _webgl_BufferObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"fOQB\");\n/* harmony import */ var _webgl_VertexArrayObject_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"D6bk\");\n/* harmony import */ var _webgl_FramebufferObject_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"0meK\");\n/* harmony import */ var _webgl_RenderingContext_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"bfJE\");\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ __webpack_exports__[\"a\"] = (class{constructor(r,i){this.rctx=r,this._vertexBuffer=_webgl_BufferObject_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].createVertex(r,35044,new Uint16Array(i)),this._vao=new _webgl_VertexArrayObject_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"](r,{a_position:0},{geometry:[{name:\"a_position\",count:2,type:5122,offset:0,stride:4,normalized:!1}]},{geometry:this._vertexBuffer})}bind(){this._vao.bind()}unbind(){this._vao.unbind()}dispose(){this._vao.dispose(!1),this._vertexBuffer.dispose()}draw(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(5,0,4)}});\n\n\n/***/ }),\n\n/***/ \"hTmG\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export addDescriptor */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return f; });\n/* unused harmony export copyFramebufferToTexture */\n/* unused harmony export findAttribute */\n/* unused harmony export getBytesPerElement */\n/* unused harmony export getBytesPerElementFormat */\n/* unused harmony export getGpuMemoryUsage */\n/* unused harmony export getStride */\n/* unused harmony export getTypedArrayConstructor */\n/* unused harmony export hasAttribute */\n/* unused harmony export setBaseInstanceOffset */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return d; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return r; });\n/* harmony import */ var _core_has_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"wSAH\");\n/* harmony import */ var _core_maybe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"srIe\");\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nfunction r(e,r){return e.vertexBuffers[r].size/t(e.layout[r])}function t(e){return e[0].stride}function n(e){switch(e){case 5126:case 5124:case 5125:return 4;case 5122:case 5123:return 2;case 5120:case 5121:return 1;default:throw new Error(\"Unknown data type\")}}function i(e){switch(e){case 5120:return Int8Array;case 5126:return Float32Array;case 5124:return Int32Array;case 5122:return Int16Array;case 5121:return Uint8Array;case 5125:return Uint32Array;case 5123:return Uint16Array;default:throw new Error(\"Unknown data type\")}}function o(e,r,t,i,o,s){const a=n(i);if(e.length>0){const n=e[0].stride,c=n+a*t;e.forEach((e=>e.stride=c)),e.push({name:r,count:t,type:i,offset:n,stride:c,normalized:o,divisor:s})}else e.push({name:r,count:t,type:i,offset:0,stride:a*t,normalized:o,divisor:s})}function s(e,r){for(let t=0;t<e.length;t++)if(e[t].name===r)return!0;return!1}function a(e,r){for(let t=0;t<e.length;t++)if(e[t].name===r)return e[t];return null}function c(e,r,t,n,i=0){const o=e.getBoundFramebufferObject(),s=e.getBoundTexture(0);e.bindFramebuffer(r),e.bindTexture(t,0),e.gl.copyTexImage2D(e.gl.TEXTURE_2D,i,t.descriptor.pixelFormat,n[0],n[1],n[2],n[3],0),e.gl.flush(),e.bindFramebuffer(o),e.bindTexture(s,0)}function u(e,r){const t={};for(const n in e)t[n]=e[n].map((e=>e.divisor?{...e,baseInstance:r}:e));return t}function f(e,r,t,n,i){const o=e.gl,s=e.capabilities.instancing;e.bindBuffer(t);for(const e of n){const t=r[e.name],n=(i||(0+e.baseInstance?e.baseInstance:0))*e.stride;if(void 0===t&&console.error(`There is no location for vertex attribute '${e.name}' defined.`),e.baseInstance&&!e.divisor&&console.error(`Vertex attribute '${e.name}' uses baseInstanceOffset without divisor.`),e.count<=4)o.vertexAttribPointer(t,e.count,e.type,e.normalized,e.stride,e.offset+n),o.enableVertexAttribArray(t),e.divisor&&e.divisor>0&&s&&s.vertexAttribDivisor(t,e.divisor);else if(9===e.count)for(let r=0;r<3;r++)o.vertexAttribPointer(t+r,3,e.type,e.normalized,e.stride,e.offset+12*r+n),o.enableVertexAttribArray(t+r),e.divisor&&e.divisor>0&&s&&s.vertexAttribDivisor(t+r,e.divisor);else if(16===e.count)for(let r=0;r<4;r++)o.vertexAttribPointer(t+r,4,e.type,e.normalized,e.stride,e.offset+16*r+n),o.enableVertexAttribArray(t+r),e.divisor&&e.divisor>0&&s&&s.vertexAttribDivisor(t+r,e.divisor);else console.error(\"Unsupported vertex attribute element count: \"+e.count)}}function d(e,r,t,n){const i=e.gl,o=e.capabilities.instancing;e.bindBuffer(t);for(const e of n){const t=r[e.name];if(e.count<=4)i.disableVertexAttribArray(t),e.divisor&&e.divisor>0&&o&&o.vertexAttribDivisor(t,0);else if(9===e.count)for(let r=0;r<3;r++)i.disableVertexAttribArray(t+r),e.divisor&&e.divisor>0&&o&&o.vertexAttribDivisor(t+r,0);else if(16===e.count)for(let r=0;r<4;r++)i.disableVertexAttribArray(t+r),e.divisor&&e.divisor>0&&o&&o.vertexAttribDivisor(t+r,0);else console.error(\"Unsupported vertex attribute element count: \"+e.count)}e.unbindBuffer(34962)}function l(e){switch(e){case 6406:case 6409:return 1;case 6410:return 2;case 6407:return 3;case 6408:case 34041:return 4;case 33325:return 2;case 33326:case 35898:case 33327:return 4;case 33328:case 34842:return 8;case 34836:return 16;case 33189:return 2;case 34041:return 4;case 32854:return 2;case 36168:return 1}return 0}function b(r){if(Object(_core_maybe_js__WEBPACK_IMPORTED_MODULE_1__[/* isNone */ \"g\"])(r))return 0;if(\"colorAttachment\"in r)return r.glName?b(r.colorAttachment)+b(r.depthStencilAttachment):0;if(\"descriptor\"in r)return r.glName?b(r.descriptor):0;const t=r.internalFormat||\"pixelFormat\"in r&&r.pixelFormat;if(!t)return 0;const n=\"hasMipmap\"in r&&r.hasMipmap?1.3:1,i=r.width*r.height;return l(t)*i*n}\n\n\n/***/ }),\n\n/***/ \"jjdI\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/has.js\nvar has = __webpack_require__(\"wSAH\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/maybe.js\nvar maybe = __webpack_require__(\"srIe\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/webgl/reservedWordsGLSL3.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var reservedWordsGLSL3 = ([\"layout\",\"centroid\",\"smooth\",\"case\",\"mat2x2\",\"mat2x3\",\"mat2x4\",\"mat3x2\",\"mat3x3\",\"mat3x4\",\"mat4x2\",\"mat4x3\",\"mat4x4\",\"uint\",\"uvec2\",\"uvec3\",\"uvec4\",\"samplerCubeShadow\",\"sampler2DArray\",\"sampler2DArrayShadow\",\"isampler2D\",\"isampler3D\",\"isamplerCube\",\"isampler2DArray\",\"usampler2D\",\"usampler3D\",\"usamplerCube\",\"usampler2DArray\",\"coherent\",\"restrict\",\"readonly\",\"writeonly\",\"resource\",\"atomic_uint\",\"noperspective\",\"patch\",\"sample\",\"subroutine\",\"common\",\"partition\",\"active\",\"filter\",\"image1D\",\"image2D\",\"image3D\",\"imageCube\",\"iimage1D\",\"iimage2D\",\"iimage3D\",\"iimageCube\",\"uimage1D\",\"uimage2D\",\"uimage3D\",\"uimageCube\",\"image1DArray\",\"image2DArray\",\"iimage1DArray\",\"iimage2DArray\",\"uimage1DArray\",\"uimage2DArray\",\"image1DShadow\",\"image2DShadow\",\"image1DArrayShadow\",\"image2DArrayShadow\",\"imageBuffer\",\"iimageBuffer\",\"uimageBuffer\",\"sampler1DArray\",\"sampler1DArrayShadow\",\"isampler1D\",\"isampler1DArray\",\"usampler1D\",\"usampler1DArray\",\"isampler2DRect\",\"usampler2DRect\",\"samplerBuffer\",\"isamplerBuffer\",\"usamplerBuffer\",\"sampler2DMS\",\"isampler2DMS\",\"usampler2DMS\",\"sampler2DMSArray\",\"isampler2DMSArray\",\"usampler2DMSArray\",\"trunc\",\"round\",\"roundEven\",\"isnan\",\"isinf\",\"floatBitsToInt\",\"floatBitsToUint\",\"intBitsToFloat\",\"uintBitsToFloat\",\"packSnorm2x16\",\"unpackSnorm2x16\",\"packUnorm2x16\",\"unpackUnorm2x16\",\"packHalf2x16\",\"unpackHalf2x16\",\"outerProduct\",\"transpose\",\"determinant\",\"inverse\",\"texture\",\"textureSize\",\"textureProj\",\"textureLod\",\"textureOffset\",\"texelFetch\",\"texelFetchOffset\",\"textureProjOffset\",\"textureLodOffset\",\"textureProjLod\",\"textureProjLodOffset\",\"textureGrad\",\"textureGradOffset\",\"textureProjGrad\",\"textureProjGradOffset\"]);\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/chunks/builtins.js\nvar builtins = __webpack_require__(\"n4uK\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/webgl/ShaderTranspiler.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nvar ShaderTranspiler_n=[\"block-comment\",\"line-comment\",\"preprocessor\",\"operator\",\"integer\",\"float\",\"ident\",\"builtin\",\"keyword\",\"whitespace\",\"eof\",\"integer\"];function ShaderTranspiler_o(){var t,o,i,s=0,c=0,d=999,f=[],p=[],u=1,l=0,h=0,y=!1,g=!1,w=\"\";return function(e){return p=[],null!==e?function(e){var a;s=0,i=(w+=e).length;for(;t=w[s],s<i;){switch(a=s,d){case 0:s=x();break;case 1:s=_();break;case 2:s=v();break;case 3:s=j();break;case 4:s=L();break;case 11:s=O();break;case 5:s=D();break;case 9999:s=G();break;case 9:s=b();break;case 999:s=k()}if(a!==s)switch(w[a]){case\"\\n\":l=0,++u;break;default:++l}}return c+=s,w=w.slice(s),p}(e.replace?e.replace(/\\r\\n/g,\"\\n\"):e):function(t){f.length&&m(f.join(\"\"));return d=10,m(\"(eof)\"),p}()};function m(t){t.length&&p.push({type:ShaderTranspiler_n[d],data:t,position:h,line:u,column:l})}function k(){return f=f.length?[]:f,\"/\"===o&&\"*\"===t?(h=c+s-1,d=0,o=t,s+1):\"/\"===o&&\"/\"===t?(h=c+s-1,d=1,o=t,s+1):\"#\"===t?(d=2,h=c+s,s):/\\s/.test(t)?(d=9,h=c+s,s):(y=/\\d/.test(t),g=/[^\\w_]/.test(t),h=c+s,d=y?4:g?3:9999,s)}function b(){return/[^\\s]/g.test(t)?(m(f.join(\"\")),d=999,s):(f.push(t),o=t,s+1)}function v(){return\"\\r\"!==t&&\"\\n\"!==t||\"\\\\\"===o?(f.push(t),o=t,s+1):(m(f.join(\"\")),d=999,s)}function _(){return v()}function x(){return\"/\"===t&&\"*\"===o?(f.push(t),m(f.join(\"\")),d=999,s+1):(f.push(t),o=t,s+1)}function j(){if(\".\"===o&&/\\d/.test(t))return d=5,s;if(\"/\"===o&&\"*\"===t)return d=0,s;if(\"/\"===o&&\"/\"===t)return d=1,s;if(\".\"===t&&f.length){for(;E(f););return d=5,s}if(\";\"===t||\")\"===t||\"(\"===t){if(f.length)for(;E(f););return m(t),d=999,s+1}var e=2===f.length&&\"=\"!==t;if(/[\\w_\\d\\s]/.test(t)||e){for(;E(f););return d=999,s}return f.push(t),o=t,s+1}function E(t){for(var a,r,n=0;;){if(a=builtins[\"c\" /* o */].indexOf(t.slice(0,t.length+n).join(\"\")),r=builtins[\"c\" /* o */][a],-1===a){if(n--+t.length>0)continue;r=t.slice(0,1).join(\"\")}return m(r),h+=r.length,(f=f.slice(r.length)).length}}function O(){return/[^a-fA-F0-9]/.test(t)?(m(f.join(\"\")),d=999,s):(f.push(t),o=t,s+1)}function L(){return\".\"===t||/[eE]/.test(t)?(f.push(t),d=5,o=t,s+1):\"x\"===t&&1===f.length&&\"0\"===f[0]?(d=11,f.push(t),o=t,s+1):/[^\\d]/.test(t)?(m(f.join(\"\")),d=999,s):(f.push(t),o=t,s+1)}function D(){return\"f\"===t&&(f.push(t),o=t,s+=1),/[eE]/.test(t)||\"-\"===t&&/[eE]/.test(o)?(f.push(t),o=t,s+1):/[^\\d]/.test(t)?(m(f.join(\"\")),d=999,s):(f.push(t),o=t,s+1)}function G(){if(/[^\\d\\w_]/.test(t)){var e=f.join(\"\");return d=builtins[\"b\" /* l */].indexOf(e)>-1?8:builtins[\"a\" /* b */].indexOf(e)>-1?7:6,m(f.join(\"\")),d=999,s}return f.push(t),o=t,s+1}}function ShaderTranspiler_i(t){return e=t,a=ShaderTranspiler_o(),[].concat(a(e)).concat(a(null));var e,a}const ShaderTranspiler_s=[\"GL_OES_standard_derivatives\",\"GL_EXT_frag_depth\",\"GL_EXT_draw_buffers\",\"GL_EXT_shader_texture_lod\"];function ShaderTranspiler_c(t,e){for(let a=e-1;a>=0;a--){const e=t[a];if(\"whitespace\"!==e.type&&\"block-comment\"!==e.type){if(\"keyword\"!==e.type)break;if(\"attribute\"===e.data||\"in\"===e.data)return!0}}return!1}function ShaderTranspiler_d(t,e,a,r){r=r||a;for(const n of t)if(\"ident\"===n.type&&n.data===a){r in e?e[r]++:e[r]=0;return ShaderTranspiler_d(t,e,r+\"_\"+e[r],r)}return a}function ShaderTranspiler_f(t,e,a=\"afterVersion\"){function r(t,e){for(let a=e;a<t.length;a++){const e=t[a];if(\"operator\"===e.type&&\";\"===e.data)return a}return null}const n={data:\"\\n\",type:\"whitespace\"},o=e=>e<t.length&&/[^\\r\\n]$/.test(t[e].data);let i=function(t){let e=-1,n=0,o=-1;for(let i=0;i<t.length;i++){const s=t[i];if(\"preprocessor\"===s.type&&(s.data.match(/\\#(if|ifdef|ifndef)\\s+.+/)?++n:s.data.match(/\\#endif\\s*.*/)&&--n),\"afterVersion\"!==a&&\"afterPrecision\"!==a||\"preprocessor\"===s.type&&/^#version/.test(s.data)&&(o=Math.max(o,i)),\"afterPrecision\"===a&&\"keyword\"===s.type&&\"precision\"===s.data){const e=r(t,i);if(null===e)throw new Error(\"precision statement not followed by any semicolons!\");o=Math.max(o,e)}e<o&&0===n&&(e=i)}return e+1}(t);o(i-1)&&t.splice(i++,0,n);for(const a of e)t.splice(i++,0,a);o(i-1)&&o(i)&&t.splice(i,0,n)}function ShaderTranspiler_p(t,e,a,r=\"lowp\"){ShaderTranspiler_f(t,[{type:\"keyword\",data:\"out\"},{type:\"whitespace\",data:\" \"},{type:\"keyword\",data:r},{type:\"whitespace\",data:\" \"},{type:\"keyword\",data:a},{type:\"whitespace\",data:\" \"},{type:\"ident\",data:e},{type:\"operator\",data:\";\"}],\"afterPrecision\")}function ShaderTranspiler_u(t,e,a,r,n=\"lowp\"){ShaderTranspiler_f(t,[{type:\"keyword\",data:\"layout\"},{type:\"operator\",data:\"(\"},{type:\"keyword\",data:\"location\"},{type:\"whitespace\",data:\" \"},{type:\"operator\",data:\"=\"},{type:\"whitespace\",data:\" \"},{type:\"integer\",data:r.toString()},{type:\"operator\",data:\")\"},{type:\"whitespace\",data:\" \"},{type:\"keyword\",data:\"out\"},{type:\"whitespace\",data:\" \"},{type:\"keyword\",data:n},{type:\"whitespace\",data:\" \"},{type:\"keyword\",data:a},{type:\"whitespace\",data:\" \"},{type:\"ident\",data:e},{type:\"operator\",data:\";\"}],\"afterPrecision\")}function ShaderTranspiler_l(t,e){let a,r,n=-1;for(let o=e;o<t.length;o++){const e=t[o];if(\"operator\"===e.type&&(\"[\"===e.data&&(a=o),\"]\"===e.data)){r=o;break}\"integer\"===e.type&&(n=parseInt(e.data,10))}return a&&r&&t.splice(a,r-a+1),n}function ShaderTranspiler_h(e,a){const r=ShaderTranspiler_i(e);if(\"300 es\"===function(t,e=\"100\",a=\"300 es\"){const r=/^\\s*\\#version\\s+([0-9]+(\\s+[a-zA-Z]+)?)\\s*/;for(const n of t)if(\"preprocessor\"===n.type){const t=r.exec(n.data);if(t){const r=t[1].replace(/\\s\\s+/g,\" \");if(r===a)return r;if(r===e)return n.data=\"#version \"+a,e;throw new Error(\"unknown glsl version: \"+r)}}return t.splice(0,0,{type:\"preprocessor\",data:\"#version \"+a},{type:\"whitespace\",data:\"\\n\"}),null}(r,\"100\",\"300 es\"))throw new Error(\"shader is already glsl 300 es\");let n=null,o=null;const f={},h={};for(let e=0;e<r.length;++e){const i=r[e];switch(i.type){case\"keyword\":\"vertex\"===a&&\"attribute\"===i.data?i.data=\"in\":\"varying\"===i.data&&(i.data=\"vertex\"===a?\"out\":\"in\");break;case\"builtin\":if(/^texture(2D|Cube)(Proj)?(Lod|Grad)?(EXT)?$/.test(i.data.trim())&&(i.data=i.data.replace(/(2D|Cube|EXT)/g,\"\")),\"fragment\"===a&&\"gl_FragColor\"===i.data&&(n||(n=ShaderTranspiler_d(r,f,\"fragColor\"),ShaderTranspiler_p(r,n,\"vec4\")),i.data=n),\"fragment\"===a&&\"gl_FragData\"===i.data){const t=ShaderTranspiler_l(r,e+1),a=ShaderTranspiler_d(r,f,\"fragData\");ShaderTranspiler_u(r,a,\"vec4\",t,\"mediump\"),i.data=a}else\"fragment\"===a&&\"gl_FragDepthEXT\"===i.data&&(o||(o=ShaderTranspiler_d(r,f,\"gl_FragDepth\")),i.data=o);break;case\"ident\":if(reservedWordsGLSL3.indexOf(i.data)>=0){if(\"vertex\"===a&&ShaderTranspiler_c(r,e))throw new Error(\"attribute in vertex shader uses a name that is a reserved word in glsl 300 es\");i.data in h||(h[i.data]=ShaderTranspiler_d(r,f,i.data)),i.data=h[i.data]}}}for(let t=r.length-1;t>=0;--t){const e=r[t];if(\"preprocessor\"===e.type){const a=e.data.match(/\\#extension\\s+(.*)\\:/);if(a&&a[1]&&ShaderTranspiler_s.indexOf(a[1].trim())>=0){const e=r[t+1];r.splice(t,e&&\"whitespace\"===e.type?2:1)}const n=e.data.match(/\\#ifdef\\s+(.*)/);n&&n[1]&&ShaderTranspiler_s.indexOf(n[1].trim())>=0&&(e.data=\"#if 1\");const o=e.data.match(/\\#ifndef\\s+(.*)/);o&&o[1]&&ShaderTranspiler_s.indexOf(o[1].trim())>=0&&(e.data=\"#if 0\")}}return function(t){return t.map((t=>\"eof\"!==t.type?t.data:\"\")).join(\"\")}(r)}\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/webgl/Program.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nclass Program_o{constructor(t,i,o,n,e={}){if(this._context=null,this._glName=null,this._locations={},this.id=Program_r++,this._initialized=!1,this._vShader=null,this._fShader=null,this._defines={},this._nameToUniformLocation={},this._nameToAttribLocation={},this._nameToUniform1={},this._nameToUniform1v={},this._nameToUniform2={},this._nameToUniform3={},this._nameToUniform4={},this._nameToUniformMatrix3={},this._nameToUniformMatrix4={},t||console.error(\"RenderingContext isn't initialized!\"),0===i.length&&console.error(\"Shaders source should not be empty!\"),t.instanceCounter.increment(3,this),this._context=t,this._vertexShaderSource=i,this._fragmentShaderSource=o,Array.isArray(e))for(const t of e)this._defines[t]=\"1\";else this._defines=e;this._locations=n}get glName(){return this._glName}get locations(){return this._locations}getDefine(t){return this._defines[t]}dispose(){if(!this._context)return;const t=this._context.gl;if(this._vShader){const i=this._vShader;t.deleteShader(i),this._vShader=null}if(this._fShader){const i=this._fShader;t.deleteShader(i),this._fShader=null}this._glName&&(t.deleteProgram(this._glName),this._glName=null),this._context.instanceCounter.decrement(3,this),this._context=null}initialize(){if(this._initialized)return;this._vShader=this._loadShader(35633),this._fShader=this._loadShader(35632),this._vShader&&this._fShader||console.error(\"Error loading shaders!\");const t=this._context.gl,i=t.createProgram();t.attachShader(i,this._vShader),t.attachShader(i,this._fShader);for(const o in this._locations){const n=this._locations[o];t.bindAttribLocation(i,n,o)}t.linkProgram(i),this._glName=i,this._initialized=!0}getUniformLocation(t){return this.initialize(),void 0===this._nameToUniformLocation[t]&&(this._nameToUniformLocation[t]=this._context.gl.getUniformLocation(this._glName,t)),this._nameToUniformLocation[t]}hasUniform(t){return null!==this.getUniformLocation(t)}getAttribLocation(t){return this.initialize(),void 0===this._nameToAttribLocation[t]&&(this._nameToAttribLocation[t]=this._context.gl.getAttribLocation(this._glName,t)),this._nameToAttribLocation[t]}setUniform1i(t,i){const o=this._nameToUniform1[t];if(void 0===o||i!==o){this._context.bindProgram(this);this._context.gl.uniform1i(this.getUniformLocation(t),i),this._nameToUniform1[t]=i}}setUniform1iv(t,i){const r=this._nameToUniform1v[t];if(Program_n(r,i)){this._context.bindProgram(this);this._context.gl.uniform1iv(this.getUniformLocation(t),i),void 0===r?this._nameToUniform1v[t]=Program_o._arrayCopy(i):Program_o._arrayAssign(i,r)}}setUniform2iv(t,i){const r=this._nameToUniform2[t];if(Program_n(r,i)){this._context.bindProgram(this);this._context.gl.uniform2iv(this.getUniformLocation(t),i),void 0===r?this._nameToUniform2[t]=Program_o._arrayCopy(i):Program_o._arrayAssign(i,r)}}setUniform3iv(t,i){const r=this._nameToUniform3[t];if(Program_n(r,i)){this._context.bindProgram(this);this._context.gl.uniform3iv(this.getUniformLocation(t),i),void 0===r?this._nameToUniform3[t]=Program_o._arrayCopy(i):Program_o._arrayAssign(i,r)}}setUniform4iv(t,i){const r=this._nameToUniform4[t];if(Program_n(r,i)){this._context.bindProgram(this);this._context.gl.uniform4iv(this.getUniformLocation(t),i),void 0===r?this._nameToUniform4[t]=Program_o._arrayCopy(i):Program_o._arrayAssign(i,r)}}setUniform1f(t,i){const o=this._nameToUniform1[t];if(void 0===o||i!==o){this._context.bindProgram(this);this._context.gl.uniform1f(this.getUniformLocation(t),i),this._nameToUniform1[t]=i}}setUniform1fv(t,i){const r=this._nameToUniform1v[t];if(Program_n(r,i)){this._context.bindProgram(this);this._context.gl.uniform1fv(this.getUniformLocation(t),i),void 0===r?this._nameToUniform1v[t]=Program_o._arrayCopy(i):Program_o._arrayAssign(i,r)}}setUniform2f(t,i,o){const n=this._nameToUniform2[t];if(void 0===n||i!==n[0]||o!==n[1]){this._context.bindProgram(this);this._context.gl.uniform2f(this.getUniformLocation(t),i,o),void 0===n?this._nameToUniform2[t]=[i,o]:(n[0]=i,n[1]=o)}}setUniform2fv(t,i){const r=this._nameToUniform2[t];if(Program_n(r,i)){this._context.bindProgram(this);this._context.gl.uniform2fv(this.getUniformLocation(t),i),void 0===r?this._nameToUniform2[t]=Program_o._arrayCopy(i):Program_o._arrayAssign(i,r)}}setUniform3f(t,i,o,n){const r=this._nameToUniform3[t];if(void 0===r||i!==r[0]||o!==r[1]||n!==r[2]){this._context.bindProgram(this);this._context.gl.uniform3f(this.getUniformLocation(t),i,o,n),void 0===r?this._nameToUniform3[t]=[i,o,n]:(r[0]=i,r[1]=o,r[2]=n)}}setUniform3fv(t,i){const r=this._nameToUniform3[t];if(Program_n(r,i)){this._context.bindProgram(this);this._context.gl.uniform3fv(this.getUniformLocation(t),i),void 0===r?this._nameToUniform3[t]=Program_o._arrayCopy(i):Program_o._arrayAssign(i,r)}}setUniform4f(t,i,o,n,r){const e=this._nameToUniform4[t];if(void 0===e||i!==e[0]||o!==e[1]||n!==e[2]||r!==e[3]){this._context.bindProgram(this);this._context.gl.uniform4f(this.getUniformLocation(t),i,o,n,r),void 0===e?this._nameToUniform4[t]=[i,o,n,r]:(e[0]=i,e[1]=o,e[2]=n,e[3]=r)}}setUniform4fv(t,i){const r=this._nameToUniform4[t];if(Program_n(r,i)){this._context.bindProgram(this);this._context.gl.uniform4fv(this.getUniformLocation(t),i),void 0===r?this._nameToUniform4[t]=Program_o._arrayCopy(i):Program_o._arrayAssign(i,r)}}setUniformMatrix3fv(i,r,e=!1){const s=this._nameToUniformMatrix3[i];if(function(i,o){if(Object(maybe[\"g\" /* isNone */])(i))return!0;if(9!==i.length)return Program_n(i,o);return 9!==i.length||i[0]!==o[0]||i[1]!==o[1]||i[2]!==o[2]||i[3]!==o[3]||i[4]!==o[4]||i[5]!==o[5]||i[6]!==o[6]||i[7]!==o[7]||i[8]!==o[8]}(s,r)){this._context.bindProgram(this);this._context.gl.uniformMatrix3fv(this.getUniformLocation(i),e,r),void 0===s?this._nameToUniformMatrix3[i]=Program_o._arrayCopy(r):Program_o._arrayAssign(r,s)}}setUniformMatrix4fv(i,r,e=!1){const s=this._nameToUniformMatrix4[i];if(function(i,o){if(Object(maybe[\"g\" /* isNone */])(i))return!0;if(16!==i.length)return Program_n(i,o);return 16!==i.length||i[0]!==o[0]||i[1]!==o[1]||i[2]!==o[2]||i[3]!==o[3]||i[4]!==o[4]||i[5]!==o[5]||i[6]!==o[6]||i[7]!==o[7]||i[8]!==o[8]||i[9]!==o[9]||i[10]!==o[10]||i[11]!==o[11]||i[12]!==o[12]||i[13]!==o[13]||i[14]!==o[14]||i[15]!==o[15]}(s,r)){this._context.bindProgram(this);this._context.gl.uniformMatrix4fv(this.getUniformLocation(i),e,r),void 0===s?this._nameToUniformMatrix4[i]=Program_o._arrayCopy(r):Program_o._arrayAssign(r,s)}}assertCompatibleVertexAttributeLocations(t){const i=t.locations===this.locations;return i||console.error(\"VertexAttributeLocations are incompatible\"),i}static _padToThree(t){let i=t.toString();return t<1e3&&(i=(\"  \"+t).slice(-3)),i}_addLineNumbers(t){let i=2;return t.replace(/\\n/g,(()=>\"\\n\"+Program_o._padToThree(i++)+\":\"))}_loadShader(t){const o=35633===t;let n=o?this._vertexShaderSource:this._fragmentShaderSource,r=\"\";for(const t in this._defines)r+=`#define ${t} ${this._defines[t]}\\n`;n=r+n,\"webgl2\"===this._context.contextVersion&&(n=ShaderTranspiler_h(n,o?\"vertex\":\"fragment\"));const e=this._context.gl,s=e.createShader(t);return e.shaderSource(s,n),e.compileShader(s),s}static _arrayCopy(t){const i=[];for(let o=0;o<t.length;++o)i.push(t[o]);return i}static _arrayAssign(t,i){for(let o=0;o<t.length;++o)i[o]=t[o]}}function Program_n(i,o){if(Object(maybe[\"g\" /* isNone */])(i)||i.length!==o.length)return!0;for(let t=0;t<i.length;++t)if(i[t]!==o[t])return!0;return!1}let Program_r=0;/* harmony default export */ var Program = __webpack_exports__[\"a\"] = (Program_o);\n\n\n/***/ }),\n\n/***/ \"mgI5\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/has.js\nvar has = __webpack_require__(\"wSAH\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/maybe.js\nvar maybe = __webpack_require__(\"srIe\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/enums.js\nvar enums = __webpack_require__(\"yE7X\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/Container.js\nvar Container = __webpack_require__(\"AMBt\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/brushes.js + 14 modules\nvar brushes = __webpack_require__(\"Oxob\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/Logger.js\nvar Logger = __webpack_require__(\"6S2I\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/Error.js\nvar Error = __webpack_require__(\"zlDU\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/VertexArrayObject.js\nvar VertexArrayObject = __webpack_require__(\"D6bk\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/DisplayObject.js\nvar DisplayObject = __webpack_require__(\"fEsP\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/layers/graphics/OptimizedGeometry.js\nvar OptimizedGeometry = __webpack_require__(\"gVKr\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/layers/graphics/featureConversionUtils.js\nvar featureConversionUtils = __webpack_require__(\"ZlUD\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/chunks/vec2f64.js\nvar vec2f64 = __webpack_require__(\"AvGH\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/libs/earcut/earcut.js\nvar earcut = __webpack_require__(\"+yyC\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/chunks/vec2.js\nvar vec2 = __webpack_require__(\"M0lq\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/BufferObject.js\nvar BufferObject = __webpack_require__(\"fOQB\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/number.js\nvar number = __webpack_require__(\"0RS7\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/Mesh2D.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst Mesh2D_m=Logger[\"a\" /* default */].getLogger(\"esri.views.2d.engine.webgl.Mesh2D\"),Mesh2D_u=(e,t,r,o)=>{let n=0;for(let o=1;o<r;o++){const r=e[2*(t+o-1)],s=e[2*(t+o-1)+1];n+=(e[2*(t+o)]-r)*(e[2*(t+o)+1]+s)}return o?n>0:n<0},y=({coords:e,lengths:t},r)=>{const o=[];for(let n=0,s=0;n<t.length;s+=t[n],n+=1){const c=s,a=[];for(;n<t.length-1&&Mesh2D_u(e,s+t[n],t[n+1],r);n+=1,s+=t[n])a.push(s+t[n]-c);const f=e.slice(2*c,2*(s+t[n])),h=Object(earcut[\"b\" /* earcut */])(f,a,2);for(const e of h)o.push(e+c)}return o};class Mesh2D_x{constructor(e,t,r,o=!1){this._cache={},this.vertices=e,this.indices=t,this.primitiveType=r,this.isMapSpace=o}static fromRect({x:e,y:t,width:r,height:o}){const n=e,s=t,c=n+r,i=s+o;return Mesh2D_x.fromScreenExtent({xmin:n,ymin:s,xmax:c,ymax:i})}static fromPath(e){const t=Object(featureConversionUtils[\"f\" /* convertFromNestedArray */])(new OptimizedGeometry[\"a\" /* default */],e.path,!1,!1),r=t.coords,s=new Uint32Array(y(t,!0)),c=new Uint32Array(r.length/2);for(let e=0;e<c.length;e++)c[e]=Object(number[\"a\" /* i1616to32 */])(Math.floor(r[2*e]),Math.floor(r[2*e+1]));return new Mesh2D_x({geometry:c},s,4)}static fromGeometry(e,t){const o=t.geometry.type;switch(o){case\"polygon\":return Mesh2D_x.fromPolygon(e,t.geometry);case\"extent\":return Mesh2D_x.fromMapExtent(e,t.geometry);default:return Mesh2D_m.error(new Error[\"a\" /* default */](\"mapview-bad-type\",`Unable to create a mesh from type ${o}`,t)),Mesh2D_x.fromRect({x:0,y:0,width:1,height:1})}}static fromPolygon(e,t){const r=Object(featureConversionUtils[\"g\" /* convertFromPolygon */])(new OptimizedGeometry[\"a\" /* default */],t,!1,!1),n=r.coords,i=new Uint32Array(y(r,!1)),f=new Uint32Array(n.length/2),m=Object(vec2f64[\"a\"])(),u=Object(vec2f64[\"a\"])();for(let t=0;t<f.length;t++)Object(vec2[\"m\" /* s */])(m,n[2*t],n[2*t+1]),e.toScreen(u,m),f[t]=Object(number[\"a\" /* i1616to32 */])(Math.floor(u[0]),Math.floor(u[1]));return new Mesh2D_x({geometry:f},i,4,!0)}static fromScreenExtent({xmin:e,xmax:t,ymin:r,ymax:o}){const n={geometry:new Uint32Array([Object(number[\"a\" /* i1616to32 */])(e,r),Object(number[\"a\" /* i1616to32 */])(t,r),Object(number[\"a\" /* i1616to32 */])(e,o),Object(number[\"a\" /* i1616to32 */])(e,o),Object(number[\"a\" /* i1616to32 */])(t,r),Object(number[\"a\" /* i1616to32 */])(t,o)])},s=new Uint32Array([0,1,2,3,4,5]);return new Mesh2D_x(n,s,4)}static fromMapExtent(e,t){const[r,o]=e.toScreen([0,0],[t.xmin,t.ymin]),[n,s]=e.toScreen([0,0],[t.xmax,t.ymax]),c={geometry:new Uint32Array([Object(number[\"a\" /* i1616to32 */])(r,o),Object(number[\"a\" /* i1616to32 */])(n,o),Object(number[\"a\" /* i1616to32 */])(r,s),Object(number[\"a\" /* i1616to32 */])(r,s),Object(number[\"a\" /* i1616to32 */])(n,o),Object(number[\"a\" /* i1616to32 */])(n,s)])},i=new Uint32Array([0,1,2,3,4,5]);return new Mesh2D_x(c,i,4)}destroy(){Object(maybe[\"h\" /* isSome */])(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose();for(const t in this._cache.vertexBuffers)Object(maybe[\"h\" /* isSome */])(this._cache.vertexBuffers[t])&&this._cache.vertexBuffers[t].dispose()}get elementType(){return(e=>{switch(e.BYTES_PER_ELEMENT){case 1:return 5121;case 2:return 5123;case 4:return 5125;default:throw new Error[\"a\" /* default */](\"Cannot get DataType of array\")}})(this.indices)}getIndexBuffer(e,t=35044){return this._cache.indexBuffer||(this._cache.indexBuffer=BufferObject[\"a\" /* default */].createIndex(e,t,this.indices)),this._cache.indexBuffer}getVertexBuffers(e,t=35044){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce(((r,o)=>({...r,[o]:BufferObject[\"a\" /* default */].createVertex(e,t,this.vertices[o])})),{})),this._cache.vertexBuffers}}/* harmony default export */ var Mesh2D = (Mesh2D_x);\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/ClippingInfo.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst ClippingInfo_a=Logger[\"a\" /* default */].getLogger(\"esri.views.2d.engine.webgl.ClippingInfo\"),ClippingInfo_c=t=>parseFloat(t)/100;class ClippingInfo_n extends DisplayObject[\"a\" /* DisplayObject */]{constructor(t,e){super(),this._clip=e,this._cache={},this.stage=t,this._handle=e.watch(\"version\",(()=>this._invalidate())),this.ready()}static fromClipArea(t,e){return new ClippingInfo_n(t,e)}_destroyGL(){Object(maybe[\"h\" /* isSome */])(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),Object(maybe[\"h\" /* isSome */])(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(t,r,s,h){const[o,a]=r.size;if(\"geometry\"!==this._clip.type&&this._lastWidth===o&&this._lastHeight===a||(this._lastWidth=o,this._lastHeight=a,this._destroyGL()),Object(maybe[\"g\" /* isNone */])(this._cache.vao)){const e=this._createMesh(r,this._clip),o=e.getIndexBuffer(t),a=e.getVertexBuffers(t);this._cache.mesh=e,this._cache.vao=new VertexArrayObject[\"a\" /* default */](t,s,h,a,o)}return this._cache.vao}_invalidate(){this._destroyGL(),this.requestRender()}_createScreenRect(t,e){const[r,s]=t.size,i=\"string\"==typeof e.left?ClippingInfo_c(e.left)*r:e.left,h=\"string\"==typeof e.right?ClippingInfo_c(e.right)*r:e.right,o=\"string\"==typeof e.top?ClippingInfo_c(e.top)*s:e.top,a=\"string\"==typeof e.bottom?ClippingInfo_c(e.bottom)*s:e.bottom,n=i,p=o;return{x:n,y:p,width:Math.max(r-h-n,0),height:Math.max(s-a-p,0)}}_createMesh(t,e){switch(e.type){case\"rect\":return Mesh2D.fromRect(this._createScreenRect(t,e));case\"path\":return Mesh2D.fromPath(e);case\"geometry\":return Mesh2D.fromGeometry(t,e);default:return ClippingInfo_a.error(new Error[\"a\" /* default */](\"mapview-bad-type\",\"Unable to create ClippingInfo mesh from clip of type: ${clip.type}\")),Mesh2D.fromRect({x:0,y:0,width:1,height:1})}}}/* harmony default export */ var ClippingInfo = (ClippingInfo_n);\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/WGLContainer.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var WGLContainer = __webpack_exports__[\"a\"] = (class extends Container[\"a\" /* Container */]{constructor(){super(...arguments),this.name=this.constructor.name}set clips(e){this._clips=e,this.children.forEach((r=>r.clips=e)),this._updateClippingInfo()}doRender(e){const r=this.createRenderParams(e),{painter:t,globalOpacity:i,profiler:n,drawPhase:o}=r,a=o===enums[\"c\" /* WGLDrawPhase */].LABEL?1:i*this.computedOpacity;n.recordContainerStart(this.name),t.beforeRenderLayer(r,this._clippingInfos?255:0,a),this.updateTransforms(e.state),this.renderChildren(r),t.compositeLayer(r,a),n.recordContainerEnd()}renderChildren(r){Object(maybe[\"g\" /* isNone */])(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(r.painter));for(const e of this.children)e.beforeRender(r);for(const e of this._renderPasses)try{e.render(r)}catch(e){}for(const e of this.children)e.afterRender(r)}createRenderParams(e){return e}prepareRenderPasses(e){return[e.registerRenderPass({name:\"clip\",brushes:[brushes[\"a\" /* brushes */].clip],target:()=>this._clippingInfos,drawPhase:enums[\"c\" /* WGLDrawPhase */].MAP|enums[\"c\" /* WGLDrawPhase */].LABEL|enums[\"c\" /* WGLDrawPhase */].LABEL_ALPHA|enums[\"c\" /* WGLDrawPhase */].DEBUG|enums[\"c\" /* WGLDrawPhase */].HIGHLIGHT})]}updateTransforms(e){for(const r of this.children)r.setTransform(e)}onAttach(){super.onAttach(),this._updateClippingInfo()}onDetach(){super.onDetach(),this._updateClippingInfo()}_updateClippingInfo(){if(Object(maybe[\"h\" /* isSome */])(this._clippingInfos)&&(this._clippingInfos.forEach((e=>e.destroy())),this._clippingInfos=null),!this.stage)return;const e=this._clips;Object(maybe[\"h\" /* isSome */])(e)&&e.length&&(this._clippingInfos=e.items.map((e=>ClippingInfo.fromClipArea(this.stage,e)))),this.requestRender()}});\n\n\n/***/ }),\n\n/***/ \"vpBa\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ o; });\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/has.js\nvar has = __webpack_require__(\"wSAH\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/core/mathUtils.js\nvar mathUtils = __webpack_require__(\"OKTS\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/chunks/builtins.js\nvar builtins = __webpack_require__(\"n4uK\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/FramebufferObject.js\nvar FramebufferObject = __webpack_require__(\"0meK\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/RenderingContext.js + 7 modules\nvar RenderingContext = __webpack_require__(\"bfJE\");\n\n// EXTERNAL MODULE: ./node_modules/@arcgis/core/views/webgl/ShaderCompiler.js\nvar ShaderCompiler = __webpack_require__(\"SfCL\");\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/shaderRepository.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\n/* harmony default export */ var shaderRepository = ({background:{\"background.frag\":\"uniform lowp vec4 u_color;\\nvoid main() {\\n  gl_FragColor = u_color;\\n}\",\"background.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump vec2 u_coord_range;\\nuniform mediump float u_depth;\\nvoid main() {\\n  vec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\\n  gl_Position = vec4(v_pos.xy, 0.0, 1.0);\\n}\"},bitBlit:{\"bitBlit.frag\":\"uniform lowp sampler2D u_tex;\\nuniform lowp float u_opacity;\\nvarying mediump vec2 v_uv;\\nvoid main() {\\n  lowp vec4 color = texture2D(u_tex, v_uv);\\n  gl_FragColor = color *  u_opacity;\\n}\",\"bitBlit.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_tex;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\n  gl_Position = vec4(a_pos, 0.0, 1.0);\\n  v_uv = a_tex;\\n}\"},blend:{\"blend.frag\":\"precision mediump float;\\nuniform sampler2D u_layerTexture;\\nuniform lowp float u_opacity;\\nuniform lowp float u_inFadeOpacity;\\n#ifndef NORMAL\\nuniform sampler2D u_backbufferTexture;\\n#endif\\nvarying mediump vec2 v_uv;\\nfloat rgb2v(in vec3 c) {\\n  return max(c.x, max(c.y, c.z));\\n}\\nvec3 rgb2hsv(in vec3 c) {\\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n  vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\n  vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\n  float d = q.x - min(q.w, q.y);\\n  float e = 1.0e-10;\\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(in vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec3 tint(in vec3 Cb, in vec3 Cs) {\\n  float vIn = rgb2v(Cb);\\n  vec3 hsvTint = rgb2hsv(Cs);\\n  vec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\\n  return hsv2rgb(hsvOut);\\n}\\nfloat overlay(in float Cb, in float Cs) {\\n  return (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\\n}\\nfloat colorDodge(in float Cb, in float Cs) {\\n  return (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\\n}\\nfloat colorBurn(in float Cb, in float Cs) {\\n return (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\\n}\\nfloat hardLight(in float Cb, in float Cs) {\\n  return (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\\n}\\nfloat reflectBlend(in float Cb, in float Cs) {\\n\\treturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\\n}\\nfloat softLight(in float Cb, in float Cs) {\\n  if (Cs <= 0.5) {\\n    return Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\\n  }\\n  if (Cb <= 0.25) {\\n    return Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\\n  }\\n  return Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\\n}\\nfloat vividLight(in float Cb, in float Cs) {\\n  return (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\\n}\\nfloat minv3(in vec3 c) {\\n  return min(min(c.r, c.g), c.b);\\n}\\nfloat maxv3(in vec3 c) {\\n  return max(max(c.r, c.g), c.b);\\n}\\nfloat lumv3(in vec3 c) {\\n  return dot(c, vec3(0.3, 0.59, 0.11));\\n}\\nfloat satv3(vec3 c) {\\n  return maxv3(c) - minv3(c);\\n}\\nvec3 clipColor(vec3 color) {\\n  float lum = lumv3(color);\\n  float mincol = minv3(color);\\n  float maxcol = maxv3(color);\\n  if (mincol < 0.0) {\\n    color = lum + ((color - lum) * lum) / (lum - mincol);\\n  }\\n  if (maxcol > 1.0) {\\n    color = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\\n  }\\n  return color;\\n}\\nvec3 setLum(vec3 cbase, vec3 clum) {\\n  float lbase = lumv3(cbase);\\n  float llum = lumv3(clum);\\n  float ldiff = llum - lbase;\\n  vec3 color = cbase + vec3(ldiff);\\n  return clipColor(color);\\n}\\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\\n{\\n  float minbase = minv3(cbase);\\n  float sbase = satv3(cbase);\\n  float ssat = satv3(csat);\\n  vec3 color;\\n  if (sbase > 0.0) {\\n    color = (cbase - minbase) * ssat / sbase;\\n  } else {\\n    color = vec3(0.0);\\n  }\\n  return setLum(color, clum);\\n}\\nvoid main() {\\n  vec4 src = texture2D(u_layerTexture, v_uv);\\n#ifdef NORMAL\\n  gl_FragColor = src *  u_opacity;\\n#else\\n  vec4 dst = texture2D(u_backbufferTexture, v_uv);\\n  vec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\\n  vec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\\n  float as = u_opacity * src.a;\\n  float ab = dst.a;\\n  #ifdef DESTINATION_OVER\\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\\n  #endif\\n  #ifdef SOURCE_IN\\n    vec4 color = vec4(as * Cs * ab, as * ab);\\n    vec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\\n    gl_FragColor = color + fadeColor;\\n  #endif\\n  #ifdef DESTINATION_IN\\n    vec4 color = vec4(ab * Cb * as, ab * as);\\n    vec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\\n    gl_FragColor = color + fadeColor;\\n  #endif\\n  #ifdef SOURCE_OUT\\n    gl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\\n  #endif\\n  #ifdef DESTINATION_OUT\\n    gl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\\n  #endif\\n  #ifdef SOURCE_ATOP\\n    gl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\\n  #endif\\n  #ifdef DESTINATION_ATOP\\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\\n  #endif\\n  #ifdef XOR\\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\\n                        as * (1.0 - ab) + ab * (1.0 - as));\\n  #endif\\n  #ifdef MULTIPLY\\n    gl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef SCREEN\\n    gl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef OVERLAY\\n    vec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef DARKEN\\n    gl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef LIGHTER\\n    gl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\\n  #endif\\n  #ifdef LIGHTEN\\n    gl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef COLOR_DODGE\\n    vec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef COLOR_BURN\\n    vec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef HARD_LIGHT\\n    vec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef SOFT_LIGHT\\n    vec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef DIFFERENCE\\n    gl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef EXCLUSION\\n     vec3 f = Cs + Cb - 2.0 * Cs * Cb;\\n     gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef INVERT\\n    gl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\\n  #endif\\n  #ifdef VIVID_LIGHT\\n    vec3 f = vec3(vividLight(Cb.r, Cs.r),\\n                  vividLight(Cb.g, Cs.g),\\n                  vividLight(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef HUE\\n    vec3 f = setLumSat(Cs,Cb,Cb);\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef SATURATION\\n    vec3 f = setLumSat(Cb,Cs,Cb);\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef COLOR\\n    vec3 f = setLum(Cs,Cb);\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef LUMINOSITY\\n    vec3 f = setLum(Cb,Cs);\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef PLUS\\n    gl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\\n  #endif\\n  #ifdef MINUS\\n     gl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\\n  #endif\\n  #ifdef AVERAGE\\n     vec3 f = (Cb + Cs) / 2.0;\\n     gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n  #ifdef REFLECT\\n    vec3 f = vec3(reflectBlend(Cb.r, Cs.r),\\n                  reflectBlend(Cb.g, Cs.g),\\n                  reflectBlend(Cb.b, Cs.b));\\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\n                        as + ab * (1.0 - as));\\n  #endif\\n#endif\\n}\",\"blend.vert\":\"attribute vec2 a_position;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\n  gl_Position = vec4(a_position , 0.0, 1.0);\\n  v_uv = (a_position + 1.0) / 2.0;\\n}\"},filtering:{\"bicubic.glsl\":\"vec4 computeWeights(float v) {\\n  float b = 1.0 / 6.0;\\n  float v2 = v * v;\\n  float v3 = v2 * v;\\n  float w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\\n  float w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\\n  float w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\\n  float w3 = b * v3;\\n  return vec4(w0, w1, w2, w3);\\n}\\nvec4 bicubicOffsetsAndWeights(float v) {\\n  vec4 w = computeWeights(v);\\n  float g0 = w.x + w.y;\\n  float g1 = w.z + w.w;\\n  float h0 = 1.0 - (w.y / g0) + v;\\n  float h1 = 1.0 + (w.w / g1) - v;\\n  return vec4(h0, h1, g0, g1);\\n}\\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\\n  vec2 eX = vec2(1.0 / texSize.x, 0.0);\\n  vec2 eY = vec2(0.0, 1.0 / texSize.y);\\n  vec2 texel = coords * texSize - 0.5;\\n  vec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\\n  vec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\\n  vec2 coords10 = coords + hgX.x * eX;\\n  vec2 coords00 = coords - hgX.y * eX;\\n  vec2 coords11 = coords10 + hgY.x * eY;\\n  vec2 coords01 = coords00 + hgY.x * eY;\\n  coords10 = coords10 - hgY.y * eY;\\n  coords00 = coords00 - hgY.y * eY;\\n  vec4 color00 = texture2D(sampler, coords00);\\n  vec4 color10 = texture2D(sampler, coords10);\\n  vec4 color01 = texture2D(sampler, coords01);\\n  vec4 color11 = texture2D(sampler, coords11);\\n  color00 = mix(color00, color01, hgY.z);\\n  color10 = mix(color10, color11, hgY.z);\\n  color00 = mix(color00, color10, hgX.z);\\n  return color00;\\n}\",\"bilinear.glsl\":\"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\\n  vec2 texelStart = floor(coords * texSize);\\n  vec2 coord0 = texelStart / texSize;\\n  vec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\\n  vec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\\n  vec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\\n  vec4 color0 = texture2D(sampler, coord0);\\n  vec4 color1 = texture2D(sampler, coord1);\\n  vec4 color2 = texture2D(sampler, coord2);\\n  vec4 color3 = texture2D(sampler, coord3);\\n  vec2 blend = fract(coords * texSize);\\n  vec4 color01 = mix(color0, color1, blend.x);\\n  vec4 color23 = mix(color2, color3, blend.x);\\n  return mix(color01, color23, blend.y);\\n}\",\"epx.glsl\":\"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\\n  vec2 invSize = 1.0 / texSize;\\n  vec2 texel = coords * texSize;\\n  vec2 texel_i = floor(texel);\\n  vec2 texel_frac = fract(texel);\\n  vec4 colorP = texture2D(sampler, texel_i * invSize);\\n  vec4 colorP1 = vec4(colorP);\\n  vec4 colorP2 = vec4(colorP);\\n  vec4 colorP3 = vec4(colorP);\\n  vec4 colorP4 = vec4(colorP);\\n  vec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\\n  vec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\\n  vec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\\n  vec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\\n  if (colorC == colorA && colorC != colorD && colorA != colorB) {\\n    colorP1 = colorA;\\n  }\\n  if (colorA == colorB && colorA != colorC && colorB != colorD) {\\n    colorP2 = colorB;\\n  }\\n  if (colorD == colorC && colorD != colorB && colorC != colorA) {\\n    colorP3 = colorC;\\n  }\\n  if (colorB == colorD && colorB != colorA && colorD != colorC) {\\n    colorP4 = colorD;\\n  }\\n  vec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\\n  vec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\\n  return mix(colorP12, colorP34, texel_frac.y);\\n}\"},fx:{integrate:{\"integrate.frag\":\"precision mediump float;\\nuniform lowp sampler2D u_sourceTexture;\\nuniform lowp sampler2D u_maskTexture;\\nuniform mediump float u_zoomLevel;\\nuniform highp float u_timeDelta;\\nuniform highp float u_animationTime;\\nvarying highp vec2 v_texcoord;\\n#include <materials/utils.glsl>\\nvoid main()\\n{\\n#ifdef DELTA\\n  vec4 texel = texture2D(u_sourceTexture, v_texcoord);\\n  vec4 data0 = texture2D(u_maskTexture, v_texcoord);\\n  float flags = data0.r * 255.0;\\n  float groupMinZoom = data0.g * 255.0;\\n  float isVisible = getFilterBit(flags, 0);\\n  float wouldClip = step(groupMinZoom, u_zoomLevel);\\n  float direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\\n  float dt = u_timeDelta / max(u_animationTime, 0.0001);\\n  vec4 nextState = vec4(texel + direction * dt);\\n  gl_FragColor =  vec4(nextState);\\n#elif defined(UPDATE)\\n  vec4 texel = texture2D(u_sourceTexture, v_texcoord);\\n  gl_FragColor = texel;\\n#endif\\n}\",\"integrate.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\n  v_texcoord = a_pos;\\n  gl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\\n}\"}},highlight:{\"blur.frag\":\"varying mediump vec2 v_texcoord;\\nuniform mediump vec4 u_direction;\\nuniform mediump mat4 u_channelSelector;\\nuniform mediump vec4 u_sigmas;\\nuniform sampler2D u_texture;\\nmediump vec4 gauss4(mediump vec2 dir) {\\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas * u_sigmas));\\n}\\nmediump float gauss1(mediump vec2 dir) {\\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas[3] * u_sigmas[3]));\\n}\\nmediump vec4 selectChannel(mediump vec4 sample) {\\n  return u_channelSelector * sample;\\n}\\nvoid accumGauss4(mediump float i, inout mediump vec4 tot, inout mediump vec4 weight) {\\n  mediump vec4 w = gauss4(i * u_direction.xy);\\n  tot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw)) * w;\\n  weight += w;\\n}\\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\\n  mediump float w = gauss1(i * u_direction.xy);\\n  tot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\\n  weight += w;\\n}\\nvoid main(void) {\\n  mediump float tot = 0.0;\\n  mediump float weight = 0.0;\\n  accumGauss1(-4.0, tot, weight);\\n  accumGauss1(-3.0, tot, weight);\\n  accumGauss1(-2.0, tot, weight);\\n  accumGauss1(-1.0, tot, weight);\\n  accumGauss1(0.0, tot, weight);\\n  accumGauss1(1.0, tot, weight);\\n  accumGauss1(2.0, tot, weight);\\n  accumGauss1(3.0, tot, weight);\\n  accumGauss1(4.0, tot, weight);\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\\n}\",\"highlight.frag\":\"varying mediump vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform mediump vec4 u_sigmas;\\nuniform sampler2D u_shade;\\nuniform mediump vec2 u_minMaxDistance;\\nmediump float estimateDistance() {\\n  mediump float sigma = u_sigmas[3];\\n  mediump float y = texture2D(u_texture, v_texcoord)[3];\\n  const mediump float y0 = 0.5;\\n  mediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * sigma);\\n  mediump float d = (y - y0) / m0;\\n  return d;\\n}\\nmediump vec4 shade(mediump float d) {\\n  mediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\\n  mappedDistance = clamp(mappedDistance, 0.0, 1.0);\\n  return texture2D(u_shade, vec2(mappedDistance, 0.5));\\n}\\nvoid main(void) {\\n  mediump float d = estimateDistance();\\n  gl_FragColor = shade(d);\\n}\",\"textured.vert\":\"attribute mediump vec2 a_position;\\nattribute mediump vec2 a_texcoord;\\nvarying mediump vec2 v_texcoord;\\nvoid main(void) {\\n  gl_Position = vec4(a_position, 0.0, 1.0);\\n  v_texcoord = a_texcoord;\\n}\"},magnifier:{\"magnifier.frag\":\"uniform lowp vec4 u_background;\\nuniform mediump sampler2D u_readbackTexture;\\nuniform mediump sampler2D u_maskTexture;\\nuniform mediump sampler2D u_overlayTexture;\\nuniform bool u_maskEnabled;\\nuniform bool u_overlayEnabled;\\nvarying mediump vec2 v_texCoord;\\nconst lowp float barrelFactor = 1.1;\\nlowp vec2 barrel(lowp vec2 uv) {\\n  lowp vec2 uvn = uv * 2.0 - 1.0;\\n  if (uvn.x == 0.0 && uvn.y == 0.0) {\\n    return vec2(0.5, 0.5);\\n  }\\n  lowp float theta = atan(uvn.y, uvn.x);\\n  lowp float r = pow(length(uvn), barrelFactor);\\n  return r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\\n}\\nvoid main(void)\\n{\\n  lowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\\n  color = (color + (1.0 - color.a) * u_background);\\n  lowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\\n  color *= mask;\\n  lowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\\n  overlayColor.rgb *= overlayColor.a;\\n  gl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\\n}\",\"magnifier.vert\":\"precision mediump float;\\nattribute mediump vec2 a_pos;\\nuniform mediump vec4 u_drawPos;\\nvarying mediump vec2 v_texCoord;\\nvoid main(void)\\n{\\n  v_texCoord = a_pos;\\n  gl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\\n}\"},materials:{\"attributeData.glsl\":\"uniform highp sampler2D u_attributeData0;\\nuniform highp sampler2D u_attributeData1;\\nuniform highp sampler2D u_attributeData2;\\nuniform highp sampler2D u_attributeData3;\\nuniform highp int u_attributeTextureSize;\\nhighp vec2 getAttributeDataCoords(in highp vec4 id) {\\n  highp vec4 texel = unpackDisplayIdTexel(id);\\n  highp float size = float(u_attributeTextureSize);\\n  highp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256 + int(texel.a) * 256 * 256 * 256);\\n  highp float col = mod(u32, size);\\n  highp float row = (u32 - col) / size;\\n  highp float u = col / size;\\n  highp float v = row / size;\\n  return vec2(u, v);\\n}\\nhighp vec4 getAttributeData0(in highp vec4 id) {\\n  vec2 coords = getAttributeDataCoords(id);\\n  return texture2D(u_attributeData0, coords);\\n}\\nhighp vec4 getAttributeData1(in highp vec4 id) {\\n  highp vec2 coords = getAttributeDataCoords(id);\\n  return texture2D(u_attributeData1, coords);\\n}\\nhighp vec4 getAttributeData2(in highp vec4 id) {\\n  highp vec2 coords = getAttributeDataCoords(id);\\n  return texture2D(u_attributeData2, coords);\\n}\\nhighp vec4 getAttributeData3(in highp vec4 id) {\\n  highp vec2 coords = getAttributeDataCoords(id);\\n  return texture2D(u_attributeData3, coords);\\n}\\nfloat u88VVToFloat(in vec2 v) {\\n  bool isMagic = v.x == 255.0 && v.y == 255.0;\\n  if (isMagic) {\\n    return NAN_MAGIC_NUMBER;\\n  }\\n  return (v.x + v.y * float(0x100)) - 32768.0;\\n}\",\"constants.glsl\":\"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\\nconst float POSITION_PRECISION = 1.0 / 8.0;\\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\\nconst float SOFT_EDGE_RATIO = 1.0;\\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\\nconst float THIN_LINE_HALF_WIDTH = 1.0;\\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\\nconst float OFFSET_PRECISION = 1.0 / 8.0;\\nconst float OUTLINE_SCALE = 1.0 / 5.0;\\nconst float SDF_FONT_SIZE = 24.0;\\nconst float MAX_SDF_DISTANCE = 8.0;\\nconst float PLACEMENT_PADDING = 8.0;\\nconst float EPSILON = 0.0000001;\\nconst int MAX_FILTER_COUNT = 2;\\nconst int ATTR_VV_SIZE = 0;\\nconst int ATTR_VV_COLOR = 1;\\nconst int ATTR_VV_OPACITY = 2;\\nconst int ATTR_VV_ROTATION = 3;\\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\",fill:{\"common.glsl\":\"#ifdef PATTERN\\nuniform mediump vec2 u_mosaicSize;\\n#endif\\n#ifdef DOT_DENSITY\\nuniform lowp vec4 u_isActive[ 2 ];\\nuniform highp float u_dotValue;\\nuniform highp float u_tileDotsOverArea;\\nuniform highp float u_dotTextureDotCount;\\nuniform mediump float u_tileZoomFactor;\\n#endif\\nvarying vec3 v_pos;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying highp vec4 v_id;\\nvarying highp float v_flags;\\n#ifdef PATTERN\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef DOT_DENSITY\\nvarying highp vec2 v_dotTextureCoords;\\nvarying highp vec4 v_dotThresholds[ 2 ];\\n#endif\",\"fill.frag\":\"precision highp float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/fill/common.glsl>\\n#ifdef PATTERN\\nuniform lowp sampler2D u_texture;\\n#endif\\n#ifdef DOT_DENSITY\\nuniform mediump mat4 u_dotColors[ 2 ];\\nuniform sampler2D u_dotTextures[ 2 ];\\nuniform vec4 u_dotBackgroundColor;\\n#endif\\nvoid main() {\\n#ifdef ID\\n  gl_FragColor = v_id;\\n#elif defined(PATTERN)\\n  mediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\n  mediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\\n  lowp vec4 color = texture2D(u_texture, samplePos);\\n  gl_FragColor = v_opacity * v_color * color;\\n#elif defined(DOT_DENSITY) && !defined(HIGHLIGHT)\\n  vec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\\n  vec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\\n  vec4 difference0 = v_dotThresholds[0] - textureThresholds0;\\n  vec4 difference1 = v_dotThresholds[1] - textureThresholds1;\\n#ifdef DD_DOT_BLENDING\\n  vec4 isPositive0 = step(0.0, difference0);\\n  vec4 isPositive1 = step(0.0, difference1);\\n  float weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\\n  float lessThanEqZero = step(weightSum, 0.0);\\n  float greaterThanZero = 1.0 - lessThanEqZero ;\\n  float divisor = (weightSum + lessThanEqZero);\\n  vec4 weights0 = difference0 * isPositive0 / divisor;\\n  vec4 weights1 = difference1 * isPositive1 / divisor;\\n  vec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\\n  vec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\\n#else\\n  float diffMax = max(max4(difference0), max4(difference1));\\n  float lessThanZero = step(diffMax, 0.0);\\n  float greaterOrEqZero = 1.0 - lessThanZero;\\n  vec4 isMax0 = step(diffMax, difference0);\\n  vec4 isMax1 = step(diffMax, difference1);\\n  vec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\\n  vec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\\n#endif\\n  gl_FragColor = preEffectColor;\\n#else\\n  gl_FragColor = v_opacity * v_color;\\n#endif\\n#ifdef HIGHLIGHT\\n  gl_FragColor.a = 1.0;\\n#endif\\n}\",\"fill.vert\":\"precision highp float;\\n#ifdef DOT_DENSITY\\nattribute float a_inverseArea;\\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\\nvec4 a_aux3 = vec4(0.0);\\n#else\\nattribute vec4 a_color;\\nattribute vec4 a_tlbr;\\nattribute vec4 a_aux1;\\nattribute vec2 a_aux2;\\nattribute vec4 a_aux3;\\n#endif\\n#include <materials/vcommon.glsl>\\n#include <materials/fill/common.glsl>\\n#ifdef DOT_DENSITY\\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\\n  return featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\\n}\\n#endif\\nvoid main()\\n{\\n  INIT;\\n  float a_bitSet = a_aux3.a;\\n  v_color     = getColor(a_color, a_bitSet, 0);\\n  v_opacity   = getOpacity();\\n  v_id        = norm(a_id);\\n  v_pos       = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\\n  v_flags     = getFilterFlags();\\n#ifdef PATTERN\\n  vec2 aux2 = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_aux2;\\n  float width = u_zoomFactor * a_aux1.x * aux2.x;\\n  float height = u_zoomFactor * a_aux1.y * aux2.y;\\n  float angle = C_256_TO_RAD * a_aux3.z;\\n  float sinA = sin(angle);\\n  float cosA = cos(angle);\\n  mat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\\n                           -sinA / width, cosA / height, 0,\\n                            0,            0,             1);\\n  vec2 symbolOffset = (a_aux1.zw - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\\n  v_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\\n  v_tlbr = a_tlbr / u_mosaicSize.xyxy;\\n#elif defined(DOT_DENSITY)\\n  vec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\\n  vec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\\n  float size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\\n  v_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\\n  v_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\\n  v_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\\n#endif\\n  gl_Position = vec4(applyFilter(v_color, v_pos, v_flags), 1.0);\\n}\"},icon:{\"common.glsl\":\"uniform lowp vec2 u_mosaicSize;\\nvarying lowp vec4 v_color;\\nvarying highp vec4 v_id;\\nvarying highp vec4 v_sizeTex;\\nvarying mediump vec3 v_pos;\\nvarying highp float v_filters;\\nvarying lowp float v_opacity;\\n#ifdef SDF\\nvarying lowp vec4 v_outlineColor;\\nvarying mediump float v_outlineWidth;\\nvarying mediump float v_distRatio;\\nvarying mediump float v_overridingOutlineColor;\\nvarying mediump float v_isThin;\\n#endif\",\"icon.frag\":\"precision mediump float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <util/encoding.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/icon/common.glsl>\\nuniform lowp sampler2D u_texture;\\nvoid main()\\n{\\n  vec2 v_size = v_sizeTex.xy;\\n  vec2 v_tex  = v_sizeTex.zw;\\n#ifdef SDF\\n  lowp vec4 fillPixelColor = v_color;\\n  float d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\\n  float size = max(v_size.x, v_size.y);\\n  float dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\\n  fillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\n  float outlineWidth = v_outlineWidth;\\n  #ifdef HIGHLIGHT\\n    outlineWidth = max(outlineWidth, 4.0 * v_isThin);\\n  #endif\\n  if (outlineWidth > 0.25) {\\n    lowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\\n    float clampedOutlineSize = min(outlineWidth, size);\\n    outlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\\n    gl_FragColor = v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\\n  }\\n  else {\\n    gl_FragColor = v_opacity * fillPixelColor;\\n  }\\n#else\\n   lowp vec4 texColor = texture2D(u_texture, v_tex);\\n   gl_FragColor = v_opacity * texColor;\\n#endif\\n#ifdef HIGHLIGHT\\n  gl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"icon.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_outlineColor;\\nattribute vec4 a_sizeAndOutlineWidth;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nattribute vec4 a_bitSetAndDistRatio;\\n#include <materials/vcommon.glsl>\\n#include <materials/icon/common.glsl>\\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\\n#ifdef VV_SIZE\\n  float r = getSize(baseSize.y) / referenceSize;\\n  baseSize.xy *= r;\\n  offset.xy *= r;\\n  float scaleSymbolProportionally = getBit(bitSet, 3);\\n  outlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\\n#endif\\n  return baseSize;\\n}\\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\\n  float isMapAligned = getBit(a_bitSet, 0);\\n  vec3  offset       = getRotation() * vec3(in_offset, 0.0);\\n  return getMatrix(isMapAligned) * offset;\\n}\\nvoid main()\\n{\\n  INIT;\\n  vec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\\n  vec2  a_offset = a_vertexOffset / 16.0;\\n  float a_outlineSize = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\\n  float a_bitSet = a_bitSetAndDistRatio.z;\\n  vec2 v_size = getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\\n  vec2 v_tex      = a_texCoords / u_mosaicSize;\\n  v_color    = getColor(a_color, a_bitSet, 1);\\n  v_opacity  = getOpacity();\\n  v_id       = norm(a_id);\\n  v_filters  = getFilterFlags();\\n  v_pos      = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\\n  v_sizeTex  = vec4(v_size.xy, v_tex.xy);\\n#ifdef SDF\\n  v_isThin   = getBit(a_bitSet, 2);\\n  #ifdef VV_COLOR\\n    v_overridingOutlineColor = v_isThin;\\n  #else\\n    v_overridingOutlineColor = 0.0;\\n  #endif\\n  v_outlineWidth = min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\\n  v_outlineColor = a_outlineColor;\\n  v_distRatio = a_bitSetAndDistRatio.w / 126.0;\\n#endif\\n  gl_Position = vec4(applyFilter(v_color, v_pos, v_filters), 1.0);\\n}\"},label:{\"common.glsl\":\"uniform mediump float u_zoomLevel;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_mapAligned;\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying mediump vec2 v_tex;\\nvarying mediump vec4 v_color;\\nvarying lowp vec4 v_animation;\",\"label.frag\":\"#include <materials/text/text.frag>\",\"label.vert\":\"precision highp float;\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texAndSize;\\nattribute vec4 a_refSymbolAndPlacementOffset;\\nattribute vec4 a_glyphData;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHalo;\\nuniform float u_zoomLevel;\\nuniform float u_mapRotation;\\nuniform float u_mapAligned;\\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\\n  float glyphAngle = angle * 360.0 / 254.0;\\n  float mapAngle = u_mapRotation * 360.0 / 254.0;\\n  float diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\\n  float z = 0.0;\\n  z += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_zoomLevel)));\\n  z += u_mapAligned * 2.0 * step(90.0, diffAngle);\\n  z += 2.0 * (1.0 - step(u_zoomLevel, maxZoom));\\n  return z;\\n}\\nvoid main()\\n{\\n  INIT;\\n  float groupMinZoom    = getMinZoom();\\n  float glyphMinZoom    = a_glyphData.x;\\n  float glyphMaxZoom    = a_glyphData.y;\\n  float glyphAngle      = a_glyphData.z;\\n  float a_minZoom          = max(groupMinZoom, glyphMinZoom);\\n  float a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\\n  vec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\\n  float a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\\n  float fontSize           = a_texAndSize.z;\\n  float haloSize           = a_texAndSize.w * OUTLINE_SCALE;\\n  vec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\\n  vec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\\n  float z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\\n  float fontScale    = fontSize / SDF_FONT_SIZE;\\n  float halfSize     = getSize(a_refSymbolSize) / 2.0;\\n  float animation    = pow(getAnimationState(), vec4(2.0)).r;\\n  v_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\\n  v_opacity   = 1.0;\\n  v_tex       = a_texCoords / u_mosaicSize;\\n  v_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\\n  v_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\n  vec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\\n  vec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\\n  vec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\\n  gl_Position = vec4(applyFilterLabels(v_color, v_pos, getFilterFlags()), 1.0);\\n#ifdef DEBUG\\n  v_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\\n#endif\\n}\"},line:{\"common.glsl\":\"varying lowp vec4 v_color;\\nvarying highp vec4 v_id;\\nvarying mediump vec2 v_normal;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp float v_opacity;\\nvarying highp vec3 v_pos;\\n#ifdef PATTERN\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_patternSize;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nvarying highp float v_accumulatedDistance;\\n#endif\",\"line.frag\":\"precision lowp float;\\n#include <util/encoding.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/line/common.glsl>\\nuniform lowp float u_blur;\\nuniform mediump float u_zoomFactor;\\n#if defined(PATTERN) || defined(SDF)\\nuniform sampler2D u_texture;\\n#endif\\n#ifdef SDF\\nconst float sdfPatternHalfWidth = 15.5;\\nconst float widthFactor = 2.0;\\n#endif\\nvoid main()\\n{\\n  mediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(v_lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\n  mediump float fragDist = length(v_normal) * v_lineHalfWidth;\\n  lowp float alpha = clamp(thinLineFactor * (v_lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\\n#if defined(SDF) && !defined(HIGHLIGHT)\\n  mediump float lineHalfWidth = widthFactor * v_lineHalfWidth;\\n  mediump float lineWidthRatio = lineHalfWidth / sdfPatternHalfWidth;\\n  mediump float relativeTexX = mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / (lineWidthRatio * v_patternSize.x), 1.0);\\n  mediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\\n  mediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\\n  mediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\\n  float dist = d * lineHalfWidth;\\n  lowp vec4 fillPixelColor = v_opacity * alpha * clamp(0.5 - dist, 0.0, 1.0) * v_color;\\n  gl_FragColor = fillPixelColor;\\n#elif defined(PATTERN) && !defined(HIGHLIGHT)\\n  mediump float lineHalfWidth = v_lineHalfWidth;\\n  mediump float adjustedPatternWidth = v_patternSize.x * 2.0 * lineHalfWidth / v_patternSize.y;\\n  mediump float relativeTexX = mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / adjustedPatternWidth, 1.0);\\n  mediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\\n  mediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexY, relativeTexX));\\n  lowp vec4 color = texture2D(u_texture, texCoord);\\n  gl_FragColor = v_opacity * alpha * v_color * color;\\n#else\\n  gl_FragColor = v_opacity * alpha * v_color;\\n#endif\\n#ifdef HIGHLIGHT\\n  gl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\\n#endif\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"line.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_offsetAndNormal;\\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\\nattribute vec4 a_tlbr;\\nattribute vec4 a_segmentDirection;\\nattribute vec2 a_aux;\\n#include <materials/vcommon.glsl>\\n#include <materials/line/common.glsl>\\nconst float SCALE = 1.0 / 31.0;\\nconst float WIDTH_SCALE = 1.0 / 1024.0;\\nfloat getBaseLineHalfWidth(in float in_lineHalfWidth) {\\n#ifdef VV_SIZE\\n  float referenceHalfWidth = a_aux.x * WIDTH_SCALE;\\n  float lineWidth = 2.0 * in_lineHalfWidth;\\n  return 0.5 * (in_lineHalfWidth / referenceHalfWidth) * getSize(lineWidth);\\n#else\\n  return in_lineHalfWidth;\\n#endif\\n}\\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\\n  float halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\\n#ifdef HIGHLIGHT\\n  halfWidth = max(halfWidth, 2.0);\\n#endif\\n  return halfWidth;\\n}\\nvec2 getDist(in vec2 offset, in float halfWidth) {\\n  float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\n#if defined(SDF) && !defined(HIGHLIGHT)\\n  thinLineFactor *= 2.0;\\n#endif\\n  return thinLineFactor * halfWidth * offset * SCALE;\\n}\\nvoid main()\\n{\\n  INIT;\\n  float a_bitSet          = a_segmentDirection.w;\\n  float a_accumulatedDist = a_accumulatedDistanceAndHalfWidth.x;\\n  float a_lineHalfWidth   = a_accumulatedDistanceAndHalfWidth.y * WIDTH_SCALE;\\n  float aa                = 0.5 * u_antialiasing;\\n  vec2  a_offset          = a_offsetAndNormal.xy;\\n  float baseWidth = getBaseLineHalfWidth(a_lineHalfWidth);\\n  float halfWidth = getLineHalfWidth(baseWidth, aa);\\n  float z         = 2.0 * step(baseWidth, 0.0);\\n  vec2  dist      = getDist(a_offset, halfWidth);\\n  vec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\\n  vec3  pos       = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + offset;\\n  v_color         = getColor(a_color, a_bitSet, 0);\\n  v_opacity       = getOpacity();\\n  v_lineHalfWidth = halfWidth;\\n  v_id            = norm(a_id);\\n  v_normal        = a_offsetAndNormal.zw * SCALE;\\n  v_pos           = vec3(pos.xy, z);\\n#ifdef PATTERN\\n  v_tlbr          = a_tlbr / u_mosaicSize.xyxy;\\n  v_patternSize   = vec2(a_tlbr.z - a_tlbr.x, a_tlbr.w - a_tlbr.y);\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\n  v_accumulatedDistance = a_accumulatedDist + dot(SCALE * a_segmentDirection.xy, dist / u_zoomFactor);\\n#endif\\n  gl_Position = vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\\n}\"},text:{\"common.glsl\":\"uniform highp vec2 u_mosaicSize;\\nvarying highp vec4 v_id;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying highp vec2 v_tex;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying lowp float v_transparency;\",\"text.frag\":\"precision mediump float;\\n#include <materials/text/common.glsl>\\nuniform lowp sampler2D u_texture;\\nvoid main()\\n{\\n  float SDF_CUTOFF = (2.0 / 8.0);\\n  float SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\\n  lowp float dist = texture2D(u_texture, v_tex).a;\\n  mediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\\n#ifdef HIGHLIGHT\\n  edge /= 2.0;\\n#endif\\n  lowp float aa = v_antialiasingWidth;\\n  lowp float alpha = smoothstep(edge - aa, edge + aa, dist);\\n  gl_FragColor = alpha * v_color * v_opacity;\\n#ifdef ID\\n  if (gl_FragColor.a < 1.0 / 255.0) {\\n    discard;\\n  }\\n  gl_FragColor = v_id;\\n#endif\\n}\",\"text.vert\":\"precision highp float;\\n#include <materials/utils.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texFontSize;\\nattribute vec4 a_aux;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHalo;\\nfloat getTextSize(inout vec2 offset, in float baseSize, in float referenceSize) {\\n#ifdef VV_SIZE\\n   float ratio = baseSize / referenceSize;\\n   baseSize = ratio * getSize(baseSize);\\n#endif\\n  return baseSize;\\n}\\nvoid main()\\n{\\n  INIT;\\n  float a_bitSet      = a_aux.w;\\n  float a_fontSize    = a_texFontSize.z;\\n  vec2  a_offset      = a_vertexOffset * OFFSET_PRECISION;\\n  vec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\\n  float fontSize      = getTextSize(a_offset, a_fontSize, a_aux.z * a_aux.z / 256.0);\\n  float scaleFactor   = fontSize / a_fontSize;\\n  float fontScale     = fontSize / SDF_FONT_SIZE;\\n  vec3  offset        = getRotation() * vec3(scaleFactor * a_offset, 0.0);\\n  mat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\\n  v_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\\n  v_opacity = getOpacity();\\n  v_id      = norm(a_id);\\n  v_tex     = a_texCoords / u_mosaicSize;\\n  v_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\\n  v_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\\n  v_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\n  gl_Position =  vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\\n}\"},\"utils.glsl\":\"float rshift(in float u32, in int amount) {\\n  return floor(u32 / pow(2.0, float(amount)));\\n}\\nfloat getBit(in float bitset, in int bitIndex) {\\n  float offset = pow(2.0, float(bitIndex));\\n  return mod(floor(bitset / offset), 2.0);\\n}\\nfloat getFilterBit(in float bitset, in int bitIndex) {\\n  return getBit(bitset, bitIndex + 1);\\n}\\nfloat getHighlightBit(in float bitset) {\\n  return getBit(bitset, 0);\\n}\\nhighp vec4 unpackDisplayIdTexel(in highp vec4 bitset) {\\n  float isAggregate = getBit(bitset.a, 7);\\n  return (1.0 - isAggregate) * bitset + isAggregate * (vec4(bitset.rgba) - vec4(0.0, 0.0, 0.0, float(0x80)));\\n}\\nvec4 unpack(in float u32) {\\n  float r = mod(rshift(u32, 0), 255.0);\\n  float g = mod(rshift(u32, 8), 255.0);\\n  float b = mod(rshift(u32, 16), 255.0);\\n  float a = mod(rshift(u32, 24), 255.0);\\n  return vec4(r, g, b, a);\\n}\\nvec4 norm(in vec4 v) {\\n  return v /= 255.0;\\n}\\nfloat max4(vec4 target) {\\n  return max(max(max(target.x, target.y), target.z), target.w);\\n}\\nvec2 unpack_u8_nf32(vec2 bytes) {\\n  return (bytes - 127.0) / 127.0;\\n}\",\"vcommon.glsl\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/vv.glsl>\\nattribute vec2 a_pos;\\nattribute highp vec4 a_id;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp mat3 u_displayMat3;\\nuniform highp mat3 u_displayViewMat3;\\nuniform highp float u_pixelRatio;\\nuniform mediump float u_zoomFactor;\\nuniform mediump float u_antialiasing;\\nvec4 VV_ADATA = vec4(0.0);\\nvoid loadVisualVariableData(inout vec4 target) {\\n#ifdef OES_TEXTURE_FLOAT\\n  target.rgba = getAttributeData2(a_id);\\n#else\\n  vec4 data0 = getAttributeData2(a_id);\\n  vec4 data1 = getAttributeData3(a_id);\\n  target.r = u88VVToFloat(data0.rg * 255.0);\\n  target.g = u88VVToFloat(data0.ba * 255.0);\\n  target.b = u88VVToFloat(data1.rg * 255.0);\\n  target.a = u88VVToFloat(data1.ba * 255.0);\\n#endif\\n}\\n#ifdef VV\\n  #define INIT loadVisualVariableData(VV_ADATA)\\n#else\\n  #define INIT\\n#endif\\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\\n#ifdef VV_COLOR\\n  float isColorLocked   = getBit(a_bitSet, index);\\n  return getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\\n#else\\n  return a_color;\\n#endif\\n}\\nfloat getOpacity() {\\n#ifdef VV_OPACITY\\n  return getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\\n#else\\n  return 1.0;\\n#endif\\n}\\nfloat getSize(in float in_size) {\\n#ifdef VV_SIZE\\n  return getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\\n#else\\n  return in_size;\\n#endif\\n}\\nmat3 getRotation() {\\n#ifdef VV_ROTATION\\n  return getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\\n#else\\n  return mat3(1.0);\\n#endif\\n}\\nfloat getFilterFlags() {\\n#ifdef IGNORES_SAMPLER_PRECISION\\n  return ceil(getAttributeData0(a_id).x * 255.0);\\n#else\\n  return getAttributeData0(a_id).x * 255.0;\\n#endif\\n}\\nvec4 getAnimationState() {\\n  return getAttributeData1(a_id);\\n}\\nfloat getMinZoom() {\\n  vec4 data0 = getAttributeData0(a_id) * 255.0;\\n  return data0.g;\\n}\\nmat3 getMatrix(float isMapAligned) {\\n  return isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\\n}\\nvec3 applyFilter(inout vec4 color, inout vec3 pos, in float filterFlags) {\\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\\n#ifdef INSIDE\\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\\n#elif defined(OUTSIDE)\\n  pos.z += 2.0 * getFilterBit(filterFlags, 1);\\n#elif defined(HIGHLIGHT)\\n  pos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\\n#endif\\n  return pos;\\n}\\nvec3 applyFilterLabels(inout vec4 color, inout vec3 pos, in float filterFlags) {\\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\\n#ifndef OUTSIDE_LABELS_VISIBLE\\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\\n#endif\\n  return pos;\\n}\",\"vv.glsl\":\"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\\n  #define VV_SIZE\\n#endif\\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\\n  #define VV\\n#endif\\n#ifdef VV_COLOR\\nuniform highp float u_vvColorValues[8];\\nuniform vec4 u_vvColors[8];\\n#endif\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nuniform highp vec4 u_vvSizeMinMaxValue;\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nuniform highp float u_vvSizeScaleStopsValue;\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nuniform highp float u_vvSizeFieldStopsValues[6];\\nuniform float u_vvSizeFieldStopsSizes[6];\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\\n#endif\\n#ifdef VV_OPACITY\\nuniform highp float u_vvOpacityValues[8];\\nuniform float u_vvOpacities[8];\\n#endif\\n#ifdef VV_ROTATION\\nuniform lowp float u_vvRotationType;\\n#endif\\nbool isNan(float val) {\\n  return (val == NAN_MAGIC_NUMBER);\\n}\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\\n  if (isNan(sizeValue)) {\\n    return fallback;\\n  }\\n  float interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\\n  interpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\\n  return u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\\n}\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nconst int VV_SIZE_N = 6;\\nfloat getVVStopsSize(float sizeValue, float fallback) {\\n  if (isNan(sizeValue)) {\\n    return fallback;\\n  }\\n  if (sizeValue <= u_vvSizeFieldStopsValues[0]) {\\n    return u_vvSizeFieldStopsSizes[0];\\n  }\\n  for (int i = 1; i < VV_SIZE_N; ++i) {\\n    if (u_vvSizeFieldStopsValues[i] >= sizeValue) {\\n      float f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\\n      return mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\\n    }\\n  }\\n  return u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\\n}\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nfloat getVVUnitValue(float sizeValue, float fallback) {\\n  if (isNan(sizeValue)) {\\n    return fallback;\\n  }\\n  return u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\\n}\\n#endif\\n#ifdef VV_OPACITY\\nconst int VV_OPACITY_N = 8;\\nfloat getVVOpacity(float opacityValue) {\\n  if (isNan(opacityValue)) {\\n    return 1.0;\\n  }\\n  if (opacityValue <= u_vvOpacityValues[0]) {\\n    return u_vvOpacities[0];\\n  }\\n  for (int i = 1; i < VV_OPACITY_N; ++i) {\\n    if (u_vvOpacityValues[i] >= opacityValue) {\\n      float f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\\n      return mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\\n    }\\n  }\\n  return u_vvOpacities[VV_OPACITY_N - 1];\\n}\\n#endif\\n#ifdef VV_ROTATION\\nmat4 getVVRotation(float rotationValue) {\\n  if (isNan(rotationValue)) {\\n    return mat4(1, 0, 0, 0,\\n                0, 1, 0, 0,\\n                0, 0, 1, 0,\\n                0, 0, 0, 1);\\n  }\\n  float rotation = rotationValue;\\n  if (u_vvRotationType == 1.0) {\\n    rotation = 90.0 - rotation;\\n  }\\n  float angle = C_DEG_TO_RAD * rotation;\\n  float sinA = sin(angle);\\n  float cosA = cos(angle);\\n  return mat4(cosA, sinA, 0, 0,\\n              -sinA,  cosA, 0, 0,\\n              0,     0, 1, 0,\\n              0,     0, 0, 1);\\n}\\nmat3 getVVRotationMat3(float rotationValue) {\\n  if (isNan(rotationValue)) {\\n    return mat3(1, 0, 0,\\n                0, 1, 0,\\n                0, 0, 1);\\n  }\\n  float rotation = rotationValue;\\n  if (u_vvRotationType == 1.0) {\\n    rotation = 90.0 - rotation;\\n  }\\n  float angle = C_DEG_TO_RAD * -rotation;\\n  float sinA = sin(angle);\\n  float cosA = cos(angle);\\n  return mat3(cosA, -sinA, 0,\\n             sinA, cosA, 0,\\n              0,    0,    1);\\n}\\n#endif\\n#ifdef VV_COLOR\\nconst int VV_COLOR_N = 8;\\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\\n  if (isNan(colorValue) || isColorLocked == 1.0) {\\n    return fallback;\\n  }\\n  if (colorValue <= u_vvColorValues[0]) {\\n    return u_vvColors[0];\\n  }\\n  for (int i = 1; i < VV_COLOR_N; ++i) {\\n    if (u_vvColorValues[i] >= colorValue) {\\n      float f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\\n      return mix(u_vvColors[i-1], u_vvColors[i], f);\\n    }\\n  }\\n  return u_vvColors[VV_COLOR_N - 1];\\n}\\n#endif\\nfloat getVVSize(in float size, in float vvSize)  {\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\n  return getVVMinMaxSize(vvSize, size);\\n#elif defined(VV_SIZE_SCALE_STOPS)\\n  return u_vvSizeScaleStopsValue;\\n#elif defined(VV_SIZE_FIELD_STOPS)\\n  float outSize = getVVStopsSize(vvSize, size);\\n  return isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_UNIT_VALUE)\\n  return getVVUnitValue(vvSize, size);\\n#else\\n  return size;\\n#endif\\n}\"},\"post-processing\":{blit:{\"blit.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\n  gl_FragColor = texture2D(u_texture, v_uv);\\n}\"},bloom:{composite:{\"composite.frag\":\"precision mediump float;\\nvarying vec2 v_uv;\\nuniform sampler2D u_blurTexture1;\\nuniform sampler2D u_blurTexture2;\\nuniform sampler2D u_blurTexture3;\\nuniform sampler2D u_blurTexture4;\\nuniform sampler2D u_blurTexture5;\\nuniform float u_bloomStrength;\\nuniform float u_bloomRadius;\\nuniform float u_bloomFactors[NUMMIPS];\\nuniform vec3 u_bloomTintColors[NUMMIPS];\\nfloat lerpBloomFactor(const in float factor) {\\n  float mirrorFactor = 1.2 - factor;\\n  return mix(factor, mirrorFactor, u_bloomRadius);\\n}\\nvoid main() {\\n  gl_FragColor = u_bloomStrength * (\\n    lerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\\n    lerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\\n    lerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\\n    lerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\\n    lerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\\n  );\\n}\"},gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\n#define SIGMA RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\n  vec2 invSize = 1.0 / u_texSize;\\n  float fSigma = float(SIGMA);\\n  float weightSum = gaussianPdf(0.0, fSigma);\\n  vec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\n  for (int i = 1; i < KERNEL_RADIUS; i ++) {\\n    float x = float(i);\\n    float w = gaussianPdf(x, fSigma);\\n    vec2 uvOffset = u_direction * invSize * x;\\n    vec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\n    vec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\n    pixelColorSum += (sample1 + sample2) * w;\\n    weightSum += 2.0 * w;\\n  }\\n  gl_FragColor = pixelColorSum /weightSum;\\n}\"},luminosityHighPass:{\"luminosityHighPass.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nuniform vec3 u_defaultColor;\\nuniform float u_defaultOpacity;\\nuniform float u_luminosityThreshold;\\nuniform float u_smoothWidth;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec4 texel = texture2D(u_texture, v_uv);\\n  vec3 luma = vec3(0.299, 0.587, 0.114);\\n  float v = dot(texel.xyz, luma);\\n  vec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\\n  float alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\\n  gl_FragColor = mix(outputColor, texel, alpha);\\n}\"}},blur:{gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nuniform float u_sigma;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\n  vec2 invSize = 1.0 / u_texSize;\\n  float fSigma = u_sigma;\\n  float weightSum = gaussianPdf(0.0, fSigma);\\n  vec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\n  for (int i = 1; i < KERNEL_RADIUS; i ++) {\\n    float x = float(i);\\n    float w = gaussianPdf(x, fSigma);\\n    vec2 uvOffset = u_direction * invSize * x;\\n    vec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\n    vec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\n    pixelColorSum += (sample1 + sample2) * w;\\n    weightSum += 2.0 * w;\\n  }\\n  gl_FragColor = pixelColorSum /weightSum;\\n}\"},\"radial-blur\":{\"radial-blur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nconst float sampleDist = 1.0;\\nconst float sampleStrength = 2.2;\\nvoid main(void) {\\n    float samples[10];\\n    samples[0] = -0.08;\\n    samples[1] = -0.05;\\n    samples[2] = -0.03;\\n    samples[3] = -0.02;\\n    samples[4] = -0.01;\\n    samples[5] =  0.01;\\n    samples[6] =  0.02;\\n    samples[7] =  0.03;\\n    samples[8] =  0.05;\\n    samples[9] =  0.08;\\n    vec2 dir = 0.5 - v_uv;\\n    float dist = sqrt(dir.x * dir.x + dir.y * dir.y);\\n    dir = dir / dist;\\n    vec4 color = texture2D(u_colorTexture,v_uv);\\n    vec4 sum = color;\\n    for (int i = 0; i < 10; i++) {\\n      sum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\\n    }\\n    sum *= 1.0 / 11.0;\\n    float t = dist * sampleStrength;\\n    t = clamp(t, 0.0, 1.0);\\n    gl_FragColor = mix(color, sum, t);\\n}\"}},dra:{\"dra.frag\":\"precision mediump float;\\nuniform sampler2D u_minColor;\\nuniform sampler2D u_maxColor;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec4 minColor = texture2D(u_minColor, vec2(0.5));\\n  vec4 maxColor = texture2D(u_maxColor, vec2(0.5));\\n  vec4 color = texture2D(u_texture, v_uv);\\n  vec3 minColorUnpremultiply = minColor.rgb / minColor.a;\\n  vec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\\n  vec3 colorUnpremultiply = color.rgb / color.a;\\n  vec3 range = maxColorUnpremultiply - minColorUnpremultiply;\\n  gl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\\n}\",\"min-max\":{\"min-max.frag\":\"#extension GL_EXT_draw_buffers : require\\nprecision mediump float;\\n#define CELL_SIZE 2\\nuniform sampler2D u_minTexture;\\nuniform sampler2D u_maxTexture;\\nuniform vec2 u_srcResolution;\\nuniform vec2 u_dstResolution;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\\n  vec2 onePixel = vec2(1.0) / u_srcResolution;\\n  vec2 uv = (srcPixel + 0.5) / u_srcResolution;\\n  vec4 minColor = vec4(1.0);\\n  vec4 maxColor = vec4(0.0);\\n  for (int y = 0; y < CELL_SIZE; ++y) {\\n    for (int x = 0; x < CELL_SIZE; ++x) {\\n      vec2 offset = uv + vec2(x, y) * onePixel;\\n      minColor = min(minColor, texture2D(u_minTexture, offset));\\n      maxColor = max(maxColor, texture2D(u_maxTexture, offset));\\n    }\\n  }\\n  gl_FragData[0] = minColor;\\n  gl_FragData[1] = maxColor;\\n}\"}},\"drop-shadow\":{composite:{\"composite.frag\":\"precision mediump float;\\nuniform sampler2D u_layerFBOTexture;\\nuniform sampler2D u_blurTexture;\\nuniform vec4 u_shadowColor;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\\n  vec4 blurColor = texture2D(u_blurTexture, v_uv);\\n  gl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\\n}\"},\"drop-shadow.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nuniform highp mat3 u_displayViewMat3;\\nuniform highp vec2 u_offset;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec3 offset = u_displayViewMat3 * vec3(u_offset, 0.0);\\n  gl_Position = vec4(a_position, 0.0, 1.0) + vec4(offset, 0.0);\\n  v_uv = (a_position + 1.0) / 2.0;\\n}\"},\"edge-detect\":{\"frei-chen\":{\"frei-chen.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nvarying vec2 v_uv;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[9];\\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\\nvoid main() {\\n  G[0] = g0,\\n  G[1] = g1,\\n  G[2] = g2,\\n  G[3] = g3,\\n  G[4] = g4,\\n  G[5] = g5,\\n  G[6] = g6,\\n  G[7] = g7,\\n  G[8] = g8;\\n  mat3 I;\\n  float cnv[9];\\n  vec3 sample;\\n  for (float i = 0.0; i < 3.0; i++) {\\n    for (float j = 0.0; j < 3.0; j++) {\\n      sample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\\n      I[int(i)][int(j)] = length(sample);\\n    }\\n  }\\n  for (int i = 0; i < 9; i++) {\\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\n    cnv[i] = dp3 * dp3;\\n  }\\n  float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\\n  float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\\n  gl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\\n}\"},sobel:{\"sobel.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\\nvoid main() {\\n  mat3 I;\\n  float cnv[2];\\n  vec3 sample;\\n  G[0] = g0;\\n  G[1] = g1;\\n  for (float i = 0.0; i < 3.0; i++) {\\n    for (float j = 0.0; j < 3.0; j++) {\\n      sample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\n      I[int(i)][int(j)] = length(sample);\\n    }\\n  }\\n  for (int i = 0; i < 2; i++) {\\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\n    cnv[i] = dp3 * dp3;\\n  }\\n  gl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\\n}\"}},\"edge-enhance\":{\"edge-enhance.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\\nvoid main() {\\n  mat3 I;\\n  float cnv[2];\\n  vec3 sample;\\n  G[0] = g0;\\n  G[1] = g1;\\n  for (float i = 0.0; i < 3.0; i++) {\\n    for (float j = 0.0; j < 3.0; j++) {\\n      sample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\n      I[int(i)][int(j)] = length(sample);\\n    }\\n  }\\n  for (int i = 0; i < 2; i++) {\\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\n    cnv[i] = dp3 * dp3;\\n  }\\n  vec4 color = texture2D(u_colorTexture, v_uv);\\n  gl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\\n}\"},filterEffect:{\"filterEffect.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform mat4 u_coefficients;\\nvarying vec2 v_uv;\\nvoid main() {\\n  vec4 color = texture2D(u_colorTexture, v_uv);\\n  vec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\\n  float a = color.a;\\n  gl_FragColor = vec4(a * rgbw.rgb, a);\\n}\"},pp:{\"pp.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying vec2 v_uv;\\nvoid main() {\\n  gl_Position = vec4(a_position, 0.0, 1.0);\\n  v_uv = (a_position + 1.0) / 2.0;\\n}\"}},raster:{bitmap:{\"bitmap.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform highp vec2 u_coordScale;\\nuniform lowp float u_opacity;\\n#include <filtering/bicubic.glsl>\\nvoid main() {\\n#ifdef BICUBIC\\n  vec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\\n#else\\n  vec4 color = texture2D(u_texture, v_texcoord);\\n#endif\\n  float alpha = u_opacity * color.a;\\n  gl_FragColor = vec4(alpha * color.rgb, alpha);\\n}\",\"bitmap.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\n  v_texcoord = a_pos;\\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"},common:{\"common.glsl\":\"uniform sampler2D u_image;\\nuniform int u_bandCount;\\nuniform bool u_isFloatTexture;\\nuniform bool u_flipY;\\nuniform float u_opacity;\\nuniform int u_resampling;\\nuniform vec2 u_srcImageSize;\\n#ifdef APPLY_PROJECTION\\n#include <raster/common/projection.glsl>\\n#endif\\n#ifdef BICUBIC\\n#include <filtering/bicubic.glsl>\\n#endif\\n#ifdef BILINEAR\\n#include <filtering/bilinear.glsl>\\n#endif\\nvec2 getPixelLocation(vec2 coords) {\\n  vec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\\n#ifdef APPLY_PROJECTION\\n  targetLocation = projectPixelLocation(targetLocation);\\n#endif\\n  return targetLocation;\\n}\\nbool isOutside(vec2 coords){\\n   if (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\\n     return true;\\n   } else {\\n     return false;\\n   }\\n}\\nvec4 getPixel(vec2 pixelLocation) {\\n#ifdef BICUBIC\\n  vec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\\n#elif defined(BILINEAR)\\n  vec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\\n#else\\n  vec4 color = texture2D(u_image, pixelLocation);\\n#endif\\n  return color;\\n}\",\"contrastBrightness.glsl\":\"uniform float u_contrastOffset;\\nuniform float u_brightnessOffset;\\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\\n  vec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\\n  float maxI = 255.0;\\n  float mid = 128.0;\\n  float c = u_contrastOffset;\\n  float b = u_brightnessOffset;\\n  vec4 v;\\n  if (c > 0.0 && c < 100.0) {\\n    v = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\\n  } else if (c <= 0.0 && c > -100.0) {\\n    v = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\\n  } else if (c == 100.0) {\\n    v = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\\n    v = (sign(v) + 1.0) / 2.0;\\n  } else if (c == -100.0) {\\n    v = vec4(mid, mid, mid, currentPixel.a);\\n  }\\n  return vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\\n}\",\"projection.glsl\":\"uniform sampler2D u_transformGrid;\\nuniform vec2 u_transformSpacing;\\nuniform vec2 u_transformGridSize;\\nuniform vec2 u_targetImageSize;\\nvec2 projectPixelLocation(vec2 coords) {\\n  vec2 index_image = floor(coords * u_targetImageSize);\\n  vec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\\n  vec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\\n  vec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\\n  vec2 srcLocation;\\n  vec2 transform_location = index_transform + oneTransformPixel * 0.5;\\n  if (pos.s <= pos.t) {\\n    vec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\\n    vec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\\n    srcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\\n    srcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\\n  } else {\\n    vec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\\n    vec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\\n    srcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\\n    srcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\\n  }\\n  return srcLocation;\\n}\"},hillshade:{\"hillshade.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform int u_hillshadeType;\\nuniform float u_sinZcosAs[6];\\nuniform float u_sinZsinAs[6];\\nuniform float u_cosZs[6];\\nuniform float u_weights[6];\\nuniform vec2 u_factor;\\nuniform float u_minValue;\\nuniform float u_maxValue;\\n#include <raster/lut/colorize.glsl>\\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\\n  if (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\\n    return 0.0;\\n  }\\n  else {\\n    return e;\\n  }\\n}\\nvec3 rgb2hsv(vec3 c) {\\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n  vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\n  vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\n  float d = q.x - min(q.w, q.y);\\n  float e = 1.0e-10;\\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\\n  val = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\\n  vec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\\n  vec3 hsv = rgb2hsv(rgb.xyz);\\n  hsv.z = hillshade;\\n  return vec4(hsv2rgb(hsv), 1.0) * rgb.a;\\n}\\nvoid main() {\\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\\n  if (isOutside(pixelLocation)) {\\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n     return;\\n  }\\n  vec4 currentPixel = getPixel(pixelLocation);\\n  if (currentPixel.a == 0.0) {\\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n    return;\\n  }\\n  vec2 axy = vec2(-1.0, -1.0);\\n  vec2 bxy = vec2(0.0, -1.0);\\n  vec2 cxy = vec2(1.0, -1.0);\\n  vec2 dxy = vec2(-1.0, 0.0);\\n  vec2 fxy = vec2(1.0, 0.0);\\n  vec2 gxy = vec2(-1.0, 1.0);\\n  vec2 hxy = vec2(0.0, 1.0);\\n  vec2 ixy = vec2(1.0, 1.0);\\n  vec2 onePixel = 1.0 / u_srcImageSize;\\n  if (pixelLocation.s < onePixel.s) {\\n    axy[0] = 1.0;\\n    dxy[0] = 1.0;\\n    gxy[0] = 1.0;\\n  }\\n  if (pixelLocation.t < onePixel.t) {\\n    axy[1] = 1.0;\\n    bxy[1] = 1.0;\\n    cxy[1] = 1.0;\\n  }\\n  if (pixelLocation.s > 1.0 - onePixel.s) {\\n    cxy[0] = -1.0;\\n    fxy[0] = -1.0;\\n    ixy[0] = -1.0;\\n  }\\n  if (pixelLocation.t > 1.0 - onePixel.t) {\\n    gxy[1] = -1.0;\\n    hxy[1] = -1.0;\\n    ixy[1] = -1.0;\\n  }\\n  vec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\\n  vec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\\n  vec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\\n  vec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\\n  vec4 ve = texture2D(u_image, pixelLocation);\\n  vec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\\n  vec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\\n  vec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\\n  vec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\\n  float dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\\n  float dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\\n  float dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\\n  float hillshade = 0.0;\\n  if (u_hillshadeType == 0){\\n\\t   float cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\\n     float z = (u_cosZs[0] + cosDelta) / dzd;\\n     if (z < 0.0)  z = 0.0;\\n\\t   hillshade = z;\\n  } else {\\n\\t  for (int k = 0; k < 6; k++) {\\n\\t\\t float cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\\n\\t\\t float z = (u_cosZs[k] + cosDelta) / dzd;\\n\\t\\t if (z < 0.0) z = 0.0;\\n     hillshade = hillshade + z * u_weights[k];\\n\\t\\t if (k == 5) break;\\n    }\\n  }\\n  float alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\\n#ifdef APPLY_COLORMAP\\n  gl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\\n#else\\n  gl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\\n#endif\\n}\",\"hillshade.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\n  v_texcoord = a_pos;\\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"},lut:{\"colorize.glsl\":\"uniform sampler2D u_colormap;\\nuniform float u_colormapOffset;\\nuniform float u_colormapMaxIndex;\\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\\n  float clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\\n  vec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\\n  vec4 color = texture2D(u_colormap, clrPosition);\\n  vec4 result = vec4(color.rgb, color.a * currentPixel.a);\\n  return result;\\n}\",\"lut.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\\n  if (isOutside(pixelLocation)) {\\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n     return;\\n  }\\n  vec4 currentPixel = getPixel(pixelLocation);\\n  vec4 result = colorize(currentPixel, 1.0);\\n  gl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\\n}\",\"lut.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform highp float u_scale;\\nuniform highp vec2 u_offset;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\n  v_texcoord = a_pos * u_scale + u_offset;\\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform bool u_useGamma;\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\n#include <raster/lut/colorize.glsl>\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\\n  if (val >= maxCutOff) {\\n    return maxOutput;\\n  } else if (val <= minCutOff) {\\n    return minOutput;\\n  }\\n  float stretchedVal;\\n  if (useGamma) {\\n  \\tfloat tempf = 1.0;\\n\\t  float outRange = maxOutput - minOutput;\\n\\t  float relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\n\\t  if (gamma > 1.0) {\\n      tempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\\n    }\\n    stretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\\n  } else {\\n    stretchedVal = minOutput + (val - minCutOff) * factor;\\n  }\\n  return stretchedVal;\\n}\\nvoid main() {\\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\\n  if (isOutside(pixelLocation)) {\\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n     return;\\n  }\\n  vec4 currentPixel = getPixel(pixelLocation);\\n#ifdef NOOP\\n  gl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\n  return;\\n#endif\\n  if (u_bandCount == 1) {\\n    float grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\n#ifdef APPLY_COLORMAP\\n      vec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\\n      gl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\\n#else\\n      gl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\\n#endif\\n  } else {\\n    float redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\n    float greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\\n    float blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\\n    gl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\\n  }\\n}\",\"stretch.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform highp float u_scale;\\nuniform highp vec2 u_offset;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\n  v_texcoord = a_pos * u_scale + u_offset;\\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"}},stencil:{\"stencil.frag\":\"void main() {\\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n}\",\"stencil.vert\":\"attribute vec2 a_pos;\\nvoid main() {\\n  gl_Position = vec4(a_pos, 0.0, 1.0);\\n}\"},tileInfo:{\"tileInfo.frag\":\"uniform mediump sampler2D u_texture;\\nvarying mediump vec2 v_tex;\\nvoid main(void) {\\n  lowp vec4 color = texture2D(u_texture, v_tex);\\n  gl_FragColor = 0.75 * color;\\n}\",\"tileInfo.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_coord_ratio;\\nuniform mediump vec2 u_delta;\\nuniform mediump vec2 u_dimensions;\\nvarying mediump vec2 v_tex;\\nvoid main() {\\n  mediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\\n  vec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\\n  gl_Position = vec4(v_pos.xy, 0.0, 1.0);\\n  v_tex = a_pos;\\n}\"},util:{\"encoding.glsl\":\"const vec4 rgba2float_factors = vec4(\\n    255.0 / (256.0),\\n    255.0 / (256.0 * 256.0),\\n    255.0 / (256.0 * 256.0 * 256.0),\\n    255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n  );\\nfloat rgba2float(vec4 rgba) {\\n  return dot(rgba, rgba2float_factors);\\n}\"}});\n\n// CONCATENATED MODULE: ./node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/resolver.js\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nconst resolver_t=new ShaderCompiler[\"a\" /* default */]((function(r){let t=shaderRepository;return r.split(\"/\").forEach((r=>{t&&(t=t[r])})),t}));function o(r){return resolver_t.resolveIncludes(r)}\n\n\n/***/ }),\n\n/***/ \"vrr1\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return r; });\n/* unused harmony export createFrameBuffer */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return n; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return i; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return u; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return s; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return o; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return l; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return f; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return m; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return p; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return c; });\n/* harmony import */ var _core_has_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"wSAH\");\n/* harmony import */ var _chunks_builtins_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"n4uK\");\n/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"of9L\");\n/* harmony import */ var _FramebufferObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"0meK\");\n/* harmony import */ var _RenderingContext_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"bfJE\");\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nfunction n(t,n,a=\"nearest\",i=!1){var r;const o=!(i&&\"u8\"===n.pixelType),s=o?5126:5121,u=null==n.pixels||0===n.pixels.length?null:o?n.getAsRGBAFloat():n.getAsRGBA(),f=null==(r=t.capabilities.textureFloat)?void 0:r.textureFloatLinear,l={width:n.width,height:n.height,target:3553,pixelFormat:6408,internalFormat:6408,samplingMode:!f||\"bilinear\"!==a&&\"cubic\"!==a?9728:9729,dataType:s,wrapMode:33071,flipped:!1};return new _Texture_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](t,l,u)}function a(n,a,i,r){const o=new _Texture_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](n,{width:a,height:i,target:3553,pixelFormat:6408,internalFormat:6408,samplingMode:9728,dataType:r?5121:5126,wrapMode:33071,flipped:!1});return new _FramebufferObject_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"](n,{colorTarget:0,depthStencilTarget:3,width:a,height:i},o)}function i(t,n){const a=4*n.size[0],i=n.size[1],r={width:a,height:i,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5126,samplingMode:9728,wrapMode:33071,flipped:!1},o=new Float32Array(a*i*4);let s=0;for(let e=0;e<n.coefficients.length;e++)o[s++]=n.coefficients[e],e%3==2&&(o[s++]=1);return new _Texture_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](t,r,o)}function r(t,n){const a={width:n.length/4,height:1,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071,flipped:!1};return new _Texture_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](t,a,n)}function o(e,t,n,a=1,i=!0,r=!1){return{u_flipY:i,u_isFloatTexture:r,u_applyTransform:!!e,u_opacity:a,u_transformSpacing:e?e.spacing:null,u_transformGridSize:e?e.size:null,u_targetImageSize:t,u_srcImageSize:n}}function s(e,t){return{u_colormapOffset:t||0,u_colormapMaxIndex:e?e.length/4-1:null}}function u(e,t){return{u_scale:e,u_offset:t}}function f(e){return{u_bandCount:e.bandCount,u_minOutput:e.outMin,u_maxOutput:e.outMax,u_minCutOff:e.minCutOff,u_maxCutOff:e.maxCutOff,u_factor:e.factor,u_useGamma:e.useGamma,u_gamma:e.gamma,u_gammaCorrection:e.gammaCorrection}}function l(e){return{u_hillshadeType:e.hillshadeType,u_sinZcosAs:e.sinZcosAs,u_sinZsinAs:e.sinZsinAs,u_cosZs:e.cosZs,u_weights:e.weights,u_factor:e.factor,u_minValue:e.minValue,u_maxValue:e.maxValue}}function m(e,t){const n=e.gl,a=t.glName,i=n.getProgramParameter(a,n.ACTIVE_UNIFORMS),r=new Map;let o;for(let e=0;e<i;e++)o=n.getActiveUniform(a,e),o&&r.set(o.name,{location:n.getUniformLocation(a,o.name),info:o});return r}function c(e,t,n){Object.keys(n).forEach((a=>{const i=t.get(a)||t.get(a+\"[0]\");i&&function(e,t,n,a){if(null===a||null==n)return!1;const{info:i}=a;switch(i.type){case 5126:i.size>1?e.setUniform1fv(t,n):e.setUniform1f(t,n);break;case 35664:e.setUniform2fv(t,n);break;case 35665:e.setUniform3fv(t,n);break;case 35666:e.setUniform4fv(t,n);break;case 35675:e.setUniformMatrix3fv(t,n);break;case 35676:e.setUniformMatrix4fv(t,n);break;case 5124:i.size>1?e.setUniform1iv(t,n):e.setUniform1i(t,n);break;case 35670:e.setUniform1i(t,n?1:0);break;case 35667:case 35671:e.setUniform2iv(t,n);break;case 35668:case 35672:e.setUniform3iv(t,n);break;case 35669:case 35673:e.setUniform4iv(t,n);break;default:return!1}}(e,a,n[a],i)}))}function p(e,t,n,a){n.length===a.length&&(a.some((e=>null==e))||n.some((e=>null==e))||n.forEach(((n,i)=>{t.setUniform1i(n,i),e.bindTexture(a[i],i)})))}\n\n\n/***/ })\n\n}]);","inputSourceMap":null}